@inproceedings{Ram√≠rez-De-La-Cruz201431,
abstract = {Source code plagiarism can be identified by analyzing similarities of several and diverse aspects of a pair of source code. In this paper we present three types of similarity features that account for three aspects of source code documents, particularly: i) lexical, ii) structural, and iii) stylistics. From the lexical view, we used a character 3-gram model without considering reserved words for the programming language in revision. For the structural view, we proposed two similarity metrics that take into account the func- tion's signatures within a source code, namely the data types and the identifier's names of the function's signature. The third view consists on accounting for several stylistics' features, such as the number of white spaces, lines of code, upper letters, etc. Accordingly, we proposed 8 similarity features to represent pairs of source code in order to, under a supervised approach, identify plagiarized pairs of source codes. We use a set of more than 32000 source code documents from Java and C to perform our experiments. The results show the pertinence of our set of features to identify plagiarism for source code documents that satisfy particular conditions, such as, source code that solve difficult problems. {\textcopyright} 2015 ACM.},
address = {New York, New York, USA},
annote = {From Duplicate 1 (On the importance of lexicon, structure and style for identifying source code plagiarism - Ram{\'{i}}rez-De-La-Cruz, A; Ram{\'{i}}rez-De-La-Rosa, G; S{\'{a}}nchez-S{\'{a}}nchez, C; Jim{\'{e}}nez-Salazar, H)

cited By 0; Conference of 6th International Workshop of the Forum for Information Retrieval Evaluation, FIRE 2014 ; Conference Date: 5 December 2014 Through 7 December 2014; Conference Code:119052},
author = {Ram{\'{i}}rez-de-la-Cruz, Aar{\'{o}}n and Ram{\'{i}}rez-de-la-Rosa, Gabriela and S{\'{a}}nchez-S{\'{a}}nchez, Christian and Jim{\'{e}}nez-Salazar, H{\'{e}}ctor},
booktitle = {Proceedings of the Forum for Information Retrieval Evaluation},
doi = {10.1145/2824864.2824879},
editor = {{Mehta P. Mitra M.}, Agrawal M Majumder P},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Ram{\'{i}}rez-de-la-Cruz et al. - On the Importance of Lexicon, Structure and Style for Identifying Source Code Plagiarism.pdf:pdf},
isbn = {9781450337557},
keywords = {C (programming language),Codes (symbols),Computer programming languages,Document Representation,Document representation,I,Lexical,Plagiarism dete,Plagiarism detection,Source code plagiarism,structural and stylistic features},
pages = {31--38},
publisher = {ACM Press},
series = {FIRE '14},
title = {{On the Importance of Lexicon, Structure and Style for Identifying Source Code Plagiarism}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959862361{\&}partnerID=40{\&}md5=bd8703a6ed09c7c649c59ad6b90d8bf5 10.1145/2824864.2824879 http://dl.acm.org/citation.cfm?doid=2824864.2824879},
year = {2015}
}
@inproceedings{Ganguly201439,
abstract = {We investigate an information retrieval (IR) based approach to source code plagiarism detection. The standard method plagiarism detection by extensively checking pairwise sim- ilarities between documents is not scalable to large collec- tions of source code documents. To make the task of source code plagiarism detection fast and scalable in practice, we propose an IR based approach. In this method each doc- ument is treated as a pseudo-query which retrieves a list of documents which are potential candidate for containing plagiarised material in decreasing order of their similarity to the query. A threshold is then applied on the relative similarity decrement ratios to create a set of documents as potential cases of source-code reuse. Instead of treating a source code as an unstructured text document, we explore term extraction from the annotated parse tree of a source code and also make use of a field-based language model for indexing and retrieval of source code documents. Results confirm that source code parsing plays a vital role in im- proving the plagiarism prediction accuracy. {\textcopyright} 2015 ACM.},
address = {New York, New York, USA},
annote = {From Duplicate 1 (DCU@FIRE-2014: An Information Retrieval Approach for Source Code Plagiarism Detection - Ganguly, Debasis; Jones, Gareth J F)

cited By 0; Conference of 6th International Workshop of the Forum for Information Retrieval Evaluation, FIRE 2014 ; Conference Date: 5 December 2014 Through 7 December 2014; Conference Code:119052},
author = {Ganguly, Debasis and Jones, Gareth J F},
booktitle = {Proceedings of the Forum for Information Retrieval Evaluation},
doi = {10.1145/2824864.2824887},
editor = {{Mehta P. Mitra M.}, Agrawal M Majumder P},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Ganguly, Jones - DCU@FIRE-2014 An Information Retrieval Approach for Source Code Plagiarism Detection.pdf:pdf},
isbn = {9781450337557},
keywords = {Codes (symbols),Computer programming languages,Field Search,Indexing and retrieval,Information,Information retrie,Source Code Plagiarism Detection},
pages = {39--42},
publisher = {ACM Press},
series = {FIRE '14},
title = {{DCU@FIRE-2014: An Information Retrieval Approach for Source Code Plagiarism Detection}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959923230{\&}partnerID=40{\&}md5=75b7402cbc979449cbbd69f539967a48 http://dl.acm.org/citation.cfm?doid=2824864.2824887 http://doi.acm.org/10.1145/2824864.2824887},
volume = {05-07-Dec-},
year = {2015}
}
@inproceedings{Novak2016,
abstract = {Plagiarism is a big concern in academia and it can be a problem in every course. Plagiarism occurs when someone present others work as their own. Students plagiarize in different areas: homework assignments, essays, projects, etc. In this work focus is on programming courses and plagiarism in programming assignments. While source-code plagiarism detection, is in some way very similar to text plagiarism detection, it is very different in other ways. So, a lot of research is done focusing on source-code plagiarism. Some questions that are researched in this field are: what is considered plagiarism in programming assignments, how to perform plagiarism detection in programming assignments, how to do it automatically, what tool(s) to use, how students cheat in programming courses, how they try to obfuscate cheating, and many other questions. This work is a review of important research papers in the field of source-code plagiarism detection in academia. This paper tries to answer some of the mentioned research questions and give indication to future work.},
address = {Opatija, Croatia},
author = {Novak, Matija},
booktitle = {39th International Convention on Information and Communication Technology, Electronics and Microelectronics},
doi = {10.1109/MIPRO.2016.7522248},
file = {:E$\backslash$:/FOI/Nastava/my articles/objavljeno/MIPRO2016 2 rada/2016 - Novak - Review of source-code plagiarism detection in academia.pdf:pdf},
isbn = {978-953-233-086-1},
keywords = {computer science education,educational courses,sec},
month = {may},
pages = {796--801},
publisher = {IEEE},
title = {{Review of source-code plagiarism detection in academia}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7522248 http://ieeexplore.ieee.org/document/7522248/},
year = {2016}
}
@article{ISI:000373805100006,
abstract = {In programming courses there are various ways in which students attempt to cheat. The most commonly used method is copying source code from other students and making minimal changes in it, like renaming variable names. Several tools like Sherlock, JPlag and Moss have been devised to detect source code plagiarism. However, for larger student assignments and projects that involve a lot of source code files these tools are not so effective. Also, issues may occur when source code is given to students in class so they can copy it. In such cases these tools do not provide satisfying results and reports. In this study, we present an improved process model for plagiarism detection when multiple student files exist and allowed source code is present. In the research in this paper we use the Sherlock detection tool, although the presented process model can be combined with any plagiarism detection engine. The proposed model is tested on assignments in three courses in two subsequent academic years.},
address = {AKADEMIJOS 4, VILNIUS, 08663, LITHUANIA},
author = {Kermek, Dragutin and Novak, Matija},
doi = {10.15388/infedu.2016.06},
file = {:E$\backslash$:/FOI/Nastava/my articles/objavljeno/IiEVol15No1/2016 - Kermek, Novak - Process Model Improvement for Source Code Plagiarism Detection in Student Programming Assignments.pdf:pdf},
issn = {23358971},
journal = {Informatics in Education},
keywords = {plagiarism detection,process model,source-code},
month = {may},
number = {1},
pages = {103--126},
publisher = {VILNIUS UNIV, INST MATHEMATICS {\&} INFORMATICS},
title = {{Process Model Improvement for Source Code Plagiarism Detection in Student Programming Assignments}},
type = {Article},
url = {http://www.mii.lt/informatics{\_}in{\_}education/htm/infedu.2016.06.htm},
volume = {15},
year = {2016}
}
@article{ISI:000338011000007,
abstract = {There has been much research and discussion relating to variations in plagiaristic activity observed in students from different demographic backgrounds. Differences in behaviour have been noted in many studies, although the underlying reasons are still a matter of debate. Existing work focuses mainly on textual plagiarism, and most often derives results by studying (small) groups of overseas students studying in a Western context. This study investigates understanding of source-code plagiarism (i.e. plagiarism of computer programmes) amongst university students in China. The survey instrument was a Chinese translation of a survey previously administered in English in the UK. This paper reports the results of the exploratory survey conducted in China, and compares these results to those from a parallel survey conducted in the UK. The results show that there is a significant difference in understanding between the respondents from the two surveys, and suggest topics which a future and more comprehensive study may focus on.},
address = {4 PARK SQUARE, MILTON PARK, ABINGDON OX14 4RN, OXFORDSHIRE, ENGLAND},
annote = {From Duplicate 2 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, D; Joy, M; Cosma, G; Boyatt, R; Sinclair, J; Yau, J)

Export Date: 23 February 2015

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry, United Kingdom; email: m.s.joy@warwick.ac.uk

References: Bamford, J., Sergiou, K., International Students and Plagiarism: An Analysis of the Reasons for Plagiarism among International Foundation Students (2005) Investigations in University Teaching and Learning, 2 (2). , www.londonmet.ac.uk/library/b10884{\_}3.pdf; 
Bista, K., Academic Dishonesty among International Students in Higher Education (2011) To Improve the Academy: Resources for Faculty, Instructional, and Organizational Development, 30, pp. 159-172;
Bowyer, K., Hall, L., Experience Using MOSS to Detect Cheating on Programming Assignments (1999) Proceedings of 29th Annual Frontiers in Education Conference (FIE99), pp. 18-22. , San Juan, Puerto Rico;
Bradley, C., (2011) Plagiarism Education and Prevention: A Subject-driven Case-based Approach, , Oxford,: Chandos Publishing;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1), pp. 22-28;
Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , 2nd ed, Hillsdale, NJ,: Lawrence Erlbaum;
Eaton, N., (2009) Plurk Has no Plans to Sue Microsoft - Yet, , http://blog.seattlepi.com/microsoft/2009/12/15/plurk-has-no-plans-to-sue-microsoft-and150-yet/;
Gullifer, J.M., Tyson, G.A., Who has Read the Policy on Plagiarism? Unpacking Students' Understanding of Plagiarism (2013) Studies in Higher Education Ahead-of-print;
Hayes, N., Introna, L.D., Cultural Values, Plagiarism, and Fairness: When Plagiarism Gets in the Way of Learning (2005) Ethics and Behavior, 15 (3), pp. 213-231;
Heitman, E., Litewka, S., International Perspectives on Plagiarism and Considerations for Teaching International Trainees (2011) Urologic Oncology: Seminars and Original Investigations, 29 (1), pp. 104-108;
Hu, G., Lei, J., Investigating Chinese University Students' Knowledge of and Attitudes toward Plagiarism from an Integrated Perspective (2012) Language Learning, 62 (3), pp. 813-850;
Joy, M.S., Cosma, G., Yau, J.Y.-K., Sinclair, J.E., Source-code Plagiarism - A Student Perspective (2011) IEEE Transactions on Education, 54 (1), pp. 125-132;
Joy, M.S., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;
Leask, B., Plagiarism, Cultural Diversity and Metaphor - Implications for Academic Staff Development (2006) Assessment {\&} Evaluation in Higher Education, 31 (2), pp. 183-199;
Liu, D., Plagiarism in ESOL Students: Is Cultural Conditioning Truly the Major Culprit? (2005) ELT Journal, 59 (3), pp. 234-241;
Mann, S., Frew, Z., (2006) Similarity and Originality in Code: Plagiarism and Normal Variation in Student Assignments, pp. 143-150. , Proceedings of the 8th Australasian Conference on Computing Education (ACE '06);
(2006) 985 Project, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s238/201112/xxgk{\_}128833.html, Ministry of Education;
(2013) Project 211, , http://www.moe.edu.cn/publicfiles/business/htmlfiles/moe/moe{\_}94/201002/82762.html, Ministry of Education;
Notice of Ministry of Education and Ministry of Finance's announcement of the result of Collaborative Innovation Center 2012 (2013) Educational Technology Letter, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s7062/201306/xxgk{\_}152878.html, Ministry of Education;
Park, C., In Other (People's) Words: Plagiarism by University Students - Literature and Lessons (2003) Assessment {\&} Evaluation in Higher Education, 28 (5), pp. 471-488;
Patel, N., Open Source and China: Inverting Copyright? (2005) Wisconsin International Law Journal, 23 (1), pp. 781-805;
Pennycook, A., Borrowing Others' Words: Text, Ownership, Memory, and Plagiarism (1996) TESOL Quarterly, 30 (2), pp. 201-230;
Prechelt, L., Malpohl, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Qi, S., (2008) A Descriptive Study of Plagiarism in the Writing Assignments of First-year Chinese Students in the American English Language Institute at Stephen F. Austin State University, , MEd thesis, Stephen F. Austin State University, ProQuest, Ann Arbor, MI;
Risquez, A., O'Dwyer, M., Ledwith, A., Thou Shalt not Plagiarise': From Self-Reported Views to Recognition and Avoidance of Plagiarism (2011) Assessment {\&} Evaluation in Higher Education, 38 (1), pp. 34-43;
Sowden, C., Plagiarism and the Culture of Multilingual Students in Higher Education Abroad (2005) ELT Journal, 59 (3), pp. 226-233;
Sraka, D., Kau{\v{c}}i{\v{c}}, B., (2009) Source-code Plagiarism, pp. 461-466. , Proceedings of the 31st International Conference on Information Technology Interfaces (ITI 2009), Dubrovnik, Croatia;
Stone, C.R., What Plagiarism was not: Some Preliminary Observations on Classical China Attitudes toward What the West Calls Intellectual Property (2008) Marquette Law Review, 92 (1), pp. 199-230;
Twomey, T., White, H., Sagendorf, K., (2009) Pedagogy, not Policing: Positive Approaches to Academic Integrity at the University, , Syracuse, NY,: Graduate School Press of Syracuse University;
Yakovchuk, N., Towards Understanding the Root Causes of Plagiarism among Non-native Speaker Students (2008) Current Developments in English for Academic, Specific and Occupational Purposes, pp. 39-53. , In: Krzanowski M., editors Reading,: Garnet

From Duplicate 2 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, D; Joy, M; Cosma, G; Boyatt, R; Sinclair, J; Yau, J)

Export Date: 23 February 2015

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry, United Kingdom; email: m.s.joy@warwick.ac.uk

References: Bamford, J., Sergiou, K., International Students and Plagiarism: An Analysis of the Reasons for Plagiarism among International Foundation Students (2005) Investigations in University Teaching and Learning, 2 (2). , www.londonmet.ac.uk/library/b10884{\_}3.pdf; 
Bista, K., Academic Dishonesty among International Students in Higher Education (2011) To Improve the Academy: Resources for Faculty, Instructional, and Organizational Development, 30, pp. 159-172;
Bowyer, K., Hall, L., Experience Using MOSS to Detect Cheating on Programming Assignments (1999) Proceedings of 29th Annual Frontiers in Education Conference (FIE99), pp. 18-22. , San Juan, Puerto Rico;
Bradley, C., (2011) Plagiarism Education and Prevention: A Subject-driven Case-based Approach, , Oxford,: Chandos Publishing;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1), pp. 22-28;
Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , 2nd ed, Hillsdale, NJ,: Lawrence Erlbaum;
Eaton, N., (2009) Plurk Has no Plans to Sue Microsoft - Yet, , http://blog.seattlepi.com/microsoft/2009/12/15/plurk-has-no-plans-to-sue-microsoft-and150-yet/;
Gullifer, J.M., Tyson, G.A., Who has Read the Policy on Plagiarism? Unpacking Students' Understanding of Plagiarism (2013) Studies in Higher Education Ahead-of-print;
Hayes, N., Introna, L.D., Cultural Values, Plagiarism, and Fairness: When Plagiarism Gets in the Way of Learning (2005) Ethics and Behavior, 15 (3), pp. 213-231;
Heitman, E., Litewka, S., International Perspectives on Plagiarism and Considerations for Teaching International Trainees (2011) Urologic Oncology: Seminars and Original Investigations, 29 (1), pp. 104-108;
Hu, G., Lei, J., Investigating Chinese University Students' Knowledge of and Attitudes toward Plagiarism from an Integrated Perspective (2012) Language Learning, 62 (3), pp. 813-850;
Joy, M.S., Cosma, G., Yau, J.Y.-K., Sinclair, J.E., Source-code Plagiarism - A Student Perspective (2011) IEEE Transactions on Education, 54 (1), pp. 125-132;
Joy, M.S., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;
Leask, B., Plagiarism, Cultural Diversity and Metaphor - Implications for Academic Staff Development (2006) Assessment {\&} Evaluation in Higher Education, 31 (2), pp. 183-199;
Liu, D., Plagiarism in ESOL Students: Is Cultural Conditioning Truly the Major Culprit? (2005) ELT Journal, 59 (3), pp. 234-241;
Mann, S., Frew, Z., (2006) Similarity and Originality in Code: Plagiarism and Normal Variation in Student Assignments, pp. 143-150. , Proceedings of the 8th Australasian Conference on Computing Education (ACE '06);
(2006) 985 Project, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s238/201112/xxgk{\_}128833.html, Ministry of Education;
(2013) Project 211, , http://www.moe.edu.cn/publicfiles/business/htmlfiles/moe/moe{\_}94/201002/82762.html, Ministry of Education;
Notice of Ministry of Education and Ministry of Finance's announcement of the result of Collaborative Innovation Center 2012 (2013) Educational Technology Letter, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s7062/201306/xxgk{\_}152878.html, Ministry of Education;
Park, C., In Other (People's) Words: Plagiarism by University Students - Literature and Lessons (2003) Assessment {\&} Evaluation in Higher Education, 28 (5), pp. 471-488;
Patel, N., Open Source and China: Inverting Copyright? (2005) Wisconsin International Law Journal, 23 (1), pp. 781-805;
Pennycook, A., Borrowing Others' Words: Text, Ownership, Memory, and Plagiarism (1996) TESOL Quarterly, 30 (2), pp. 201-230;
Prechelt, L., Malpohl, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Qi, S., (2008) A Descriptive Study of Plagiarism in the Writing Assignments of First-year Chinese Students in the American English Language Institute at Stephen F. Austin State University, , MEd thesis, Stephen F. Austin State University, ProQuest, Ann Arbor, MI;
Risquez, A., O'Dwyer, M., Ledwith, A., Thou Shalt not Plagiarise': From Self-Reported Views to Recognition and Avoidance of Plagiarism (2011) Assessment {\&} Evaluation in Higher Education, 38 (1), pp. 34-43;
Sowden, C., Plagiarism and the Culture of Multilingual Students in Higher Education Abroad (2005) ELT Journal, 59 (3), pp. 226-233;
Sraka, D., Kau{\v{c}}i{\v{c}}, B., (2009) Source-code Plagiarism, pp. 461-466. , Proceedings of the 31st International Conference on Information Technology Interfaces (ITI 2009), Dubrovnik, Croatia;
Stone, C.R., What Plagiarism was not: Some Preliminary Observations on Classical China Attitudes toward What the West Calls Intellectual Property (2008) Marquette Law Review, 92 (1), pp. 199-230;
Twomey, T., White, H., Sagendorf, K., (2009) Pedagogy, not Policing: Positive Approaches to Academic Integrity at the University, , Syracuse, NY,: Graduate School Press of Syracuse University;
Yakovchuk, N., Towards Understanding the Root Causes of Plagiarism among Non-native Speaker Students (2008) Current Developments in English for Academic, Specific and Occupational Purposes, pp. 39-53. , In: Krzanowski M., editors Reading,: Garnet

From Duplicate 2 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang Dongyong; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, D; Joy, M; Cosma, G; Boyatt, R; Sinclair, J; Yau, J)

Export Date: 23 February 2015

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry, United Kingdom; email: m.s.joy@warwick.ac.uk

References: Bamford, J., Sergiou, K., International Students and Plagiarism: An Analysis of the Reasons for Plagiarism among International Foundation Students (2005) Investigations in University Teaching and Learning, 2 (2). , www.londonmet.ac.uk/library/b10884{\_}3.pdf; 
Bista, K., Academic Dishonesty among International Students in Higher Education (2011) To Improve the Academy: Resources for Faculty, Instructional, and Organizational Development, 30, pp. 159-172;
Bowyer, K., Hall, L., Experience Using MOSS to Detect Cheating on Programming Assignments (1999) Proceedings of 29th Annual Frontiers in Education Conference (FIE99), pp. 18-22. , San Juan, Puerto Rico;
Bradley, C., (2011) Plagiarism Education and Prevention: A Subject-driven Case-based Approach, , Oxford,: Chandos Publishing;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1), pp. 22-28;
Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , 2nd ed, Hillsdale, NJ,: Lawrence Erlbaum;
Eaton, N., (2009) Plurk Has no Plans to Sue Microsoft - Yet, , http://blog.seattlepi.com/microsoft/2009/12/15/plurk-has-no-plans-to-sue-microsoft-and150-yet/;
Gullifer, J.M., Tyson, G.A., Who has Read the Policy on Plagiarism? Unpacking Students' Understanding of Plagiarism (2013) Studies in Higher Education Ahead-of-print;
Hayes, N., Introna, L.D., Cultural Values, Plagiarism, and Fairness: When Plagiarism Gets in the Way of Learning (2005) Ethics and Behavior, 15 (3), pp. 213-231;
Heitman, E., Litewka, S., International Perspectives on Plagiarism and Considerations for Teaching International Trainees (2011) Urologic Oncology: Seminars and Original Investigations, 29 (1), pp. 104-108;
Hu, G., Lei, J., Investigating Chinese University Students' Knowledge of and Attitudes toward Plagiarism from an Integrated Perspective (2012) Language Learning, 62 (3), pp. 813-850;
Joy, M.S., Cosma, G., Yau, J.Y.-K., Sinclair, J.E., Source-code Plagiarism - A Student Perspective (2011) IEEE Transactions on Education, 54 (1), pp. 125-132;
Joy, M.S., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;
Leask, B., Plagiarism, Cultural Diversity and Metaphor - Implications for Academic Staff Development (2006) Assessment {\&} Evaluation in Higher Education, 31 (2), pp. 183-199;
Liu, D., Plagiarism in ESOL Students: Is Cultural Conditioning Truly the Major Culprit? (2005) ELT Journal, 59 (3), pp. 234-241;
Mann, S., Frew, Z., (2006) Similarity and Originality in Code: Plagiarism and Normal Variation in Student Assignments, pp. 143-150. , Proceedings of the 8th Australasian Conference on Computing Education (ACE '06);
(2006) 985 Project, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s238/201112/xxgk{\_}128833.html, Ministry of Education;
(2013) Project 211, , http://www.moe.edu.cn/publicfiles/business/htmlfiles/moe/moe{\_}94/201002/82762.html, Ministry of Education;
Notice of Ministry of Education and Ministry of Finance's announcement of the result of Collaborative Innovation Center 2012 (2013) Educational Technology Letter, , http://www.moe.gov.cn/publicfiles/business/htmlfiles/moe/s7062/201306/xxgk{\_}152878.html, Ministry of Education;
Park, C., In Other (People's) Words: Plagiarism by University Students - Literature and Lessons (2003) Assessment {\&} Evaluation in Higher Education, 28 (5), pp. 471-488;
Patel, N., Open Source and China: Inverting Copyright? (2005) Wisconsin International Law Journal, 23 (1), pp. 781-805;
Pennycook, A., Borrowing Others' Words: Text, Ownership, Memory, and Plagiarism (1996) TESOL Quarterly, 30 (2), pp. 201-230;
Prechelt, L., Malpohl, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Qi, S., (2008) A Descriptive Study of Plagiarism in the Writing Assignments of First-year Chinese Students in the American English Language Institute at Stephen F. Austin State University, , MEd thesis, Stephen F. Austin State University, ProQuest, Ann Arbor, MI;
Risquez, A., O'Dwyer, M., Ledwith, A., Thou Shalt not Plagiarise': From Self-Reported Views to Recognition and Avoidance of Plagiarism (2011) Assessment {\&} Evaluation in Higher Education, 38 (1), pp. 34-43;
Sowden, C., Plagiarism and the Culture of Multilingual Students in Higher Education Abroad (2005) ELT Journal, 59 (3), pp. 226-233;
Sraka, D., Kau{\v{c}}i{\v{c}}, B., (2009) Source-code Plagiarism, pp. 461-466. , Proceedings of the 31st International Conference on Information Technology Interfaces (ITI 2009), Dubrovnik, Croatia;
Stone, C.R., What Plagiarism was not: Some Preliminary Observations on Classical China Attitudes toward What the West Calls Intellectual Property (2008) Marquette Law Review, 92 (1), pp. 199-230;
Twomey, T., White, H., Sagendorf, K., (2009) Pedagogy, not Policing: Positive Approaches to Academic Integrity at the University, , Syracuse, NY,: Graduate School Press of Syracuse University;
Yakovchuk, N., Towards Understanding the Root Causes of Plagiarism among Non-native Speaker Students (2008) Current Developments in English for Academic, Specific and Occupational Purposes, pp. 39-53. , In: Krzanowski M., editors Reading,: Garnet

From Duplicate 2 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

Export Date: 23 February 2015

From Duplicate 2 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, Dongyang; Joy, Mike; Cosma, Georgina; Boyatt, Russell; Sinclair, Jane; Yau, Jane)

From Duplicate 1 (Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK - Zhang, D; Joy, M; Cosma, G; Boyatt, R; Sinclair, J; Yau, J)

Export Date: 23 February 2015

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry, United Kingdom; email: m.s.joy@warwick.ac.uk

References: Bamford, J., Sergiou, K., International Students and Plagiarism: An Analysis of the Reasons for Plagiarism among International Foundation Students (2005) Investigations in University Teaching and Learning, 2 (2). , www.londonmet.ac.uk/library/b10884{\_}3.pdf; 
Bista, K., Academic Dishonesty among International Students in Higher Education (2011) To Improve the Academy: Resources for Faculty, Instructional, and Organizational Development, 30, pp. 159-172;
Bowyer, K., Hall, L., Experience Using MOSS to Detect Cheating on Programming Assignments (1999) Proceedings of 29th Annual Frontiers in Education Conference (FIE99), pp. 18-22. , San Juan, Puerto Rico;
Bradley, C., (2011) Plagiarism Education and Prevention: A Subject-driven Case-based Approach, , Oxford,: Chandos Publishing;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1), pp. 22-28;
Cohen, J., (1988) Statistical Power Analysis for the Behavioral Sciences, , 2nd ed, Hillsdale, NJ,: Lawrence Erlbaum;
Eaton, N., (2009) Plurk Has no Plans to Sue Microsoft - Yet, , http://blog.seattlepi.com/microsoft/2009/12/15/plurk-has-no-plans-to-sue-microsoft-and150-yet/;
Gullifer, J.M., Tyson, G.A., Who has Read the Policy on Plagiarism? Unpacking Students' Understanding of Plagiarism (2013) Studies in Higher Education Ahead-of-print;
Hayes, N., Introna, L.D., Cultural Values, Plagiarism, and Fairness: When Plagiarism Gets in the Way of Learning (2005) Ethics and Behavior, 15 (3), pp. 213-231;
Heitman, E., Litewka, S., International Perspectives on Plagiarism and Considerations for Teaching International Trainees (2011) Urologic Oncology: Seminars and Original Investigations, 29 (1), pp. 104-108;
Hu, G., Lei, J., Investigating Chinese University Students' Knowledge of and Attitudes toward Plagiarism from an Integrated Perspective (2012) Language Learning, 62 (3), pp. 813-850;
Joy, M.S., Cosma, G., Yau, J.Y.-K., Sinclair, J.E., Source-code Plagiarism - A Student Perspective (2011) IEEE Transactions on Education, 54 (1), pp. 125-132;
Joy, M.S., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;},
author = {Zhang, Dongyang and Joy, Mike and Cosma, Georgina and Boyatt, Russell and Sinclair, Jane and Yau, Jane},
doi = {10.1080/02602938.2013.870122},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Zhang et al. - Source-code plagiarism in universities a comparative study of student perspectives in China and the UK.pdf:pdf},
issn = {0260-2938},
journal = {Assessment {\&} Evaluation in Higher Education},
keywords = {China,UK,plagiarism,source-code},
language = {English},
month = {aug},
number = {6},
pages = {743--758},
publisher = {ROUTLEDGE JOURNALS, TAYLOR {\&} FRANCIS LTD},
title = {{Source-code plagiarism in universities: a comparative study of student perspectives in China and the UK}},
type = {Article},
url = {http://www.tandfonline.com/doi/abs/10.1080/02602938.2013.870122 http://www.scopus.com/inward/record.url?eid=2-s2.0-84902536139{\&}partnerID=40{\&}md5=35f451ac529ed67870ab6a40ecce38e4 http://www.scopus.com/inward/record.url?eid=2-s2.0-84921285813{\&}partnerID=40{\&}md},
volume = {39},
year = {2014}
}
@inproceedings{Sharma2015,
abstract = {Source code plagiarism has been a concern for many teachers in computer science field, given to the ease of availability of content in this era of internet. We developed a tool for detecting plagiarism in source codes of students learning programming languages, to cater to the needs of teachers and help them monitor students source codes. Currently our tool supports six programming languages namely, C, C++, Java, Perl, Python and Php. The tool works in three steps. Tokenization followed by N-Gram representation of source codes and then comparison using Greedy String Tiling algorithm. Response time of our tool is one minute for 50 source code files of length 75 lines of code (LOC). The feedback given by the teachers after using our tool, in one of our post graduate courses for advance computing, is over whelming. As per them results given by the tool are ninety-nine percent correct. So we strongly believe that this tool can help to analyse student's true capabilities and help the teachers tremendously in plagiarism detection. {\textcopyright} 2015 IEEE.},
address = {Mumbai, India},
annote = {From Duplicate 2 (Plagiarism detection tool {\&}{\#}x201C;Parikshak{\&}{\#}x201D; - Sharma, Shalini; Sharma, Chandra Shekhar; Tyagi, Veena)

From Duplicate 1 (Plagiarism detection tool "Parikshak" - Sharma, Shalini; Sharma, Chandra Shekhar; Tyagi, Veena)

From Duplicate 1 (Plagiarism detection tool "Parikshak" - Sharma, Shalini; Sharma, Chandra Shekhar; Tyagi, Veena)

cited By 0; Conference of 2015 International Conference on Communication, Information and Computing Technology, ICCICT 2015 ; Conference Date: 15 January 2015 Through 17 January 2015; Conference Code:111084

From Duplicate 2 (Plagiarism detection tool "Parikshak" - Sharma, Shalini; Sharma, Chandra Shekhar; Tyagi, Veena)

From Duplicate 2 (Plagiarism detection tool "Parikshak" - Sharma, Shalini; Sharma, Chandra Shekhar; Tyagi, Veena)

cited By 0; Conference of 2015 International Conference on Communication, Information and Computing Technology, ICCICT 2015 ; Conference Date: 15 January 2015 Through 17 January 2015; Conference Code:111084

From Duplicate 2 (Plagiarism detection tool "parikshak" - Sharma, S; Sharma, C S; Tyagi, V)

cited By 0; Conference of 2015 International Conference on Communication, Information and Computing Technology, ICCICT 2015 ; Conference Date: 15 January 2015 Through 17 January 2015; Conference Code:111084},
author = {Sharma, Shalini and Sharma, Chandra Shekhar and Tyagi, Veena},
booktitle = {International Conference on Communication, Information {\&} Computing Technology},
doi = {10.1109/ICCICT.2015.7045739},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Sharma, Sharma, Tyagi - Plagiarism detection tool Parikshak.pdf:pdf},
isbn = {978-1-4799-5522-0},
keywords = {C++ (programming language),Codes (symbols),Comput,Computational linguistics,Computers,Detecting plagiarism,Detectors,Educational institutions,Graduate course,Java,Lines of c},
month = {jan},
pages = {1--7},
publisher = {IEEE},
title = {{Plagiarism detection tool "Parikshak"}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84925611855{\&}partnerID=40{\&}md5=d8a733a4065477295451f087af6243fe http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7045739 https://www.scopus.com/inward/record.uri?eid=2-s2.0-84925611855{\&}partnerI},
year = {2015}
}
@article{Duric2013,
abstract = {Source code plagiarism is an easy to do task, but very difficult to detect without proper tool support. Various source code similarity detection systems have been developed to help detect source code plagiarism. Those systems need to recognize a number of lexical and structural source code modifications. For example, by some structural modifications (e.g. modification of control structures, modification of data structures or structural redesign of source code) the source code can be changed in such a way that it almost looks genuine. Most of the existing source code similarity detection systems can be confused when these structural modifications have been applied to the original source code. To be considered effective, a source code similarity detection system must address these issues. To address them, we designed and developed the source code similarity system for plagiarism detection. To demonstrate that the proposed system has the desired effectiveness, we performed a well-known conformism test. The proposed system showed promising results as compared with the JPlag system in detecting source code similarity when various lexical or structural modifications are applied to plagiarized code. As a confirmation of these results, an independent samples t-test revealed that there was a statistically significant difference between average values of F-measures for the test sets that we used and for the experiments that we have done in the practically usable range of cut-off threshold values of 35-70{\%}. {\textcopyright} 2012 The Author. Published by Oxford University Press on behalf of The British Computer Society. All rights reserved.},
address = {Faculty of Electrical Engineering, University of Banjaluka, Patre 5, 78 000 Banjaluka, Bosnia and Herzegovina},
annote = {From Duplicate 1 (A Source Code Similarity System for Plagiarism Detection - Duric, Z.; Gasevic, D.)

From Duplicate 1 (A Source Code Similarity System for Plagiarism Detection - Duric, Z.; Gasevic, D.; Duri{\'{c}}, Z; Ga{\v{s}}evi{\'{c}}, D; Duric, Z.; Gasevic, D.)

From Duplicate 1 (A Source Code Similarity System for Plagiarism Detection - Duric, Z.; Gasevic, D.)

From Duplicate 1 (A Source Code Similarity System for Plagiarism Detection - Duric, Z.; Gasevic, D.)

From Duplicate 3 (A source code similarity system for plagiarism detection - Duri{\'{c}}, Z; Ga{\v{s}}evi{\'{c}}, D)

Cited By :5

Export Date: 23 February 2015

CODEN: CMPJA

Correspondence Address: Duri{\'{c}}, Z.; Faculty of Electrical Engineering, University of Banjaluka, Patre 5, 78 000 Banjaluka, Bosnia and Herzegovina; email: zoran.djuric@etfbl.net

References: Hannabuss, S., Contested texts: Issues of plagiarism (2001) Libr. Manage., 22, pp. 311-318; 
Kustanto, C., Liem, I., Automatic source code plagiarism detection (2009) SNPD Proc. 2009 10th ACIS Int. Conf. Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing, pp. 481-486. , Daegu, Korea, May 27-29, IEEE Computer Society,Washington, DC, USA;
Maurer, H., Kappe, F., Zaka, B., Plagiarism - A survey (2006) J. Univers. Comput. Sci., 12, pp. 1050-1084;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Trans. Educ., 32, pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Univers. Comput. Sci., 8, pp. 1016-1038;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proc. 29th Australasian Computer Science Conf., pp. 277-286. , Hobart, Australia, January 16-19, Australian Computer Society Inc Australia;
Kleiman, A.B., Kowaltowski, T., Qualitative analysis and comparison of plagiarism-detection systems in student programs (2009) Technical Report IC-09-08, , Instituto de Computa{\c{c}}{\~{a}}o, Universidade Estadual de Campinas;
Hage, J., Rademaker, P., Van Vugt, N., Plagiarism detection for java: A tool comparison (2011) Proc. 1st Computer Science Education Research Conf., CSERC '11, pp. 33-46. , Heerlen, The Netherlands, April 7-8, ACM, NewYork, NY, USA;
Mozgovoy, M., Frederiksson, K., White, D.R., Joy, M.S., Sutinen, E., Fast plagiarism detection system (2005) String Processing and Information Retrieval: 12th International Conference (SPIRE 2005). Lecture Notes in Computer Science, 3772 (2005), pp. 267-270. , Springer, London;
Mozgovoy, M., Desktop tools for offline plagiarism detection in computer programs (2006) Inf. Educ., 5, pp. 97-112;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42, pp. 129-133;
Jones, E.L., Metrics based plagiarism monitoring (2001) J. Comput. Small Coll., 16, pp. 253-261;
Liu, C., Chen, C., Han, J., Yu, P., Gplag: Detection of software plagiarism by program dependence graph analysis (2006) Proc. 12th ACM SIGKDD Int. Conf. Knowledge Discovery and Data Mining, pp. 872-881. , Philadelphia, USA, August 20-23, ACM, NewYork, NY, USA;
Roy, C.H., Cordy, R., (2007) A Survey on Software Clone Detection Research., , Technical report No. 2007-541, School of Computing, Queen's University at Kingston, ON, Canada;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2007) Softw. Pract. Exp., 37, pp. 151-175;
Hoad, T., Zobel, J., Methods for identifying versioned and plagiarised documents (2002) J. Am. Soc. Inf. Sci. Technol., 54, pp. 203-215;
Heintze, N., Scalable document fingerprinting (1996) USENIX Workshop on Electronic Commerce, pp. 191-200. , Oakland, CA, USA, November 18-21;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Halstead, M.H., Natural laws controlling algorithm structure? (1972) ACM SIGPLAN Not., 7, pp. 19-26;
Halstead, M.H., (1977) Elements of Software Science (Operating and Programming Systems Series), , Elsevier Science Inc., New York, NY, USA;
Bailey, C.T., Dingee, W.L., A software study using halstead metrics (1981) SIGMETRICS Perform. Eval. Rev., 10 (1), pp. 189-197;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Verco, K., Wise, M., Software for detecting suspected plagiarism: Comparing structure and attribute- counting systems (1996) Proc. Australian Conf. Computer Science Education, pp. 81-88. , Sydney, Australia, July 1996, ACM, New York, NY, USA;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to Plague'ing (1992) ACM SIGSCE Bull., 24, pp. 268-271;
Wise, M.J., YAP3: Improved detection of similarities in computer programs and other texts (1996) ACMSIGCSE Bull., 28, pp. 130-134;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACM SIGMOD Int. Conf. Management of Data, pp. 76-85. , San Diego, CA, USA, June 9-12,. ACM, NewYork, NY, USA;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. 30th SIGCSE Technical Symp. Computer Science Education, pp. 266-270. , New Orleans, LA, USA, March 24-28, ACM, NewYork, NY, USA;
Clough, P., Plagiarism in natural and programming languages: An overview of current tools and technologies (2000) Research Memoranda: CS-00-05, , Department of Computer Science, University of Sheffield, UK;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: Gnu-licensed source code plagiarism detection engine for java exercises (2006) Proc. 6th Baltic Sea Conf. Computing Education Research, pp. 141-142. , Uppsala, Sweden, November 9-12, ACM, NewYork, NY, USA;
JPlag - Detecting Software Plagiarism., , https://www.ipd.uni-karlsruhe.de/jplag/, last visit July 29, 2011;
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , ftp://ftp.cs.su.oz.au/michaelw/doc/RKRGST.ps, Department of CS, University of Sydney;
Karp, R.M., Rabin, M.O., Efficient randomized patternmatching algorithms (1987) Ibm J. Res. Dev. Math. Comput., 31, pp. 249-260;
Chen, X., Li, M., McKinnon, B., Seker, A., (2002) A Theory of Uncheatable Program Plagiarism Detection and Its Practical Implementation, , Technical Report, UCSB;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Trans. Inf. Theory, 50, pp. 1545-1551;
Heckel, P., A technique for isolating differences between files (1978) Commun. ACM, 21, pp. 264-268;
Mozgovoy, M., Karakovskiy, S., Klyuev, V., Fast and reliable plagiarism detection system (2007) Frontiers in Education Conf. - Global EEngineering: Knowledge Without Borders, pp. S4H-S11. , Milwaukee, USA, October 10-13, IEEE Computer Society,Washington, DC, USA;
Mozgovoy, M., (2007) Enhancing Computer-aided Plagiarism Detection, , Dissertation, Department of Computer Science, University of Joensuu, Department of Computer Science, University of Joensuu,POBox 111, FIN-80101 Joensuu, Finland;
Lancaster, T., Culwin, F., A comparison of source code plagiarism detection engines (2004) Comput. Sci. Educ., 14, pp. 101-117;
Cosma, G., (2008) An Approach to Source-code Plagiarism Detection and Investigation Using Latent Semantic Analysis, , Ph.D. Thesis, University ofWarwick, Department of Computer Science;
Brixtel, R., Fontaine, M., Lesner, B., Bazin, C., Robbes, R., Language-independent clone detection applied to plagiarism detection (2010) 10th IEEE Int.Working Conf. Source Code Analysis and Manipulation, pp. 77-86. , Timisoara, Romania, September 12-13. IEEE Computer Society, Washington, DC, USA;
Sager, T., Bernstein, A., Pinzger, M., Kiefer, C., Detecting similar java classes using tree algorithms (2006) Proc. 2006 Int.Workshop on Mining Software Repositories, pp. 65-71. , Shanghai, China, May 22-23, ACM, NewYork, NY, USA;
Jiang, L., Misherghi, G., Su, Z., Glondu, S., Deckard: Scalable and accurate tree-based detection of code clones (2007) Proc. 29th Int. Conf. Software Engineering, pp. 96-105. , Minneapolis, USA, May 20-26, IEEE Computer Society, Washington, DC, USA

From Duplicate 2 (A source code similarity system for plagiarism detection - Duri{\'{c}}, Z; Ga{\v{s}}evi{\'{c}}, D)

Cited By :5

Export Date: 23 February 2015

CODEN: CMPJA

Correspondence Address: Duri{\'{c}}, Z.; Faculty of Electrical Engineering, University of Banjaluka, Patre 5, 78 000 Banjaluka, Bosnia and Herzegovina; email: zoran.djuric@etfbl.net

References: Hannabuss, S., Contested texts: Issues of plagiarism (2001) Libr. Manage., 22, pp. 311-318; 
Kustanto, C., Liem, I., Automatic source code plagiarism detection (2009) SNPD Proc. 2009 10th ACIS Int. Conf. Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing, pp. 481-486. , Daegu, Korea, May 27-29, IEEE Computer Society,Washington, DC, USA;
Maurer, H., Kappe, F., Zaka, B., Plagiarism - A survey (2006) J. Univers. Comput. Sci., 12, pp. 1050-1084;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Trans. Educ., 32, pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Univers. Comput. Sci., 8, pp. 1016-1038;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proc. 29th Australasian Computer Science Conf., pp. 277-286. , Hobart, Australia, January 16-19, Australian Computer Society Inc Australia;
Kleiman, A.B., Kowaltowski, T., Qualitative analysis and comparison of plagiarism-detection systems in student programs (2009) Technical Report IC-09-08, , Instituto de Computa{\c{c}}{\~{a}}o, Universidade Estadual de Campinas;
Hage, J., Rademaker, P., Van Vugt, N., Plagiarism detection for java: A tool comparison (2011) Proc. 1st Computer Science Education Research Conf., CSERC '11, pp. 33-46. , Heerlen, The Netherlands, April 7-8, ACM, NewYork, NY, USA;
Mozgovoy, M., Frederiksson, K., White, D.R., Joy, M.S., Sutinen, E., Fast plagiarism detection system (2005) String Processing and Information Retrieval: 12th International Conference (SPIRE 2005). Lecture Notes in Computer Science, 3772 (2005), pp. 267-270. , Springer, London;
Mozgovoy, M., Desktop tools for offline plagiarism detection in computer programs (2006) Inf. Educ., 5, pp. 97-112;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42, pp. 129-133;
Jones, E.L., Metrics based plagiarism monitoring (2001) J. Comput. Small Coll., 16, pp. 253-261;
Liu, C., Chen, C., Han, J., Yu, P., Gplag: Detection of software plagiarism by program dependence graph analysis (2006) Proc. 12th ACM SIGKDD Int. Conf. Knowledge Discovery and Data Mining, pp. 872-881. , Philadelphia, USA, August 20-23, ACM, NewYork, NY, USA;
Roy, C.H., Cordy, R., (2007) A Survey on Software Clone Detection Research., , Technical report No. 2007-541, School of Computing, Queen's University at Kingston, ON, Canada;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2007) Softw. Pract. Exp., 37, pp. 151-175;
Hoad, T., Zobel, J., Methods for identifying versioned and plagiarised documents (2002) J. Am. Soc. Inf. Sci. Technol., 54, pp. 203-215;
Heintze, N., Scalable document fingerprinting (1996) USENIX Workshop on Electronic Commerce, pp. 191-200. , Oakland, CA, USA, November 18-21;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Halstead, M.H., Natural laws controlling algorithm structure? (1972) ACM SIGPLAN Not., 7, pp. 19-26;
Halstead, M.H., (1977) Elements of Software Science (Operating and Programming Systems Series), , Elsevier Science Inc., New York, NY, USA;
Bailey, C.T., Dingee, W.L., A software study using halstead metrics (1981) SIGMETRICS Perform. Eval. Rev., 10 (1), pp. 189-197;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Verco, K., Wise, M., Software for detecting suspected plagiarism: Comparing structure and attribute- counting systems (1996) Proc. Australian Conf. Computer Science Education, pp. 81-88. , Sydney, Australia, July 1996, ACM, New York, NY, USA;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to Plague'ing (1992) ACM SIGSCE Bull., 24, pp. 268-271;
Wise, M.J., YAP3: Improved detection of similarities in computer programs and other texts (1996) ACMSIGCSE Bull., 28, pp. 130-134;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACM SIGMOD Int. Conf. Management of Data, pp. 76-85. , San Diego, CA, USA, June 9-12,. ACM, NewYork, NY, USA;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. 30th SIGCSE Technical Symp. Computer Science Education, pp. 266-270. , New Orleans, LA, USA, March 24-28, ACM, NewYork, NY, USA;
Clough, P., Plagiarism in natural and programming languages: An overview of current tools and technologies (2000) Research Memoranda: CS-00-05, , Department of Computer Science, University of Sheffield, UK;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: Gnu-licensed source code plagiarism detection engine for java exercises (2006) Proc. 6th Baltic Sea Conf. Computing Education Research, pp. 141-142. , Uppsala, Sweden, November 9-12, ACM, NewYork, NY, USA;
JPlag - Detecting Software Plagiarism., , https://www.ipd.uni-karlsruhe.de/jplag/, last visit July 29, 2011;
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , ftp://ftp.cs.su.oz.au/michaelw/doc/RKRGST.ps, Department of CS, University of Sydney;
Karp, R.M., Rabin, M.O., Efficient randomized patternmatching algorithms (1987) Ibm J. Res. Dev. Math. Comput., 31, pp. 249-260;
Chen, X., Li, M., McKinnon, B., Seker, A., (2002) A Theory of Uncheatable Program Plagiarism Detection and Its Practical Implementation, , Technical Report, UCSB;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Trans. Inf. Theory, 50, pp. 1545-1551;
Heckel, P., A technique for isolating differences between files (1978) Commun. ACM, 21, pp. 264-268;
Mozgovoy, M., Karakovskiy, S., Klyuev, V., Fast and reliable plagiarism detection system (2007) Frontiers in Education Conf. - Global EEngineering: Knowledge Without Borders, pp. S4H-S11. , Milwaukee, USA, October 10-13, IEEE Computer Society,Washington, DC, USA;
Mozgovoy, M., (2007) Enhancing Computer-aided Plagiarism Detection, , Dissertation, Department of Computer Science, University of Joensuu, Department of Computer Science, University of Joensuu,POBox 111, FIN-80101 Joensuu, Finland;
Lancaster, T., Culwin, F., A comparison of source code plagiarism detection engines (2004) Comput. Sci. Educ., 14, pp. 101-117;
Cosma, G., (2008) An Approach to Source-code Plagiarism Detection and Investigation Using Latent Semantic Analysis, , Ph.D. Thesis, University ofWarwick, Department of Computer Science;
Brixtel, R., Fontaine, M., Lesner, B., Bazin, C., Robbes, R., Language-independent clone detection applied to plagiarism detection (2010) 10th IEEE Int.Working Conf. Source Code Analysis and Manipulation, pp. 77-86. , Timisoara, Romania, September 12-13. IEEE Computer Society, Washington, DC, USA;
Sager, T., Bernstein, A., Pinzger, M., Kiefer, C., Detecting similar java classes using tree algorithms (2006) Proc. 2006 Int.Workshop on Mining Software Repositories, pp. 65-71. , Shanghai, China, May 22-23, ACM, NewYork, NY, USA;
Jiang, L., Misherghi, G., Su, Z., Glondu, S., Deckard: Scalable and accurate tree-based detection of code clones (2007) Proc. 29th Int. Conf. Software Engineering, pp. 96-105. , Minneapolis, USA, May 20-26, IEEE Computer Society, Washington, DC, USA

From Duplicate 2 (A source code similarity system for plagiarism detection - Duri{\'{c}}, Z; Ga{\v{s}}evi{\'{c}}, D)
And Duplicate 3 (A Source Code Similarity System for Plagiarism Detection - Duric, Z.; Gasevic, D.)

Cited By :5

Export Date: 23 February 2015

CODEN: CMPJA

Correspondence Address: Duri{\'{c}}, Z.; Faculty of Electrical Engineering, University of Banjaluka, Patre 5, 78 000 Banjaluka, Bosnia and Herzegovina; email: zoran.djuric@etfbl.net

References: Hannabuss, S., Contested texts: Issues of plagiarism (2001) Libr. Manage., 22, pp. 311-318; 
Kustanto, C., Liem, I., Automatic source code plagiarism detection (2009) SNPD Proc. 2009 10th ACIS Int. Conf. Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing, pp. 481-486. , Daegu, Korea, May 27-29, IEEE Computer Society,Washington, DC, USA;
Maurer, H., Kappe, F., Zaka, B., Plagiarism - A survey (2006) J. Univers. Comput. Sci., 12, pp. 1050-1084;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Trans. Educ., 32, pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Univers. Comput. Sci., 8, pp. 1016-1038;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proc. 29th Australasian Computer Science Conf., pp. 277-286. , Hobart, Australia, January 16-19, Australian Computer Society Inc Australia;
Kleiman, A.B., Kowaltowski, T., Qualitative analysis and comparison of plagiarism-detection systems in student programs (2009) Technical Report IC-09-08, , Instituto de Computa{\c{c}}{\~{a}}o, Universidade Estadual de Campinas;
Hage, J., Rademaker, P., Van Vugt, N., Plagiarism detection for java: A tool comparison (2011) Proc. 1st Computer Science Education Research Conf., CSERC '11, pp. 33-46. , Heerlen, The Netherlands, April 7-8, ACM, NewYork, NY, USA;
Mozgovoy, M., Frederiksson, K., White, D.R., Joy, M.S., Sutinen, E., Fast plagiarism detection system (2005) String Processing and Information Retrieval: 12th International Conference (SPIRE 2005). Lecture Notes in Computer Science, 3772 (2005), pp. 267-270. , Springer, London;
Mozgovoy, M., Desktop tools for offline plagiarism detection in computer programs (2006) Inf. Educ., 5, pp. 97-112;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42, pp. 129-133;
Jones, E.L., Metrics based plagiarism monitoring (2001) J. Comput. Small Coll., 16, pp. 253-261;
Liu, C., Chen, C., Han, J., Yu, P., Gplag: Detection of software plagiarism by program dependence graph analysis (2006) Proc. 12th ACM SIGKDD Int. Conf. Knowledge Discovery and Data Mining, pp. 872-881. , Philadelphia, USA, August 20-23, ACM, NewYork, NY, USA;
Roy, C.H., Cordy, R., (2007) A Survey on Software Clone Detection Research., , Technical report No. 2007-541, School of Computing, Queen's University at Kingston, ON, Canada;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2007) Softw. Pract. Exp., 37, pp. 151-175;
Hoad, T., Zobel, J., Methods for identifying versioned and plagiarised documents (2002) J. Am. Soc. Inf. Sci. Technol., 54, pp. 203-215;
Heintze, N., Scalable document fingerprinting (1996) USENIX Workshop on Electronic Commerce, pp. 191-200. , Oakland, CA, USA, November 18-21;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Halstead, M.H., Natural laws controlling algorithm structure? (1972) ACM SIGPLAN Not., 7, pp. 19-26;
Halstead, M.H., (1977) Elements of Software Science (Operating and Programming Systems Series), , Elsevier Science Inc., New York, NY, USA;
Bailey, C.T., Dingee, W.L., A software study using halstead metrics (1981) SIGMETRICS Perform. Eval. Rev., 10 (1), pp. 189-197;
Donaldson, J., Lancaster, A., Sposat, P., A plagiarism detection system (1981) Proc. 12th SIGCSETechnical Symp. Computer Science Education, pp. 21-25. , St. Louis, MO, USA, ACM, New York, NY, USA;
Verco, K., Wise, M., Software for detecting suspected plagiarism: Comparing structure and attribute- counting systems (1996) Proc. Australian Conf. Computer Science Education, pp. 81-88. , Sydney, Australia, July 1996, ACM, New York, NY, USA;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to Plague'ing (1992) ACM SIGSCE Bull., 24, pp. 268-271;
Wise, M.J., YAP3: Improved detection of similarities in computer programs and other texts (1996) ACMSIGCSE Bull., 28, pp. 130-134;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACM SIGMOD Int. Conf. Management of Data, pp. 76-85. , San Diego, CA, USA, June 9-12,. ACM, NewYork, NY, USA;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. 30th},
author = {ƒêuri{\'{c}}, Zoran and Ga{\v{s}}evi{\'{c}}, Dragan},
doi = {10.1093/comjnl/bxs018},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2013 - ƒêuri{\'{c}}, Ga{\v{s}}evi{\'{c}} - A Source Code Similarity System for Plagiarism Detection.pdf:pdf},
issn = {0010-4620},
journal = {The Computer Journal},
keywords = {Algorithms,Average values,Computer programming languages,Computer software,Control structure,Data structures,Intellectual property,Plagiarism,Plagiarism detection,Similarity detection,Software,Source code,Source code modification,Source code plagiarisms,Source code similarities,Source codes,Statistically significant difference,Structural modifications,Test sets,Tool support,algorithms,plagiarism,similarity detection,soft},
language = {English},
month = {jan},
number = {1},
pages = {70--86},
publisher = {Oxford University Press},
title = {{A Source Code Similarity System for Plagiarism Detection}},
type = {Article},
url = {http://dx.doi.org/10.1093/comjnl/bxs018 http://www.scopus.com/inward/record.url?eid=2-s2.0-84871914683{\&}partnerID=40{\&}md5=708e9f196ba1b77a205311c56a173c50 http://comjnl.oxfordjournals.org/cgi/doi/10.1093/comjnl/bxs018 http://comjnl.oxfordjournals.org/conten},
volume = {56},
year = {2013}
}
@article{5451097,
abstract = {This paper considers the problem of source code plagiarism by students within the computing disciplines and reports the results of a survey of students in Computing departments in 18 institutions in the U.K. This survey was designed to investigate how well students understand the concept of source code plagiarism and to discover what, if any, specific aspects might cause particular confusion. An analysis of the results was carried out to assess understanding by topic and to discover whether various demographic factors may have an influence on that understanding. Within the survey sample, it appeared that the demographic factors tested did not generally affect students' understanding of source code plagiarism. However, analysis of the data for specific topics revealed that there are several areas of activity where the boundary between acceptable and unacceptable behavior is not clearly understood. These findings have implications for plagiarism education programs.},
address = {Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom},
annote = {From Duplicate 1 (Source Code Plagiarism - A Student Perspective - Joy, Mike; Cosma, Georgina; Yau, Jane Yin-Kim; Sinclair, Jane)

From Duplicate 1 (Source Code Plagiarism - A Student Perspective - Joy, Mike; Cosma, Georgina; Yau, Jane Yin-Kim; Sinclair, Jane)

From Duplicate 1 (Source code plagiarism-a student perspective - Joy, Mike; Cosma, Georgina; Yau, J.Y.-K. Jane Yin Kim; Sinclair, Jane)

From Duplicate 1 (Source code plagiarism-a student perspective - Joy, Mike; Cosma, Georgina; Yau, J.Y.-K. Jane Yin Kim; Sinclair, Jane)

From Duplicate 1 (Source code plagiarism-a student perspective - Joy, Mike; Cosma, Georgina; Yau, Jane Yin Kim; Sinclair, Jane)

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, M; Cosma, G; Yau, J.Y.-K.; Sinclair, J)

Cited By :5

Export Date: 23 February 2015

CODEN: IEEDA

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom; email: M.S.Joy@warwick.ac.uk

References: (2008) JISC, , http://jiscpas.ac.uk/, JISC Plagiarism Advisory Service; 
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Universal Comput. Sci., 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACMSIGMOD Int. Conf. Manag. Data, pp. 76-85. , San Diego, CA;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42 (1), pp. 129-133. , Feb;
Cosma, G., Joy, M., Towards a definition of source code plagiarism (2008) IEEE Trans. Educ., 51 (2), pp. 195-200. , May;
Nadelson, S., Academic misconduct by university students: Faculty perceptions and responses (2007) Plagiary, 2 (2), pp. 1-10;
Larkham, P., Manns, S., Plagiarism and its treatment in higher education (2002) J. Further Higher Educ., 26 (4), pp. 339-349;
Culwin, F., I think my students are less naughty, but maybe the tools are more effective? (2009) Proc. 2nd Int. Plagiarism Conf., pp. 10-13. , http://www.plagiarismadvice.org/media/2006papers/FintanCulwin.pdf, Gateshead, U.K., Mar;
Jenkins, T., Helmore, S., Coursework for cash: The threat from online plagiarism (2006) Proc. 7th Annu. Conf. HEA Netw. Inf. Comput. Sciences, pp. 121-126. , Dublin, U.K;
Kasprzak, J., Nixon, M., Cheating in cyberspace: Maintaining quality in online education (2004) J. Assoc. Adv. Comput. Educ., 12 (1), pp. 85-99;
Scanlon, P., Neumann, D., Internet plagiarism among college students (2002) J. College Student Dev., 43 (3), pp. 374-385;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Harding, T., Joyce, D., Laxer, C., Addressing student cheating: Definitions and solution (2003) SIGCSE Bull., 35 (2), pp. 172-184;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on it students' propensity to cheat (2003) Proc. 5th Australasian Comput. Educ. Conf., pp. 119-126. , Adelaide, Australia;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in U.K. H.E. Computing Schools, Issues, Attitudes and Tools, , South Bank University, London, U.K., Tech. Rep. SBU-CISM-01-02;
Dey, S., Sobhan, A., Impact of unethical practices of plagiarism on learning, teaching and research in higher education: Some combating strategies 7th Int. Conf. Inf. Technol. Based Higher Educ. Train., pp. 388-393;
Carroll, J., Appleton, J., (2001) Plagiarism: A Good Practice Guide, , http://www.jisc.ac.uk/;
Beasley, J., The impact of technology on plagiarism prevention and detection: Research process automation, a new approach for prevention (2004) Proc. Plagiarism: Prevention, Practice Policy Conf., pp. 23-29. , Newcastle upon Tyne, U.K;
McCabe, D., Trevino, L., Butterfield, K., Cheating in academic institutions: A decade of research (2001) Ethics Behav., 11 (3), pp. 219-232;
Bjorklund, M., Wenestam, C., Academic cheating: Frequency, methods, and causes (1999) Proc. Eur. Educ. Res., , Lahti, Finland;
Bennett, R., Factors associated with student plagiarism in a post-1992 University (2005) J. Assess. Eval. Higher Educ., 3 (2), pp. 137-162;
Marshall, S., Garry, M., How well do students really understand plagiarism? (2005) Proc. ASCILITE Conf., pp. 457-467. , Brisbane, Australia;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-Licensed source code plagiarism detection engine for Java exercises (2007) Proc. 6th Baltic Sea Conf. Comput. Educ. Res., pp. 141-142. , Koli, Finland;
Bretag, T., Carapiet, S., A preliminary study to identify the extent of self-plagiarism in Australian academic research (2007) Plagiary, 2 (5), pp. 1-12;
Deckert, G.D., Perspectives on plagiarism from ESL students in hong kong (1993) J. Second Lang. Writing, 2 (2), pp. 131-148;
Juwah, C., Lal, D., Beloucif, A., (2008) Plagiarism: Overcoming the Cultural Issues Associated with Plagiarism for International Students, , http://www.rgu.ac.uk/files/ACF52AC.doc;
Hayes, N., Introna, L.D., Cultural values, plagiarism, and fairness: When plagiarism gets in the way of learning (2005) Ethics Behav., 15 (3), pp. 213-231;
Barrett, R., Malcolm, J., Embedding plagiarism education in the assessment process (2006) Int. J. Educ. Integrity, 2 (1), pp. 38-45;
Park, C., In other (people's) words: Plagiarism by university students-Literature and lessons (2003) Assess. Eval. Higher Educ., 28 (5), pp. 471-488

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, M; Cosma, G; Yau, J.Y.-K.; Sinclair, J)

Cited By :5

Export Date: 23 February 2015

CODEN: IEEDA

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom; email: M.S.Joy@warwick.ac.uk

References: (2008) JISC, , http://jiscpas.ac.uk/, JISC Plagiarism Advisory Service; 
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Universal Comput. Sci., 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACMSIGMOD Int. Conf. Manag. Data, pp. 76-85. , San Diego, CA;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42 (1), pp. 129-133. , Feb;
Cosma, G., Joy, M., Towards a definition of source code plagiarism (2008) IEEE Trans. Educ., 51 (2), pp. 195-200. , May;
Nadelson, S., Academic misconduct by university students: Faculty perceptions and responses (2007) Plagiary, 2 (2), pp. 1-10;
Larkham, P., Manns, S., Plagiarism and its treatment in higher education (2002) J. Further Higher Educ., 26 (4), pp. 339-349;
Culwin, F., I think my students are less naughty, but maybe the tools are more effective? (2009) Proc. 2nd Int. Plagiarism Conf., pp. 10-13. , http://www.plagiarismadvice.org/media/2006papers/FintanCulwin.pdf, Gateshead, U.K., Mar;
Jenkins, T., Helmore, S., Coursework for cash: The threat from online plagiarism (2006) Proc. 7th Annu. Conf. HEA Netw. Inf. Comput. Sciences, pp. 121-126. , Dublin, U.K;
Kasprzak, J., Nixon, M., Cheating in cyberspace: Maintaining quality in online education (2004) J. Assoc. Adv. Comput. Educ., 12 (1), pp. 85-99;
Scanlon, P., Neumann, D., Internet plagiarism among college students (2002) J. College Student Dev., 43 (3), pp. 374-385;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Harding, T., Joyce, D., Laxer, C., Addressing student cheating: Definitions and solution (2003) SIGCSE Bull., 35 (2), pp. 172-184;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on it students' propensity to cheat (2003) Proc. 5th Australasian Comput. Educ. Conf., pp. 119-126. , Adelaide, Australia;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in U.K. H.E. Computing Schools, Issues, Attitudes and Tools, , South Bank University, London, U.K., Tech. Rep. SBU-CISM-01-02;
Dey, S., Sobhan, A., Impact of unethical practices of plagiarism on learning, teaching and research in higher education: Some combating strategies 7th Int. Conf. Inf. Technol. Based Higher Educ. Train., pp. 388-393;
Carroll, J., Appleton, J., (2001) Plagiarism: A Good Practice Guide, , http://www.jisc.ac.uk/;
Beasley, J., The impact of technology on plagiarism prevention and detection: Research process automation, a new approach for prevention (2004) Proc. Plagiarism: Prevention, Practice Policy Conf., pp. 23-29. , Newcastle upon Tyne, U.K;
McCabe, D., Trevino, L., Butterfield, K., Cheating in academic institutions: A decade of research (2001) Ethics Behav., 11 (3), pp. 219-232;
Bjorklund, M., Wenestam, C., Academic cheating: Frequency, methods, and causes (1999) Proc. Eur. Educ. Res., , Lahti, Finland;
Bennett, R., Factors associated with student plagiarism in a post-1992 University (2005) J. Assess. Eval. Higher Educ., 3 (2), pp. 137-162;
Marshall, S., Garry, M., How well do students really understand plagiarism? (2005) Proc. ASCILITE Conf., pp. 457-467. , Brisbane, Australia;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-Licensed source code plagiarism detection engine for Java exercises (2007) Proc. 6th Baltic Sea Conf. Comput. Educ. Res., pp. 141-142. , Koli, Finland;
Bretag, T., Carapiet, S., A preliminary study to identify the extent of self-plagiarism in Australian academic research (2007) Plagiary, 2 (5), pp. 1-12;
Deckert, G.D., Perspectives on plagiarism from ESL students in hong kong (1993) J. Second Lang. Writing, 2 (2), pp. 131-148;
Juwah, C., Lal, D., Beloucif, A., (2008) Plagiarism: Overcoming the Cultural Issues Associated with Plagiarism for International Students, , http://www.rgu.ac.uk/files/ACF52AC.doc;
Hayes, N., Introna, L.D., Cultural values, plagiarism, and fairness: When plagiarism gets in the way of learning (2005) Ethics Behav., 15 (3), pp. 213-231;
Barrett, R., Malcolm, J., Embedding plagiarism education in the assessment process (2006) Int. J. Educ. Integrity, 2 (1), pp. 38-45;
Park, C., In other (people's) words: Plagiarism by university students-Literature and lessons (2003) Assess. Eval. Higher Educ., 28 (5), pp. 471-488

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, Mike; Cosma, Georgina; Yau, Jane Yin Kim; Sinclair, Jane)

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, M; Cosma, G; Yau, J.Y.-K.; Sinclair, J)

Cited By :5

Export Date: 23 February 2015

CODEN: IEEDA

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom; email: M.S.Joy@warwick.ac.uk

References: (2008) JISC, , http://jiscpas.ac.uk/, JISC Plagiarism Advisory Service; 
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Universal Comput. Sci., 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACMSIGMOD Int. Conf. Manag. Data, pp. 76-85. , San Diego, CA;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42 (1), pp. 129-133. , Feb;
Cosma, G., Joy, M., Towards a definition of source code plagiarism (2008) IEEE Trans. Educ., 51 (2), pp. 195-200. , May;
Nadelson, S., Academic misconduct by university students: Faculty perceptions and responses (2007) Plagiary, 2 (2), pp. 1-10;
Larkham, P., Manns, S., Plagiarism and its treatment in higher education (2002) J. Further Higher Educ., 26 (4), pp. 339-349;
Culwin, F., I think my students are less naughty, but maybe the tools are more effective? (2009) Proc. 2nd Int. Plagiarism Conf., pp. 10-13. , http://www.plagiarismadvice.org/media/2006papers/FintanCulwin.pdf, Gateshead, U.K., Mar;
Jenkins, T., Helmore, S., Coursework for cash: The threat from online plagiarism (2006) Proc. 7th Annu. Conf. HEA Netw. Inf. Comput. Sciences, pp. 121-126. , Dublin, U.K;
Kasprzak, J., Nixon, M., Cheating in cyberspace: Maintaining quality in online education (2004) J. Assoc. Adv. Comput. Educ., 12 (1), pp. 85-99;
Scanlon, P., Neumann, D., Internet plagiarism among college students (2002) J. College Student Dev., 43 (3), pp. 374-385;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Harding, T., Joyce, D., Laxer, C., Addressing student cheating: Definitions and solution (2003) SIGCSE Bull., 35 (2), pp. 172-184;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on it students' propensity to cheat (2003) Proc. 5th Australasian Comput. Educ. Conf., pp. 119-126. , Adelaide, Australia;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in U.K. H.E. Computing Schools, Issues, Attitudes and Tools, , South Bank University, London, U.K., Tech. Rep. SBU-CISM-01-02;
Dey, S., Sobhan, A., Impact of unethical practices of plagiarism on learning, teaching and research in higher education: Some combating strategies 7th Int. Conf. Inf. Technol. Based Higher Educ. Train., pp. 388-393;
Carroll, J., Appleton, J., (2001) Plagiarism: A Good Practice Guide, , http://www.jisc.ac.uk/;
Beasley, J., The impact of technology on plagiarism prevention and detection: Research process automation, a new approach for prevention (2004) Proc. Plagiarism: Prevention, Practice Policy Conf., pp. 23-29. , Newcastle upon Tyne, U.K;
McCabe, D., Trevino, L., Butterfield, K., Cheating in academic institutions: A decade of research (2001) Ethics Behav., 11 (3), pp. 219-232;
Bjorklund, M., Wenestam, C., Academic cheating: Frequency, methods, and causes (1999) Proc. Eur. Educ. Res., , Lahti, Finland;
Bennett, R., Factors associated with student plagiarism in a post-1992 University (2005) J. Assess. Eval. Higher Educ., 3 (2), pp. 137-162;
Marshall, S., Garry, M., How well do students really understand plagiarism? (2005) Proc. ASCILITE Conf., pp. 457-467. , Brisbane, Australia;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-Licensed source code plagiarism detection engine for Java exercises (2007) Proc. 6th Baltic Sea Conf. Comput. Educ. Res., pp. 141-142. , Koli, Finland;
Bretag, T., Carapiet, S., A preliminary study to identify the extent of self-plagiarism in Australian academic research (2007) Plagiary, 2 (5), pp. 1-12;
Deckert, G.D., Perspectives on plagiarism from ESL students in hong kong (1993) J. Second Lang. Writing, 2 (2), pp. 131-148;
Juwah, C., Lal, D., Beloucif, A., (2008) Plagiarism: Overcoming the Cultural Issues Associated with Plagiarism for International Students, , http://www.rgu.ac.uk/files/ACF52AC.doc;
Hayes, N., Introna, L.D., Cultural values, plagiarism, and fairness: When plagiarism gets in the way of learning (2005) Ethics Behav., 15 (3), pp. 213-231;
Barrett, R., Malcolm, J., Embedding plagiarism education in the assessment process (2006) Int. J. Educ. Integrity, 2 (1), pp. 38-45;
Park, C., In other (people's) words: Plagiarism by university students-Literature and lessons (2003) Assess. Eval. Higher Educ., 28 (5), pp. 471-488

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, Mike; Cosma, Georgina; Yau, Jane Yin Kim; Sinclair, Jane)

From Duplicate 2 (Source code plagiarism-a student perspective - Joy, M; Cosma, G; Yau, J.Y.-K.; Sinclair, J)

Cited By :5

Export Date: 23 February 2015

CODEN: IEEDA

Correspondence Address: Joy, M.; Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom; email: M.S.Joy@warwick.ac.uk

References: (2008) JISC, , http://jiscpas.ac.uk/, JISC Plagiarism Advisory Service; 
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Universal Comput. Sci., 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. ACMSIGMOD Int. Conf. Manag. Data, pp. 76-85. , San Diego, CA;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Educ., 42 (1), pp. 129-133. , Feb;
Cosma, G., Joy, M., Towards a definition of source code plagiarism (2008) IEEE Trans. Educ., 51 (2), pp. 195-200. , May;
Nadelson, S., Academic misconduct by university students: Faculty perceptions and responses (2007) Plagiary, 2 (2), pp. 1-10;
Larkham, P., Manns, S., Plagiarism and its treatment in higher education (2002) J. Further Higher Educ., 26 (4), pp. 339-349;
Culwin, F., I think my students are less naughty, but maybe the tools are more effective? (2009) Proc. 2nd Int. Plagiarism Conf., pp. 10-13. , http://www.plagiarismadvice.org/media/2006papers/FintanCulwin.pdf, Gateshead, U.K., Mar;
Jenkins, T., Helmore, S., Coursework for cash: The threat from online plagiarism (2006) Proc. 7th Annu. Conf. HEA Netw. Inf. Comput. Sciences, pp. 121-126. , Dublin, U.K;
Kasprzak, J., Nixon, M., Cheating in cyberspace: Maintaining quality in online education (2004) J. Assoc. Adv. Comput. Educ., 12 (1), pp. 85-99;
Scanlon, P., Neumann, D., Internet plagiarism among college students (2002) J. College Student Dev., 43 (3), pp. 374-385;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Harding, T., Joyce, D., Laxer, C., Addressing student cheating: Definitions and solution (2003) SIGCSE Bull., 35 (2), pp. 172-184;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on it students' propensity to cheat (2003) Proc. 5th Australasian Comput. Educ. Conf., pp. 119-126. , Adelaide, Australia;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in U.K. H.E. Computing Schools, Issues, Attitudes and Tools, , South Bank University, London, U.K., Tech. Rep. SBU-CISM-01-02;
Dey, S., Sobhan, A., Impact of unethical practices of plagiarism on learning, teaching and research in higher education: Some combating strategies 7th Int. Conf. Inf. Technol. Based Higher Educ. Train., pp. 388-393;
Carroll, J., Appleton, J., (2001) Plagiarism: A Good Practice Guide, , http://www.jisc.ac.uk/;
Beasley, J., The impact of technology on plagiarism prevention and detection: Research process automation, a new approach for prevention (2004) Proc. Plagiarism: Prevention, Practice Policy Conf., pp. 23-29. , Newcastle upon Tyne, U.K;
McCabe, D., Trevino, L., Butterfield, K., Cheating in academic institutions: A decade of research (2001) Ethics Behav., 11 (3), pp. 219-232;
Bjorklund, M., Wenestam, C., Academic cheating: Frequency, methods, and causes (1999) Proc. Eur. Educ. Res., , Lahti, Finland;
Bennett, R., Factors associated with student plagiarism in a post-1992 University (2005) J. Assess. Eval. Higher Educ., 3 (2), pp. 137-162;
Marshall, S., Garry, M., How well do students really understand plagiarism? (2005) Proc. ASCILITE Conf., pp. 457-467. , Brisbane, Australia;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-Licensed source code plagiarism detection engine for Java exercises (2007) Proc. 6th Baltic Sea Conf. Comput. Educ. Res., pp. 141-142. , Koli, Finland;
Bretag, T., Carapiet, S., A preliminary study to identify the extent of self-plagiarism in Australian academic research (2007) Plagiary, 2 (5), pp. 1-12;
Deckert, G.D., Perspectives on plagiarism from ESL students in hong kong (1993) J. Second Lang. Writing, 2 (2), pp. 131-148;
Juwah, C., Lal, D., Beloucif, A., (2008) Plagiarism: Overcoming the Cultural Issues Associated with Plagiarism for International Students, , http://www.rgu.ac.uk/files/ACF52AC.doc;
Hayes, N., Introna, L.D., Cultural values, plagiarism, and fairness: When plagiarism gets in the way of learning (2005) Ethics Behav., 15 (3), pp. 213-231;
Barrett, R., Malcolm, J., Embedding plagiarism education in the assessment process (2006) Int. J. Educ. Integrity, 2 (1), pp. 38-45;
Park, C., In other (people's) words: Plagiarism by university students-Literature and lessons (2003) Assess. Eval. Higher Educ., 28 (5), pp. 471-488},
author = {Joy, Mike and Cosma, Georgina and Yau, Jane Yin-Kim and Sinclair, Jane},
doi = {10.1109/TE.2010.2046664},
file = {:C$\backslash$:/Users/matnovak/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/2011 - Joy et al. - Source Code Plagiarism - A Student Perspective.pdf:pdf},
isbn = {0018-9359},
issn = {0018-9359},
journal = {IEEE Transactions on Education},
keywords = {Computing disciplines,Population statistics,Source codes,Students,Surveys,Teaching,computer science education,data analysis,demograph,plagiarism,source code,student survey,university education},
language = {English},
month = {feb},
number = {1},
pages = {125--132},
title = {{Source Code Plagiarism - A Student Perspective}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79551626088{\&}partnerID=40{\&}md5=33a932d6c0e96f1e8588fdbe099ce3ae http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5451097 http://ieeexplore.ieee.org/document/5451097/},
volume = {54},
year = {2011}
}
@inproceedings{6615411,
abstract = {To detect plagiarism on programming course, the plagiarism detection method based on Abstract Syntax Tree (AST) is proposed. First, we parse source codes into the corresponding AST by syntax analyzer and a biology sequence matching algorithm is used to calculate the similarities of programs. Second, the AST features of similar parts of the programs are extracted and then space vectors of the features are obtained. Finally, we find 'copy cluster' by clustering the vectors. Experimental results show that this method has a good effect on the detection of plagiarism and can also find the 'copy cluster' accurately. {\textcopyright} 2013 IEEE.},
address = {Hohhot, China},
annote = {From Duplicate 1 (AST-based multi-language plagiarism detection method - Li ping Zhang; Dong sheng Liu)

From Duplicate 2 (AST-based Multi-language Plagiarism Detection Method - Zhang, Li Ping; Liu, Dong Sheng)

4th IEEE International Conference on Software Engineering and Service
Science (ICSESS), Beijing, PEOPLES R CHINA, MAY 23-25, 2013

From Duplicate 2 (AST-based multi-language plagiarism detection method - Zhang, L P; Liu, D S)

Conference code: 101371

Export Date: 23 February 2015

Correspondence Address: Inner Mongolia Normal University, College of Computer and Information Engineering, Inner-Mongolia, Hohhot, China

References: Demin, W., Jun, C., Research on the algorithm of pairwise comparison [J] (2008) Computer Engineering and Applications, 44 (36), pp. 48-50; 
Aiken, A., Moss: A System for Detecting Software Plagiarism [OL], , http://theory.stanford.edu/-aiken/moss/2009-12-21;
Emeric, K., Moritz, K., (2005) JPlag: A System That Finds Similarities among Multiple Sets of Source Code Files [EB/OL], , http://www.ipd.Unikarlsruhe.de/jplag/[2009-02-01];
Changhai, Z., Haihua, Y., Maozhong, J., The program similarity detection method based on compiler optimization and inverse assembler [J] (2008) Journal of Beijing Aerospace University, 34 (6), pp. 711-715;
Hu, L., Chao, L., Nan, L., Xiaoli, L., Byte code plagiarism detection method and support system for Java source code (2010) Journal of Beijing Aerospace University, 36 (4), pp. 424-428;
Liping, Z., Dongsheng, L., Yanchen, L., Mei, Z., A code plagiarism detection method based on AST (2011) Computer Application Research, 12, pp. 4616-4620;
Liping, Z., Dongsheng, L., Yanchen, L., Study on the code copy detection method and the evaluation mechanism based on the syntax tree (2010) Journal of Inner Mongolia University, 41 (5), pp. 594-600;
Mei, Z., Liping, Z., Dongsheng, L., The C code plagiarism detection algorithm based on XML [J] (2011) Computer Engineering and Applications, 47 (8), pp. 215-218;
Liping, Z., Dongsheng, L., Mei, Z., Yanchen, L., Research on copy detecting strategy and evaluation mechanism for program based on syntax tree [I] (2011) 2011 3rd International Conference on Computer Design and Applications (ICCDA 2011), pp. 141-144. , Xi An, May;
Liping, Z., Dongsheng, L., Yanchen, L., Mei, Z., AST-based plagiarism detection method The 2011 International Workshop on Internet of Things' Technology and Innovative Application Design (LOT Workshop 2011), pp. 575-578. , Bei Jing;
Chenglong, L., Liping, Z., Dongsheng, L., Shengying, J., Research of the code plagiarism detection method based on AST [J] (2012) Computer Engineering and Design, 33 (4), pp. 1660-1664;
Yun, X., (2007) The Pattern Mining of Biological Sequence and Clustering [D], , Fudan University;
Qingyun, Y., (2008) The Clustering Method for Chinese Text Based on Vector Space Model, , Shanghai Jiao Tong University;
Jingbin, L., Liu, Y., Bei, H., The parallel K-Medoids algorithm based on multi-core platform [I] (2011) Computers Application Research, 28 (2), pp. 4517-4519},
author = {Zhang, Li p. and Liu, Dong s.},
booktitle = {IEEE 4th International Conference on Software Engineering and Service Science},
doi = {10.1109/ICSESS.2013.6615411},
editor = {{Babu, MSP and Wenzheng}, L},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Zhang, Liu - AST-based multi-language plagiarism detection method.pdf:pdf},
isbn = {978-1-4673-5000-6},
issn = {2327-0586},
keywords = {AST,Abstract Syntax Trees,C language,Clu,Cluster,Intellectual property,Java,Plagiarism detection,Programming course,Sequence alignment,Sequence alignments,Sequence matching algorithms,Software engineering,Source codes,Vector spaces,computational linguistics,computer},
language = {English},
month = {may},
organization = {IEEE},
pages = {738--742},
publisher = {IEEE},
title = {{AST-based multi-language plagiarism detection method}},
type = {Proceedings Paper},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6615411 http://www.scopus.com/inward/record.url?eid=2-s2.0-84890030226{\&}partnerID=40{\&}md5=3bb77cac0f892311155f9d0d50291e7a http://ieeexplore.ieee.org/document/6615411/},
year = {2013}
}
@article{Jadalla2008,
abstract = {The educational community across the world is facing the increasing problem of plagiarism. The proposed Plagiarism Detection Engine for Java (PDE4Java) detects code-plagiarism by applying data mining techniques. The engine consists of three main phases; Java tokenisation, similarity measurement and clustering. It has an optional default tokeniser that makes it flexible to be used with almost any programming language. The system provides a visualising representation for each cluster besides the textual representation. The simulation results of PDE4Java showed a comparable performance to that of JPlag and it outperformed the expectations when compared to the domain experts' findings. Copyright {\textcopyright} 2008, Inderscience Publishers.},
address = {Department of Computer Science, College of Arts and Science, University of Sharjah, 27272 Sharjah, United Arab Emirates},
annote = {From Duplicate 1 (PDE4Java: Plagiarism detection engine for Java source code: A clustering approach - Jadalla, A; Elnagar, A)

cited By 9

From Duplicate 2 (PDE4Java: Plagiarism Detection Engine for Java source code: a clustering approach - Jadalla, Ameera; Elnagar, Ashraf)

Cited By :8

Export Date: 23 February 2015

Correspondence Address: Elnagar, A.; Department of Computer Science, College of Arts and Science, University of Sharjah, 27272 Sharjah, United Arab Emirates; email: ashraf@sharjah.ac.ae

References: Aiken, A., (2005) Moss: A System for Detecting Software Plagiarism, , http://www.cs.stanford.edu/aiken/moss.html, URL; 
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proceedings of the 29th Australasian Computer Science Conference, 48, pp. 277-286;
Beasley, J.D., The impact of technology on plagiarism prevention and detection: Research process automation, a new approach for prevention (2004) Proc. Plagiarism: Prevention, Practice and Policies 2004: Joint Information Systems Committee Plagiarism Advisory Service Conference;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2004) Proceedings of the Second Australian Undergraduate Students' Computing Conference (AUSCC04), pp. 8-15;
Clarke, R., Lancaster, T., (2006) Eliminating the Successor to Plagiarism? Identifying the Usage of Contract Cheating Sites;
Clough, P. (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, Research Memoranda: CS-00-05, Department of Computer Science, University of SheffieldCulwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in UK HE Computing Schools, Issues, Attitudes and Tools, , Technical Report, South Bank University (SBU) SCISM Technical Report;
Donaldson, J.L., Lancaster, A.M., Sposato, P.H., A plagiarism detection system (1981) Proceedings of the Twelfth SIGCSE Technical Symposium on Computer Science Education, pp. 21-25;
Engels, S., Lakshmanan, V., Craig, M., Plagiarism detection using feature-based neural networks (2007) SIGCSE Bull, 39 (1), pp. 34-38. , ISSN 0097-8418;
Hart, M., Friesner, T., Plagiarism and poor academic practice-a threat to the extension of e-Learning in higher education? (2004) Electronic Journal on e-Learning, 2 (1), pp. 89-96;
Jones, E.L., Metrics based plagarism monitoring (2001) Proceedings of the Sixth Annual CCSC Northeastern Conference on The Journal of Computing in Small Colleges, pp. 253-261;
Kim, Y.-C., Cho, Y.-Y., Moon, J.-B., A plagiarism detection system using a syntax-tree (2004) International Conference on Computational Intelligence, 1, pp. 23-26;
Krinke, J., Identifying similar code with program dependence graphs (2001) WCRE 01: Proceedings of the Eighth Working Conference on Reverse Engineering (WCRE'01), pp. 301-309. , IEEE Computer Society, Washington DC, USA, pp, ISBN 0-7695-1303-4;
Lancaster, T., Culwin, F., (2003) Classifications of Plagiarism Detection Engines, Unpublished, Available from South Bank University, , London, UK;
Lancaster, T., Culwin, F., Preserving academic integrity-fighting against nonoriginality agencies (2007) British Journal of Educational Technology;
Lancaster, T., Tetlow, M., Does automated anti-plagiarism have to be complex? Evaluating more appropriate software metrics for finding collusion (2005) Proceedings of the 2005 Ascilite Conference;
Lathrop and Foss, K.E. (2000) Student Cheating and Plagiarism in the Internet Era: A Wake-up Call, Libraries UnlimitedLee, L., Measures of distributional similarity (1999) 37th Annual Meeting of the Association for Computational Linguistics, pp. 25-32;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of software plagiarism by program dependence graph analysis (2006) The 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pp. 872-881;
Lukashenko, R., Graudina, V., Grundspenkis, J., Computer-based plagiarism detection methods and tools: An overview (2007) Proceedings of the 2007 International Conference on Computer Systems and Technologies;
Moussiades, L., Vakali, A., PDetect: A clustering approach for detecting plagiarism in source code datasets (2005) The Computer Journal, 48 (6), pp. 651-661;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarism among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Ribler, R.L., Abrams, M., Using visualization to detect plagiarism in computer science classes (2000) INFOVIS '00: Proceedings of the IEEE Symposium on Information Vizualization, p. 173. , IEEE Computer Society, Washington DC, USA, p, ISBN 0-7695-0804-9;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD international Conference on Management of Data, pp. 78-85;
Tan, P.-N., Steinbach, M., Kumar, V., (2006) Introduction to Data Mining, , Addison Wesley, Pearson Education, Boston;
Vamplew, P., Dermoudy, J., An anti-plagiarism editor for software development courses (2005) Proceedings of the 7th Australian Conference on Computing Education, 42, pp. 83-90;
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Comparing structure and attribute-counting systems (1996) Proceedings of the First Australian Conference on Computer Science Education, pp. 81-88;
Williams, J.B. (2005) Plagiarism: Deterrence, Detection and Prevention, Universitas 21 GlobalWise, M.J., (1993) String Similarity via Greedy String Tiling and Running Karp-Rabin Matching;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) ACM SIGCSE, 28, pp. 130-134;
Zeidman, B., (2007) What, Exactly, Is Software Plagiarism},
author = {Jadalla, Ameera and Elnagar, Ashraf},
doi = {10.1504/IJBIDM.2008.020514},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2008 - Jadalla, Elnagar - PDE4Java Plagiarism Detection Engine for Java source code a clustering approach.pdf:pdf;:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2008 - Jadalla, Elnagar - PDE4Java Plagiarism Detection Engine for Java source code a clustering approach.pdf:pdf},
issn = {1743-8187},
journal = {International Journal of Business Intelligence and Data Mining},
keywords = {Clustering,Java,Plagiarism detection},
language = {English},
number = {2},
pages = {121},
title = {{PDE4Java: Plagiarism Detection Engine for Java source code: a clustering approach}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-64249110504{\&}partnerID=40{\&}md5=979f09af583160cc5eb3a6b0f783f9d5 http://www.scopus.com/inward/record.url?eid=2-s2.0-64249110504{\&}partnerID=40{\&}md5=979f09af583160cc5eb3a6b0f783f9d5 http://www.inderscience.com/},
volume = {3},
year = {2008}
}
@article{Cosma2012,
abstract = {Plagiarism is a growing problem in academia. Academics often use plagiarism detection tools to detect similar source-code files. Once similar files are detected, the academic proceeds with the investigation process which involves identifying the similar source-code fragments within them that could be used as evidence for proving plagiarism. This paper describes PlaGate, a novel tool that can be integrated with existing plagiarism detection tools to improve plagiarism detection performance. The tool also implements a new approach for investigating the similarity between source-code files with a view to gathering evidence for proving plagiarism. Graphical evidence is presented that allows for the investigation of source-code fragments with regards to their contribution toward evidence for proving plagiarism. The graphical evidence indicates the relative importance of the given source-code fragments across files in a corpus. This is done by using the Latent Semantic Analysis information retrieval technique to detect how important they are within the specific files under investigation in relation to other files in the corpus. {\textcopyright} 2012 IEEE.},
address = {P.A. College, PO Box 40763, Larnaca 6307, Cyprus},
annote = {From Duplicate 2 (An Approach to Source-Code Plagiarism Detection and Investigation Using Latent Semantic Analysis - Cosma, G; Joy, M)

Cited By :8

Export Date: 23 February 2015

CODEN: ITCOB

Correspondence Address: Cosma, G.; P.A. College, PO Box 40763, Larnaca 6307, Cyprus

References: Cosma, G., Joy, M., Towards a definition of source-code plagiarism (2008) IEEE Transactions on Education, 51 (2), pp. 195-200. , DOI 10.1109/TE.2007.906776, Special Issue on Plagiarism; 
Cosma, G., Joy, M., Source-code plagiarism: A U.K academic perspective (2006) Research Report, No. 422, Dept. of Computer Science, , Univ. of Warwick, Coventry;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Education, 42 (2), pp. 129-133. , May;
Mozgovoy, M., Desktop tools for offline plagiarism detection in computer programs (2006) Informatics in Education, 5 (1), pp. 97-112;
Ottenstein, J.K., A program to count operators and operands for ANSI-fortran modules (1976) IBM Technical Report CSD-TR-196, , June;
Ottenstein, J.K., An algorithmic approach to the detection and prevention of plagiarism (1976) ACM SIGCSE Bull., 8 (4), pp. 30-41;
Halstead, M.H., Natural laws controlling algorithm structure? (1972) ACM SIGPLAN Notices, 7 (2), pp. 19-26;
Halstead, M.H., (1977) Elements of Software Science, , Elseveir;
Robinson, S.S., Soffa, M.L., An instructional aid for student programs (1980) SIGCSE Bull., 12 (1), pp. 118-129;
Aiken, A., (2005) Moss: A System for Detecting Software Plagiarism, , http://theory.stanford.edu/aiken/moss/, Univ. of California-Berkeley;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. The ACM SIGMOD Int'l Conf. Management of Data, pp. 76-85;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 28 (1), pp. 130-134;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. Universal Computer Science, 8 (11), pp. 1016-1038;
Baker, B., On finding duplication and near-duplication in large software systems (1995) Proc. IEEE Second Working Conf. Reverse Eng., pp. 85-95;
Moussiades, L., Vakali, A., PDetect: A clustering approach for detecting plagiarism in source code datasets (2005) Computer Journal, 48 (6), pp. 651-661. , DOI 10.1093/comjnl/bxh119;
Berry, M.W., Dumais, S.T., O'Brien, G.W., Using linear algebra for intelligent information retrieval (1995) SIAM Rev., 37 (4), pp. 573-595;
Kontostathis, A., Pottenger, W.M., A framework for understanding LSI performance (2003) Proc. SIGIR Workshop Math./Formal Methods in Information Retrieval, , In S. Dominich, ed., July;
Kontostathis, A., Pottenger, W.M., A framework for understanding Latent Semantic Indexing (LSI) performance (2006) Information Processing and Management, 42 (1), pp. 56-73. , DOI 10.1016/j.ipm.2004.11.007, PII S0306457304001529;
Dumais, S.T., Improving the retrieval of information from external sources (1992) Behaviour Research Methods, Instruments and Computers, 23, pp. 229-236;
Nakov, P., Latent semantic analysis of textual data (2000) Proc. Conf. Computer Systems and Technologies, pp. 5031-5035;
Kawaguchi, S., Garg, P.K., Matsushita, M., Inoue, K., MUDABlue: An automatic categorization system for open source repositories (2004) Proceedings - Asia-Pacific Software Engineering Conference, APSEC, pp. 184-193. , Proceedings - 11th Asia-Pacific Software Engineering Conference, APSEC 2004;
Lungu, M., Kuhn, A., Girba, T., Lanza, M., Interactive exploration of semantic clusters (2005) Proc. Int'l Workshop Visualizing Software for Understanding and Analysis (VISSOFT '05), pp. 40-45;
Kuhn, A., Ducasse, S., Girba, T., Enriching reverse engineering with semantic clustering (2005) Proc. Working Conf. Reverse Eng. (WCRE '05), pp. 113-122;
Maletic, J.I., Marcus, A., Supporting program comprehension using semantic and structural information (2001) Proceedings - International Conference on Software Engineering, pp. 103-112;
Maletic, J.I., Valluri, N., Automatic software clustering via latent semantic analysis (1999) Proc. 14th IEEE Int'l Conf. Automated Software Eng. (ASE '99);
Marcus, A., Sergeyev, A., Rajlich, V., Maletic, J., An information retrieval approach to concept location in source code (2001) Proc. IEEE 11th Working Conf. Reverse Eng. (WCRE '04), pp. 214-223;
Cosma, G., (2008) An Approach to Source-code Plagiarism Detection and Investigation Using Latent Semantic Analysis, , PhD thesis, Dept. of Computer Science, Univ. of Warwick, Coventry;
Cosma, G., Joy, M., Parameters driving the performance of LSA for similar source-code file detection (2009) ACM Trans. Information Systems, , Apr;
Berry, M.W., Browne, M., (2005) Understanding Search Engines: Mathematical Modeling and Text Retrieval, , second ed., SIAM;
Deerwester, S., Dumais, S.T., Landauer, T.K., Furnas, G.W., Harshman, R.A., Indexing by latent semantic analysis (1990) J. Am. Soc. Information Science, 41 (6), pp. 391-407;
Tukey, J.W., (1977) Exploratory Data Analysis, , Addison Wesley;
Mozgovoy, M., (2007) Enhancing Computer-aided Plagiarism Detection, , dissertation, Dept. of Computer Science, Univ. of Joensuu, Nov;
Kakkonen, T., Sutinen, E., Timonen, J., Applying validation methods for noise reduction in LSA-based essay grading (2005) WSEAS Transactions on Information Science and Applications, 2 (9), pp. 1334-1342},
author = {Cosma, G and Joy, M},
doi = {10.1109/TC.2011.223},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2012 - Cosma, Joy - An Approach to Source-Code Plagiarism Detection and Investigation Using Latent Semantic Analysis.pdf:pdf},
issn = {0018-9340},
journal = {IEEE Transactions on Computers},
keywords = {Codes (symbols),Information retrieval,Inspection equipment,Intellectual property,Investigation process,Latent Semantic Analysis,Plagiarism detection,Relative importance,Semantics,Similarity detection,Source-code similarity detection,file organisation,information retrieval,latent semantic analysis,security o,similarity investigation tool},
language = {English},
month = {mar},
number = {3},
pages = {379--394},
title = {{An Approach to Source-Code Plagiarism Detection and Investigation Using Latent Semantic Analysis}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84856244774{\&}partnerID=40{\&}md5=7b616146ccdb9fd7cd29bc30504da6ed http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6086533 http://ieeexplore.ieee.org/document/6086533/},
volume = {61},
year = {2012}
}
@inproceedings{Hage:2011:PDJ:2043594.2043597,
abstract = {In this paper we compare five tools for detecting plagiarism in Java source code texts: JPlag, Marble, moss, Plaggie, and sim. The tools are compared with respect to their features and performance. For the performance comparison we carried out two experiments: to compare the sensitivity of the tools for different plagiarism techniques we have applied the tools to a set of intentionally plagiarised programs. To get a picture of the precision of the tools, we have run the tools on several incarnations of a student assignment and compared the top 10's of the results.},
address = {Heerlen, The Netherlands},
author = {Hage, Jurriaan and Rademaker, Peter and van Vugt, Nik{\`{e}}},
booktitle = {Computer Science Education Research Conference},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2011 - Hage, Rademaker, van Vugt - Plagiarism Detection for Java A Tool Comparison.pdf:pdf;:D$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Plagiarism Detection for Java A Tool Comparison.pdf:pdf},
isbn = {978 90 358 1987 0},
keywords = {Java,experimental evaluation,source code plagiarism},
pages = {33--46},
publisher = {Open Universiteit, Heerlen},
series = {CSERC '11},
title = {{Plagiarism Detection for Java: A Tool Comparison}},
url = {http://dl.acm.org/citation.cfm?id=2043594.2043597},
year = {2011}
}
@article{Prechelt20021016,
abstract = {JPlag is a web service that finds pairs of similar programs among a given set of programs. It has successfully been used in practice for detecting plagiarisms among student Java program submissions. Support for the languages C, C++ and Scheme is also available. We describe JPlag's architecture and its comparsion algorithm, which is based on a known one called Greedy String Tiling. Then, the contribution of this paper is threefold: First, an evaluation of JPlag's performance on several rather different sets of Java programs shows that JPlag is very hard to deceive. More than 90 percent of the 77 plagiarisms within our various benchmark program sets are reliably detected and a majority of the others at least raise suspicion. The run time is just a few seconds for submissions of 100 programs of several hundred lines each. Second, a parameter study shows that the approach is fairly robust with respect to its configuration parameters. Third, we study the kinds of attempts used for disguising plagiarisms, their frequency, and their success. {\textcopyright} J.UCS.},
annote = {From Duplicate 1 (Finding plagiarisms among a set of programs with JPlag - Prechelt, L.a; Malpohl, G.a; Philippsen, M.b)

cited By 143

From Duplicate 2 (Finding plagiarisms among a set of programs with JPlag - Prechelt, L.a; Malpohl, G.a; Philippsen, M.b)

cited By 171},
author = {Prechelt, L and Malpohl, G and Philippsen, M},
doi = {10.3217/jucs-008-11-1016},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2002 - Prechelt, Malpohl, Philippsen - Finding plagiarisms among a set of programs with JPlag.pdf:pdf},
issn = {0958695X},
journal = {Journal of Universal Computer Science},
number = {11},
pages = {1016--1038},
title = {{Finding plagiarisms among a set of programs with JPlag}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-1442310235{\&}partnerID=40{\&}md5=dae8b2917ade6fffceef1aff24e06d57 http://www.jucs.org/doi?doi=10.3217/jucs-008-11-1016 https://www.scopus.com/inward/record.uri?eid=2-s2.0-1442310235{\&}partnerID=40{\&}md5=dae8b2917a},
volume = {8},
year = {2002}
}
@article{Mozgovoy200697,
abstract = {Plagiarism in universities has always been a difficult problem to overcome. Various tools have been developed over the past few years to help teachers detect plagiarism in students' work. By being able to categorize the multitude of plagiarism detection tools, it is possible to estimate their capabilities, advantages and disadvantages. In this article I consider modem plagiarism software solutions, paying attention mostly to desktop systems intended for plagiarism detection in program code. I also estimate the speed and reliability of different plagiarism detection systems that are currently available. {\textcopyright} 2006 Institute of Mathematics and Informatics, Vilnius.},
annote = {From Duplicate 1 (Desktop tools for offline plagiarism detection in computer programs - Mozgovoy, M)

cited By 16

From Duplicate 2 (Desktop tools for offline plagiarism detection in computer programs - Mozgovoy, M)

cited By 13},
author = {Mozgovoy, M},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Mozgovoy - Desktop tools for offline plagiarism detection in computer programs.pdf:pdf},
issn = {16485831},
journal = {Informatics in Education},
number = {1},
pages = {97--112},
title = {{Desktop tools for offline plagiarism detection in computer programs}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-33646069308{\&}partnerID=40{\&}md5=705cefccbd3e3f90055515950242f830 http://www.scopus.com/inward/record.url?eid=2-s2.0-33646069308{\&}partnerID=40{\&}md5=705cefccbd3e3f90055515950242f830 http://www.mii.lt/informatic},
volume = {5},
year = {2006}
}
@inproceedings{Poon2012b,
abstract = {Existing source code plagiarism systems focus on the problem of identifying plagiarism between pairs of submissions. The task of detection, while essential, is only a small part of managing plagiarism in an instructional setting. Holistic plagiarism detection and management requires coordination and sharing of assignment similarity - elevating plagiarism detection from pairwise similarity to cluster-based similarity; from a single assignment to a sequence of assignments in the same course, and even among instructors of different courses. To address these shortcomings, we have developed Student Submissions Integrity Diagnosis (SSID), an open-source system that provides holistic plagiarism detection in an instructor-centric way. SSID's visuals show overviews of plagiarism clusters throughout all assignments in a course as well as highlighting most-similar submissions on any specific student. SSID supports plagiarism detection workflows; e.g., allowing student assistants to flag suspicious assignments for later review and confirmation by an instructor with proper authority. Evidence is automatically entered into SSID's logs and shared among instructors. We have additionally collected a source code plagiarism corpus, which we employ to identify and correct shortcomings of previous plagiarism detection engines and to optimize parameter tuning for SSID deployment. Since its deployment, SSID's workflow enhancements have made plagiarism detection in our faculty less tedious and more successful. {\textcopyright} 2012 ACM.},
address = {New York, New York, USA},
annote = {Conference code: 91621

Export Date: 23 February 2015

Correspondence Address: Poon, J.Y.H.; National University of Singapore Computing 1, 13 Computing Drive, Singapore 117417, Singapore; email: poonyanh@comp.nus.edu.sg

References: Aiken, A., (1994) Moss: A System for Detecting Software Plagiarism, , http://theory.stanford.edu/{\~{}}aiken/moss/; 
Berghel, H.L., Sallach, D.L., Measurements of Program Similarity in Identical Task Environments (1984) ACM SIGPLAN Notices, 19 (8), pp. 65-76;
Ciesielski, V., Wu, N., Tahaghoghi, S., Evolving Similarity Functions for Code Plagiarism Detection (2008) Proc. of the 10th Annual Conference on Genetic and Evolutionary Computation (GECCO'08), pp. 1453-1460;
Donaldson, J.L., Lancaster, A.-M., Sposato, P.H., A Plagiarism Detection System (1981) Proc. of the 12th SIGCSE Technical Symposium on Computer Science Education (SIGCSE '81), pp. 21-25;
Ester, M., Kriegel, H.-P., Sander, J., Xu, X., A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise (1996) Proc. of the 2nd International Conference on Knowledge Discovery and Data Mining (KDD-96), pp. 226-231;
Faidhi, J.A., Robinson, S.K., An Empirical Approach for Detecting Program Similarity and Plagiarism within a University Programming Environment (1987) Computers {\&} Education, 11 (1), pp. 11-19;
Freire, M., Visualizing Program Similarity in the AC Plagiarism Detection System (2008) Proc. of the Working Conference on Advanced Visual Interfaces (AVI'08), pp. 404-407;
Gitchell, D., Tran, N., Sim: A Utility for Detecting Similarity in Computer Programs (1999) Proc. of the 30th SIGCSE Technical Symposium on Computer Science Education (SIGCSE '99), pp. 266-270;
Grier, S., A Tool That Detects Plagiarism in Pascal Programs (1981) Proc. of the 12th SIGCSE Technical Symposium on Computer Science Education (SIGCSE '81), pp. 15-20;
Halstead, M.H., (1977) Elements of Software Science, , Elsevier Science Ltd;
Jadalla, A., Elnagar, A., PDE4Java: Plagiarism Detection Engine for Java Source Code: A Clustering Approach (2008) International Journal of Business Intelligence and Data Mining, 3 (2), pp. 121-135;
Jocoy, C.L., DiBiase, D., Plagiarism by Adult Learners Online: A case study in detection and remediation (2006) The International Review of Research in Open and Distance Learning, 7 (1);
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of Software Plagiarism by Program Dependence Graph Analysis (2006) Proc. of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD'06), pp. 872-881;
Meyer, C., Heeren, C., Shaffer, E., Tedesco, J., CoMoTo - The Collaboration Modeling Toolkit (2011) Proc. of the 16th Annual Conference on Innovation and Technology in Computer Science Education (ITiCSE'11), pp. 143-147;
Moussiades, L., Vakali, A., PDetect: A Clustering Approach for Detecting Plagiarism in Source Code Datasets (2005) The Computer Journal, 48 (6), pp. 651-661;
Ooi, W.T., Tan, T.C., A Survey on Awareness and Attitudes towards Plagiarism among Computer Science Freshmen (2005) CDTLink, 9 (3);
Ottenstein, K.J., An Algorithmic Approach to the Detection and Prevention of Plagiarism (1976) ACM SIGCSE Bulletin, 8 (4), pp. 30-41;
Prechelt, L., Malphol, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local Algorithms for Document Fingerprinting (2003) Proc. of the 2003 ACM SIGMOD International Conference on Management of Data (SIGMOD'03), pp. 76-85;
Vamplew, P., Dermoudy, J., An Anti-Plagiarism Editor for Software Development Courses (2005) Proc. of the 7th Australasian Conference on Computing Education (ACE'05), pp. 83-90;
Verco, K.L., J, M., Wise. Software for Detecting Suspected Plagiarism: Comparing Structure and Attribute-counting Systems (1996) Proc. of the 1st Australasian Conference on Computer Science Education (ACSE '96), pp. 81-88;
Wise, M.J., Detection of Similarities in Student Programs: YAP'ing may be Preferable to Plague'ing (1992) Proc. of the 23rd SIGCSE Technical Symposium on Computer Science Education (SIGCSE '92), pp. 268-271;
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , ftp://ftp.cs.su.oz.au/michaelw/doc/RKR{\_}GST.ps;
Wise, M.J., YAP3: Improved Detection of Similarities in Computer Program and Other Texts (1996) Proc. of the 27th SIGCSE Technical Symposium on Computer Science Education (SIGCSE '96), pp. 130-134
A4 - ACM SIGCSE},
author = {Poon, Jonathan Y.H. and Sugiyama, Kazunari and Tan, Yee Fan and Kan, Min-Yen},
booktitle = {Proceedings of the 17th ACM annual conference on Innovation and technology in computer science education},
doi = {10.1145/2325296.2325328},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Poon et al. - Instructor-centric source code plagiarism detection and plagiarism corpus.pdf:pdf},
isbn = {9781450312462},
keywords = {Cluster-based,Computer programming languages,Engineering research,Innovation,Intellectual property,Mathematical programming,Open source system,Parameter-tuning,Plagiarism detection,Source code plagiarisms,Students,Teaching,User interfaces,Work-flows,corpus studies,plagiarism assessment,plagiarism detection,programming,similarity,user interface},
language = {English},
pages = {122},
publisher = {ACM Press},
title = {{Instructor-centric source code plagiarism detection and plagiarism corpus}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84864674950{\&}partnerID=40{\&}md5=a69c9d828bfc1a1dd042d314032374f5 http://dl.acm.org/citation.cfm?doid=2325296.2325328},
year = {2012}
}
@incollection{Jia2012c,
abstract = {This paper mainly studies on plagiarism detection method based on the XML similarity and the clustering. Firstly, it analysis the replication types and the copy features of the programming source code; Secondly, extracts the specific code strings and the line positions, and then converts it into the XML text; Thirdly, generates a visualization detecting report according to the procedure similarity; Finally, we use the clustering method to identify the plagiarism "cluster" and the "source" of the plagiarism. {\textcopyright} 2012 Springer-Verlag.},
address = {Hohhot, China},
annote = {Conference code: 91938

Export Date: 23 February 2015

Correspondence Address: Jia, S.; Computer and Information Engineering College, Inner Mongolia Normal University, Hohhot, China; email: jsy{\_}1985@163.com

References: Halstead, M.H., (1977) Elements of Software Science, , ISBN: 0444002057; 
Ottenstein, J.K., An Algorithmic Approach to the Detection and Prevention of Plagiarism (1976) ACM SIGCSE Bulletin, 8 (4), pp. 30-41;
Faidhi, J.A.W., Robinson, S.K., An Empirical Approach for Detecting Program Similarity and Plagiarism within a University Programming Environment (1987) Computers and Education, 11 (1), pp. 11-19;
Verco, K.L., Wise, M.J., Plagiarism {\`{a}}la mode: A comparison of automated systems for detecting suspected plagiarism (1996) The Computer Journal, 39 (9), pp. 741-750;
Aiken, A., Moss: A System for Detecting Software Plagiarism (EB/OL), , http://theory.stanford.edu/{\~{}}aiken/moss/2009-12-21;
Prechelt, L., Malpohl, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Emeric, K., Moritz, K., JPlag: A System That Finds Similarities among Multiple Sets of Source Code Files (EB/OL), , http://www.ipd.Uni-karlsruhe.de/jplag/2009-12-21;
Gitchell, D., Sim, T.N., A utility for detecting similarity in computer programs (1999) Proc. of the 30th SIGCSE Technical Symposium on Computer Science Education, pp. 266-270. , Association for Computing Machinery, New York;
Wise, M.J., YAP3: Improvement Detection of Similarities in Computer Program and Other Texts (1996) Proc. of the 27th SIGCSE Technical Symposium on Computer Science Education, 289 (1), pp. 130-134. , Association for Computing Machinery, New York;
Kamiya, T., Kusumoto, S., Inoue, K., CCFinder: A multilinguistic token-based code clone detection system for large scale source code (2002) TSE, 28 (7), pp. 654-670;
Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM, pp. 368-377;
Wahler, V., Seipel, D., Von Gudenberg, J.W., Fischer, G., Clone detection in source code by frequent itemset techniques (2004) SCAM, pp. 128-135;
Li, Z., Lu, S., Myagmar, S., Zhou, Y., CP-Miner: A tool for finding copy-paste and related bugs in operating system code (2004) OSDI, pp. 289-302;
Jones, E.L., Metrics based plagiarism monitoring (2001) Proceedings of the Sixth Annual CCSC Northeastern Conference on the Journal of Computing in Small Colleges, 16 (4), pp. 253-261;
Zhao, C., Yan, H., Jin, M., Approach based on compiling optimization and disassembling to detect program similarity (2008) Journal of Beijing University of Aeronautics and Astronautics, 34 (6);
Zhong, M., Liu, D., An XML plagiarism detection model for C program (2010) Proc. of 2010 3rd International Conference on Advanced Computer Theory and Engineering (ICACTE), pp. 460-464},
author = {Jia, Shengying and Liu, Dongsheng and Zhang, Liping and Liu, Chenglong},
booktitle = {International Workshop on Internet of Things},
doi = {10.1007/978-3-642-32427-7_88},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Jia et al. - A Research on Plagiarism Detecting Method Based on XML Similarity and Clustering.pdf:pdf},
isbn = {18650929 (ISSN); 9783642324260 (ISBN)},
keywords = {Clustering,Clustering methods,Detecting methods,Intellectual property,Internet,Line positions,Plagiarism detection,Source codes,Visualization,XML},
language = {English},
pages = {619--626},
title = {{A Research on Plagiarism Detecting Method Based on XML Similarity and Clustering}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84865016934{\&}partnerID=40{\&}md5=b5213565f38b9f73b749a6f5847ca8cb http://link.springer.com/10.1007/978-3-642-32427-7{\_}88},
volume = {312 CCIS},
year = {2012}
}
@article{Faidhi198711,
abstract = {Several studies that examine the detection of plagiarism in a given programming environment have recently appeared in the literature. In most cases, these studies have found support for certain metrics, related to program structure, as indicative of similarity or plagiarism. In the research described in this paper, a broader analysis of program similarity and plagiarism is reported. The plagiarism detection system developed is shown to be more sensitive than those previously reported in the literature.},
author = {Faidhi, J.A.W. and Robinson, S.K.},
doi = {10.1016/0360-1315(87)90042-X},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/1987 - Faidhi, Robinson - An empirical approach for detecting program similarity and plagiarism within a university programming environm.pdf:pdf},
issn = {03601315},
journal = {Computers {\&} Education},
month = {jan},
number = {1},
pages = {11--19},
title = {{An empirical approach for detecting program similarity and plagiarism within a university programming environment}},
url = {http://www.sciencedirect.com/science/article/pii/036013158790042X http://linkinghub.elsevier.com/retrieve/pii/036013158790042X},
volume = {11},
year = {1987}
}
@article{Song2015,
abstract = {This paper proposes a novel method to compute how similar two program source codes are. Since a program source code is represented as a structural form, the proposed method adopts convolution kernel functions as a similarity measure. Actually, a program source code has two kinds of structural information. One is syntactic information and the other is the dependencies of function calls lying on the program. Since the syntactic information of a program is expressed as its parse tree, the syntactic similarity between two programs is computed by a parse tree kernel. The function calls within a program provide a global structure of a program and can be represented as a graph. Therefore, the similarity of function calls is computed with a graph kernel. Then, both structural similarities are reflected simultaneously into comparing program source codes by composing the parse tree and the graph kernels based on a cyclomatic complexity. According to the experimental results on a real data set for program plagiarism detection, the proposed method is proved to be effective in capturing the similarity between programs. The experiments show that the plagiarized pairs of programs are found correctly and thoroughly by the proposed method.},
annote = {cited By 0},
author = {Song, Hyun-Je and Park, Seong-Bae and Park, Se Young},
doi = {10.1155/2015/429807},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2015 - Song, Park, Park - Computation of Program Source Code Similarity by Composition of Parse Tree and Call Graph.pdf:pdf},
issn = {1024-123X},
journal = {Mathematical Problems in Engineering},
keywords = {Algorithms,Codes (symbols),Computation,Computer Programs,Computer programming languages,Cyclomatic complexity,D,Program plagiarism detecti,Trees (mathematics)},
pages = {1--12},
publisher = {Hindawi Publishing Corporation},
title = {{Computation of Program Source Code Similarity by Composition of Parse Tree and Call Graph}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84928798999{\&}partnerID=40{\&}md5=703e9ab1e5d21575316773012af13e1b http://www.scopus.com/inward/record.url?eid=2-s2.0-84928798999{\&}partnerID=40{\&}md5=703e9ab1e5d21575316773012af13e1b http://www.hindawi.com/journ},
volume = {2015},
year = {2015}
}
@article{ISI:000351520700008,
abstract = {Vast amounts of information available online make plagiarism increasingly easy to commit, and this is particularly true of source code. The traditional approach of detecting copied work in a course setting is manual inspection. This is not only tedious but also typically misses code plagiarized from outside sources or even from an earlier offering of the course. Systems to automatically detect source code plagiarism exist but tend to focus on small submission sets. One such system that has become the standard in automated source code plagiarism detection is measure of software similarity (MOSS) Schleimer et al. in proceedings of the 2003 ACM SIGMOD international conference on management of data, ACM, San Diego, 2003 . In this work, we present an approach called program it yourself (PIY) which is empirically shown to outperform MOSS in detection accuracy. By utilizing parallel processing and data clustering, PIY is also capable of maintaining detection accuracy and reasonable runtimes even when using extremely large data repositories. {\textcopyright} 2014 Springer-Verlag London.},
address = {School of Computer Science, University of Massachusetts, Amherst, MA 01060, United States},
annote = {From Duplicate 1 (Efficient clustering-based source code plagiarism detection using PIY - Ohmann, Tony; Rahal, Imad)

From Duplicate 1 (Efficient clustering-based source code plagiarism detection using PIY - Ohmann, Tony; Rahal, Imad)

From Duplicate 1 (Efficient clustering-based source code plagiarism detection using PIY - Ohmann, Tony; Rahal, Imad)

Export Date: 23 February 2015

Article in Press

Correspondence Address: Ohmann, T.; School of Computer Science, University of Massachusetts, Amherst, MA 01060, United States; email: ohmann@cs.umass.edu

From Duplicate 2 (Efficient clustering-based source code plagiarism detection using PIY - Ohmann, Tony; Rahal, Imad)

Export Date: 23 February 2015

Article in Press

Correspondence Address: Ohmann, T.; School of Computer Science, University of Massachusetts, Amherst, MA 01060, United States; email: ohmann@cs.umass.edu

From Duplicate 2 (Efficient clustering-based source code plagiarism detection using PIY - Ohmann, T; Rahal, I)

Export Date: 23 February 2015

Article in Press

Correspondence Address: Ohmann, T.; School of Computer Science, University of Massachusetts, Amherst, MA 01060, United States; email: ohmann@cs.umass.edu},
author = {Ohmann, Tony and Rahal, Imad},
doi = {10.1007/s10115-014-0742-2},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Ohmann, Rahal - Efficient clustering-based source code plagiarism detection using PIY.pdf:pdf},
isbn = {02191377 (ISSN)},
issn = {0219-1377},
journal = {Knowledge and Information Systems},
keywords = {{\$}{\$}k{\$}{\$} k -Grams,Data clustering,NUMA,Pa,Parallel computing,Plagiarism detection,k-Grams},
language = {English},
month = {may},
number = {2},
pages = {445--472},
publisher = {SPRINGER LONDON LTD},
title = {{Efficient clustering-based source code plagiarism detection using PIY}},
type = {Article},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84896406528{\&}partnerID=40{\&}md5=be74e117756bc46f5990867ef78bef70 http://link.springer.com/10.1007/s10115-014-0742-2},
volume = {43},
year = {2015}
}
@article{Bejarano2015,
abstract = {This article presents a proposal for the detection of programming source code similitude in academic environments. The objective of this proposal is to provide support to professors in detecting plagiarism in student homework assignments in introductory computer programming courses. The developed tool, CODESIGHT, is based on a modification of the Greedy String Tiling algorithm. The tool was tested in one theoretical and three real scenarios, obtaining similitude detections for assignments ranging from those that contained code without modifications to assignments containing insertions of procedural instructions inside the main code. The results verified the efficiency of the tool at the first five levels of the plagiarism spectrum for programming code, in addition to supporting suspicions of plagiarism in real scenarios.},
address = {Universidad del Norte, Ingenier{\'{i}}a de Sistemas, Km. 5 Antigua v{\'{i}}a a Puerto ColombiaBarranquilla, Atl{\'{a}}ntico, Colombia},
annote = {From Duplicate 1 (Detection of source code similitude in academic environments - Bejarano, A M; Garc{\'{i}}a, L E; Zurek, E E)

cited By 1

From Duplicate 2 (Detection of source code similitude in academic environments - Bejarano, Andr{\'{e}}s M; Garc{\'{i}}a, Lucy E; Zurek, Eduardo E)

Export Date: 23 February 2015

CODEN: CAPEE

Correspondence Address: Zurek, E.E.; Universidad del Norte, Ingenier{\'{i}}a de Sistemas, Km. 5 Antigua v{\'{i}}a a Puerto Colombia, Colombia

References: Parker, A., Hamblen, J.O., Computer algorithms for plagiarism detection (1989) IEEE Trans Educ, 32, p. 94; 
Liu, C., Chen, C., Han, J., Yu, P.S., (2006) Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 872. , ACM;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J UCS, 8, p. 1016;
Bowyer, K.W., Hall, L.O., (1999) 29th Annual Frontiers in Education Conference, 1999. FIE'99, 13 B3 (18). , IEEE;
The Sherlock Plagiarism Detector. The University of Sydney. [Online], , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Available Last accessed 03 Dec 2012;
Wise, M.J., (1996) ACM SIGCSE Bulletin, 130. , ACM;
Yuan, Y., Guo, Y., (2012) Proceedings of the 27th IEEE/ACM International Conference on Automated Software Engineering, 286. , ACM;
Zhang, F., Jhi, Y.C., Wu, D., Liu, P., Zhu, S., (2012) Proceedings of the 2012 International Symposium on Software Testing and Analysis, 111. , ACM;
Poon, J.Y.H., Sugiyama, K., Tan, Y.F., Kan, M.Y., (2012) Proceedings of the 17th ACM Annual Conference on Innovation and Technology in Computer Science Education, 122. , ACM;
Inoue, U., Wada, S., (2012) 2012 9th International Conference on Fuzzy Systems and Knowledge Discovery (FSKD), 2308. , IEEE;
Flores, E., Barr{\'{o}}n-Cedeno, A., Rosso, P., Moreno, L., (2012) NAACLHLT 2012, 1;
Cosma, G., Joy, M., An approach to source-code plagiarism detection and investigation using latent semantic analysis (2012) IEEE Trans Comput, 61, p. 379;
Narayanan, S., Simi, S., (2012) 2012 7th International Conference on Computer Science {\&} Education (ICCSE), 1065. , IEEE;
Juricic, V., (2011) Proceedings of the ITI 2011 33rd International Conference on Information Technology Interfaces (ITI), 597. , IEEE;
Jhi, Y.C., Wang, X., Jia, X., Zhu, S., Liu, P., Wu, D., (2011) Proceedings of the 33rd International Conference on Software Engineering, 756. , ACM;
Lim, J.S., Ji, J.H., Cho, H.G., Woo, G., (2011) Proceedings of the 5th International Conference on Ubiquitous Information Management and Communication, 24. , ACM;
Spinellis, D., Zaharias, P., Vrechopoulos, A., Coping with plagiarism and grading load: Randomized programming assignments and reflective grading (2007) Comput Appl Eng Educ, 15, p. 113;
Ramos, J., Trenas, M.A., Guti{\'{e}}rrez, E., Romero, S., E-assessment of Matlab assignments in Moodle: Application to an introductory programming course for engineers (2011) Comput Appl Eng Educ, , Published online on Wiley Online Library;
Rodr{\'{i}}guez, S., Pedraza, J.L., Dopico, A.G., Rosales, F., M{\'{e}}ndez, R., Computer-based management environment for an assembly language programming laboratory (2007) Comput Appl Eng Educ, 15, p. 41;
Mann, S., Frew, Z., (2006) Proceedings of the 8th Australasian Conference on Computing Education, 52, p. 143. , Australian Computer Society, Inc;
Jones, E.L., Metrics based plagarism monitoring (2001) J Comput Sci Coll, 16, p. 253;
Arwin, C., Tahaghoghi, S.M.M., (2006) Proceedings of the 29th Australasian Computer Science Conference, 48, p. 277. , Australian Computer Society, Inc;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans Educ, 42, p. 129;
Sabri, K.E.M., Al-Ja'afer, J.J., The JK system to detect plagiarism (2006) J Comput Sci Technol, 6, pp. 66-72;
Sowa, J.F., (1992) Conceptual Structures: Current Research and Practice, p. p3. , Ellis Horwood, New York, London, Toronto;
Ferrante, J., Ottenstein, K.J., Warren, J.D., The program dependence graph and its use in optimization (1987) ACM Trans Programming Lang Syst (TOPLAS), 9, p. 319;
Krinke, J., Identifying similar code with program dependence graphs (2001) Proceedings of the Eighth Working Conference on Reverse Engineering, 301. , IEEE;
Engels, S., Lakshmanan, V., Craig, M., Plagiarism detection using feature-based neural networks (2007) ACM SIGCSE Bulletin, 34. , ACM;
Ji, J.H., Woo, G., Cho, H.G., A source code linearization technique for detecting plagiarized programs (2007) ACM SIGCSE Bulletin, 39, p. 73;
Wise, M.J., (1993) Running Karp-rabin Matching and Greedy String Tiling, , Basser Department of Computer Science, University of Sydney},
author = {Bejarano, Andr{\'{e}}s M and Garc{\'{i}}a, Lucy E and Zurek, Eduardo E},
doi = {10.1002/cae.21571},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Bejarano, Garc{\'{i}}a, Zurek - Detection of source code similitude in academic environments.pdf:pdf},
issn = {10613773},
journal = {Computer Applications in Engineering Education},
keywords = {Academic environment,Codes (symbols),Computer programming,Computer programming languages,Detecting plagiarism,E,Education,Homew,Homework assignments,Intellectual property,Introductory computer programming,Plagiarism,Programming codes,Source code,Source codes},
language = {English},
month = {jan},
number = {1},
pages = {13--22},
publisher = {John Wiley and Sons Inc.},
title = {{Detection of source code similitude in academic environments}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84920934639{\&}partnerID=40{\&}md5=0c4adca9ce65c0cb4be2f7dea65da654 http://www.scopus.com/inward/record.url?eid=2-s2.0-84920934639{\&}partnerID=40{\&}md5=0c4adca9ce65c0cb4be2f7dea65da654 http://doi.wiley.com/10.1002},
volume = {23},
year = {2015}
}
@inproceedings{Acampora2015,
abstract = {Source-code plagiarism detection in programming, concerns the identification of source-code files that contain similar and/or identical source-code fragments. Fuzzy clustering approaches are a suitable solution to detecting source-code plagiarism due to their capability to capture the qualitative and semantic elements of similarity. This paper proposes a novel Fuzzy-based approach to source-code plagiarism detection, based on Fuzzy C-Means and the Adaptive-Neuro Fuzzy Inference System (ANFIS). In addition, performance of the proposed approach is compared to the Self- Organising Map (SOM) and the state-of-the-art plagiarism detection Running Karp-Rabin Greedy-String-Tiling (RKR-GST) algorithms. The advantages of the proposed approach are that it is programming language independent, and hence there is no need to develop any parsers or compilers in order for the fuzzy-based predictor to provide detection in different programming languages. The results demonstrate that the performance of the proposed fuzzy-based approach overcomes all other approaches on well-known source code datasets, and reveals promising results as an efficient and reliable approach to source-code plagiarism detection.},
address = {Istanbul, Turkey},
author = {Acampora, Giovanni and Cosma, Georgina},
booktitle = {IEEE International Conference on Fuzzy Systems},
doi = {10.1109/FUZZ-IEEE.2015.7337935},
file = {:D$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Acampora, Cosma - A Fuzzy-based approach to programming language independent source-code plagiarism detection.pdf:pdf},
isbn = {978-1-4673-7428-6},
keywords = {adaptive systems,computer crime,fuzzy neural nets},
month = {aug},
pages = {1--8},
publisher = {IEEE},
title = {{A Fuzzy-based approach to programming language independent source-code plagiarism detection}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7337935 http://ieeexplore.ieee.org/document/7337935/},
year = {2015}
}
@article{Burrows2007151,
abstract = {Unauthorized re-use of code by students is a widespread problem in academic institutions, and raises liability issues for industry. Manual plagiarism detection is time-consuming, and current effective plagiarism detection approaches cannot be easily scaled to very large code repositories. While there are practical text-based plagiarism detection systems capable of working with large collections, this is not the case for code-based plagiarism detection. In this paper, we propose techniques for detecting plagiarism in program code using text similarity measures and local alignment Through detailed empirical evaluation on small and large collections of programs, we show that our approach is highly scalable while maintaining similar levels of effectiveness to that of the popular JPlag and MOSS systems. Copyright {\textcopyright} 2006 John Wiley {\&} Sons, Ltd.},
annote = {From Duplicate 1 (Efficient plagiarism detection for large code repositories - Burrows, Steven; Tahaghoghi, S. M. M.; Zobel, Justin)

cited By 29

From Duplicate 2 (Efficient plagiarism detection for large code repositories - Burrows, S.a; Tahaghoghi, S.M.M.a b; Zobel, J.a)

cited By 30},
author = {Burrows, Steven and Tahaghoghi, S. M. M. and Zobel, Justin},
doi = {10.1002/spe.750},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2007 - Burrows, Tahaghoghi, Zobel - Efficient plagiarism detection for large code repositories.pdf:pdf},
issn = {00380644},
journal = {Software: Practice and Experience},
keywords = {Coding errors,Computer systems programming,Error detection,Ind,Local alignment,MOSS systems,Plagiarism detecti},
month = {feb},
number = {2},
pages = {151--175},
title = {{Efficient plagiarism detection for large code repositories}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-33847141351{\&}partnerID=40{\&}md5=59f93033e445437de699125873dd90a2 http://doi.wiley.com/10.1002/spe.750 https://www.scopus.com/inward/record.uri?eid=2-s2.0-33847141351{\&}partnerID=40{\&}md5=59f93033e445437de6991258},
volume = {37},
year = {2007}
}
@article{Donaldson:1981:PDS:953049.800955,
abstract = {The problem of plagiarism in programming assignments by students in computer science courses has caused considerable concern among both faculty and students. There are a number of methods which instructors use in an effort to control the plagiarism problem. In this paper we describe a plagiarism detection system which was recently implemented in our department. This system is being used to detect similarities in student programs.},
address = {New York, NY, USA},
author = {Donaldson, John L and Lancaster, Ann-Marie and Sposato, Paula H},
doi = {10.1145/953049.800955},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1981 - Donaldson, Lancaster, Sposato - A plagiarism detection system.pdf:pdf},
isbn = {0897910362},
issn = {00978418},
journal = {ACM SIGCSE Bulletin},
month = {feb},
number = {1},
pages = {21--25},
publisher = {ACM},
series = {SIGCSE '81},
title = {{A plagiarism detection system}},
url = {http://doi.acm.org/10.1145/953049.800955 http://portal.acm.org/citation.cfm?doid=953049.800955 http://doi.acm.org/10.1145/800037.800955 http://portal.acm.org/citation.cfm?doid=800037.800955},
volume = {13},
year = {1981}
}
@incollection{Bartoszuk2014,
abstract = {R is a programming language and software environment for performing statistical computations and applying data analysis that increasingly gains popularity among practitioners and scientists. In this paper we present a preliminary version of a system to detect pairs of similar R code blocks among a given set of routines, which bases on a proper aggregation of the output of three different [0,1]-valued (fuzzy) proximity degree estimation algorithms. Its analysis on empirical data indicates that the system may in future be successfully applied in practice in order e.g. to detect plagiarism among students' homework submissions or to perform an analysis of code recycling or code cloning in R's open source packages repositories. {\textcopyright} Springer International Publishing Switzerland 2014.},
address = {Warsaw, Poland},
annote = {Conference code: 106656

Export Date: 23 February 2015

References: Aiken, A., MOSS (Measure of software similarity) plagiarism detection system, , http://theory.stanford.edu/{\~{}}aiken/moss/; 
Chilowicz, M., Duris, E., Roussel, G., Viewing functions as token sequences to highlight similarities in source code (2013) Science of Computer Programming, 78, pp. 1871-1891;
Damerau, F.J., A technique for computer detection and correction of spelling errors (1964) Communications of the ACM, 7 (3), pp. 171-176;
Ferrante, J., Ottenstein, K.J., Warren, J.D., The program dependence graph and its use in optimization (1987) ACM Trans. Program Lang. Syst, 9 (3), pp. 319-349;
Fodor, J., Roubens, M., (1994) Fuzzy Preference Modelling and Multicriteria Decision Support, , Springer;
Gagolewski, M., Grzegorzewski, P., Possibilistic analysis of arity-monotonic aggregation operators and its relation to bibliometric impact assessment of individuals (2011) International Journal of Approximate Reasoning, 52 (9), pp. 1312-1324;
Grabisch, M., Marichal, J.L., Mesiar, R., Pap, E., (2009) Aggregation Functions, , Cambridge University Press;
Hamming, R.W., Error detecting and error correcting codes (1950) Bell System Technical Journal, 29 (2), pp. 147-160;
Lee, C.Y., Some properties of nonbinary error-correcting codes (1958) IRE Transactions On Information Theory, 4 (2), pp. 77-82;
Levenshtein, I., Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10 (8), pp. 707-710;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of Software Plagiarism by Program Dependence Graph Analysis (2006) Proc. 12th ACM SIGKDD Intl. Conf. Knowledge Discovery and Data Mining (KDD 2006), pp. 872-881;
Navarro, G., A guided tour to approximate string matching (2001) ACM Computing Surveys, 33 (1), pp. 31-88;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Prechelt, L., Malpohl, G., Phlippsen, M., JPlag: Finding plagiarisms among a set of programs (2000) Tech. Rep;
Qu, W., Jia, Y., Jiang, M., (2014) Pattern Mining of Cloned Codes In Software Systems. Information Sciences, 259, pp. 544-554;
(2014) R Core Team: R: A Language and Environment for Statistical Computing, , http://www.R-project.org/, R Foundation for Statistical Computing, Vienna, Austria;
Winkler, W.E., String Comparator Metrics and Enhanced Decision Rules in the Fellegi-Sunter Model of Record Linkage (1990) Proc. Section On Survey Research Methods (ASA), pp. 354-359;
Wise, M.J., String similarity via greedy string tiling and running Karp-Rabin matching (1993) Tech. Rep, , Dept. of Computer Science, University of Sydney
A4 - EUSFLAT},
author = {Bartoszuk, Maciej and Gagolewski, Marek},
booktitle = {15th International Conference on Information Processing and Management of Uncertainty in Knowledge-based Systems},
doi = {10.1007/978-3-319-08852-5_3},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Bartoszuk, Gagolewski - A Fuzzy R Code Similarity Detection Algorithm.pdf:pdf},
isbn = {18650929 (ISSN); 9783319088518 (ISBN)},
keywords = {Agglomeration,Algorithms,Cloning,Code cloning,Code similarities,Codes (symbols),Estimation algorithm,Fuzzy proximity,Knowledge based systems,Open source package,R,Software environments,Statistical computations,aggregation,antiplagiarism detection,code cloning,fuzzy proximity relations},
language = {English},
number = {PART 3},
pages = {21--30},
publisher = {Springer Verlag},
title = {{A Fuzzy R Code Similarity Detection Algorithm}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84904959534{\&}partnerID=40{\&}md5=bf41db1113c1d41ff091d63ab2c10171 http://link.springer.com/10.1007/978-3-319-08852-5{\_}3},
volume = {444 CCIS},
year = {2014}
}
@article{762946,
abstract = {The assessment of programming courses is usually carried out by means of programming assignments. Since it is simple to copy and edit computer programs, however, there will always be a temptation among some students following such courses to copy and modify the work of others. As the number of students in these courses is often high, it can be very difficult to detect this plagiarism. The authors have developed a package which will allow programming assignments to be submitted online, and which includes software to assist in detecting possible instances of plagiarism. In this paper, they discuss the concerns that motivated this work, describe the developed software, tailoring the software to different requirements and finally consider its implications for large group teaching},
author = {Joy, M and Luck, M},
doi = {10.1109/13.762946},
file = {:C$\backslash$:/Users/matnovak/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/1999 - Joy, Luck - Plagiarism in programming assignments.pdf:pdf},
issn = {00189359},
journal = {IEEE Transactions on Education},
keywords = {co,computer science education,programming,teaching},
month = {may},
number = {2},
pages = {129--133},
title = {{Plagiarism in programming assignments}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=762946 http://ieeexplore.ieee.org/document/762946/},
volume = {42},
year = {1999}
}
@article{Kaya2015363,
abstract = {In this study, an online compiler and a source code plagiarism detection tool have been included into the Moodle based distance education system of our Computer Engineering department. For this purpose Moodle system has been extended with the GCC compiler, and the Moss source code plagiarism detection tool. We observed that using the online compiler and the plagiarism detection tool reduces time and effort needed for the assessment of the programming assignments; prevents our students from plagiarism; and increases their success in their programming based Data Structures course. {\textcopyright} 2014 Wiley Periodicals, Inc.},
address = {Department of Computer Engineering, Faculty of Engineering and Natural SciencesAdana Science and Technology UniversityAdana01180Turkey},
annote = {From Duplicate 1 (Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy assessment of programming assignments - Kaya, M.a; {\"{O}}zel, S.A.b A)

From Duplicate 1 (Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy assessment of programming assignments - Kaya, M; {\"{O}}zel, S A)

Export Date: 23 February 2015

Article in Press

CODEN: CAPEE

Correspondence Address: {\"{O}}zel, S.A.; Department of Computer Engineering, Faculty of Engineering and Architecture{\c{C}}ukurova Universitemail: saozel@cu.edu.tr

From Duplicate 2 (Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy assessment of programming assignments - Kaya, M.a; {\"{O}}zel, S.A.b)

cited By 0

From Duplicate 2 (Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy assessment of programming assignments - Kaya, M.a; {\"{O}}zel, S.A.b)

cited By 0},
author = {Kaya, M{\"{u}}mine and {\"{O}}zel, Selma Ay≈üe},
doi = {10.1002/cae.21606},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Kaya, {\"{O}}zel - Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy as.pdf:pdf},
isbn = {10613773 (ISSN)},
issn = {10613773},
journal = {Computer Applications in Engineering Education},
keywords = {Computer engineering,Distance education,Distance education systems,Education,GCC,Inspection equipmen,Inspection equipment,Intellectual property,Moodle,Plagiarism detection,Program compilers,Programming assignments,Social networking (online),Source code plagiarisms,moodle},
language = {English},
month = {may},
number = {3},
pages = {363--373},
publisher = {John Wiley and Sons Inc.},
title = {{Integrating an online compiler and a plagiarism detection tool into the Moodle distance education system for easy assessment of programming assignments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84904272189{\&}partnerID=40{\&}md5=b45db0cc391ed3c9526b2f3d3792f678 http://www.scopus.com/inward/record.url?eid=2-s2.0-84927698383{\&}partnerID=40{\&}md5=e268ed3c6efabe70c4cacc8a654f2f34 http://doi.wiley.com/10.1002/},
volume = {23},
year = {2015}
}
@article{4781609,
abstract = {Student plagiarism is a major problem in universities worldwide. In this paper, we focus on plagiarism in answers to computer programming assignments, where students mix and/or modify one or more original solutions to obtain counterfeits. Although several software tools have been developed to help the tedious and time consuming task of detecting plagiarism, little has been done to assess their quality, because determining the real authorship of the whole submission corpus is practically impossible for markers. In this paper, we present a grammar evolution technique which generates benchmarks for testing plagiarism detection tools. Given a programming language, our technique generates a set of original solutions to an assignment, together with a set of plagiarisms of the former set which mimic the basic plagiarism techniques performed by students. The authorship of the submission corpus is predefined by the user, providing a base for the assessment and further comparison of copy-catching tools. We give empirical evidence of the suitability of our approach by studying the behavior of one advanced plagiarism detection tool (AC) on four benchmarks coded in APL2, generated with our technique.},
annote = {From Duplicate 2 (Towards the validation of plagiarism detection tools by means of grammar evolution - Cebri{\'{a}}n, Manuel; Alfonseca, Manuel; Ortega, Alfonso; Cebrian, M; Alfonseca, Manuel; Ortega, Alfonso)

From Duplicate 2 (Towards the validation of plagiarism detection tools by means of grammar evolution - Cebri{\'{a}}n, Manuel; Alfonseca, Manuel; Ortega, Alfonso)

From Duplicate 1 (Towards the validation of plagiarism detection tools by means of grammar evolution - Cebri{\'{a}}n, M.a; Alfonseca, M.b; Ortega, A.b)

cited By 5},
author = {Cebrian, M and Alfonseca, Manuel and Ortega, Alfonso},
doi = {10.1109/TEVC.2008.2008797},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Cebrian, Alfonseca, Ortega - Towards the Validation of Plagiarism Detection Tools by Means of Grammar Evolution.pdf:pdf},
issn = {1941-0026},
journal = {IEEE Transactions on Evolutionary Computation},
keywords = {Automatic programming,Computer science education,Educational technology,Genetic algorithms,authoring systems,authorship,automatic programming,computer programming assignment,computer science education,copy-catching tool,counterfeit,educational technology,genetic algorithms,gramm,grammar evolution,grammars,plagiarism detection tool,programming language,programming languages,software tool,student plagiarism},
month = {jun},
number = {3},
pages = {477--485},
title = {{Towards the Validation of Plagiarism Detection Tools by Means of Grammar Evolution}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-67650188577{\&}partnerID=40{\&}md5=19730006297d9772c000d2e7d4192a41 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4781609 http://ieeexplore.ieee.org/document/4781609/},
volume = {13},
year = {2009}
}
@inproceedings{Luquini2011,
abstract = {This paper describes a classroom experiment in which detected cases of programming plagiarism were correlated with the classroom's social network. The results suggest that it is possible to understand the amount of similarity between artifacts as an indirect measure of the student social network. These findings imply that it is possible to uncover the classroom social network using only the source code produced by the students. The proposed method may be used as an instrument for considering and applying social techniques to improve student learning. This research is the first step in redefining the role of plagiarism detection in the programming assessment process as an effective learning intervention tool as opposed to a simple disciplinary procedure. {\textcopyright} 2011 IEEE.},
address = {S{\~{a}}o Paulo, Brazil},
annote = {From Duplicate 1 (Programming plagiarism as a social phenome - Luquini, E; Omar, N)

Conference code: 85112

Export Date: 23 February 2015

Correspondence Address: Luquini, E.; Information System Dep., Faculdade M{\'{o}}dulo, S{\~{a}}o Paulo, Brazil

References: (2008) Computer Science Curriculum 2008: An Interim Revision of CS 2001 December, , ACM/ IEEE; 
Information technology (2008) Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, , ACM;
Leblanc, R., Software engineering (2004) Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering, , ACM and IEEE Computer Society, August 2004;
Gorgonne, J.T., Davis, G.B., Valacich, J.S., Topi, H., Feinstein, D.L., Longnecker Jr., H.E., (2003) IS 2002: Model Curriculum and Guidelines for Undergraduate Degree Programs in Information Systems;
Denning, P.J., McGettrick, A., (2005) Recentering Computer Science., 48 (11), pp. 15-19. , ACM;
Bennedsen, J., Caspersen, M.E., Assessing process and product - A practical lab exam for an introductory programming course (2006) 36th Annual Frontiers in Education Conference, San Diego, USA, , Submitted for;
Lu, J.J., Fletcher, G.H., Thinking about computational thinking Proceedings of the 40th ACM Technical Symposium on Computer Science Education, pp. 260-264. , ACM, New York, NY;
Caspersen, M., Rolling, M., (2009) STREAM: A First Programming Process, , ACM;
Denning, P.J., (2008) The Profession of IT Voices of Computing, 51 (8), pp. 19-21. , ACM;
Yardi, S., Bruckman, A., What is computing?: Bridging the gap between teenagers' perceptions and graduate students' experiences (2007) Third International Computing Education Research Workshop, ICER'07, pp. 39-50. , DOI 10.1145/1288580.1288586, Third International Computing Education Research Workshop, ICER'07;
Bennedsen, J., Caspersen, M.E., (2007) Failure Rates in Introductory Programming;
McGettrick, A., Boyle, R., Ibbett, R., Lloyd, J., Lovegrove, G., Mander, K., Grand challenges in computing: Education - A summary (2005) Computer Journal, 48 (1), pp. 42-48. , DOI 10.1093/comjnl/bxh064;
R{\'{a}}taia, Z., Juh{\'{a}}szb, R., Adorj{\'{a}}nia, A.R., On the role of senses in education (2008) Computers {\&} Education, 51 (4), pp. 1707-1717;
Sheard, J., Hamilton, M.S., L{\"{o}}nnberg, J., Analysis of research into the teaching and learning of programming (2009) International Computing Education Research Workshop, , ACM;
Lister, R., Computer science teachers as amateurs, students and researchers (2005) Proceedings of the 5th Baltic Sea Conference on Computing Education Research, Finland, pp. 3-12;
Pears, A., Seidman, S., Malmi, L., Mannila, L., Adams, E., Bennedsen, J., Devlin, M., Paterson, J., A survey of literature on the teaching of introductory programming (2007) SIGCSE Bulletin ACM, 13 (2). , New York - USA;
Winslow, L.E., Programming pedagogy - A psychological overview (1996) SIGCSE Bulletin, 28 (3);
Truong, N., Bancroft, P., Roe, P., ELP - A web environment for learning to program (2002) Proc. The 19th Annual Conference of the Australasian Society for Computers in Learning in Tertiary Education, 19, pp. 661-670. , Auckland,New Zealand;
Cheang, B., Rurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Computers and Education, 41, pp. 121-131;
Brito, M.A., Sa-Soares, F., (2010) Computer Programming: Fail Fast to Learn Sooner, , Springer Berlin Heidelberg;
Fetaji, M., Loskovska, S., Fetaji, B., Ebibi, M., Combining virtual learning environment and integrated development environment to enhance elearning (2007) Proceeding of the International Conference on Information Technology Interfaces, , Croatia, June 25-28, 2007;
Phuong, D.T.D., Shimakawa, H., Collaborative learning environment to improve novice programmer with convincing opinions (2008) WSEAS Transactions on Advances in Engineering Education, 5 (9), pp. 635-644;
Rane-Sharma, A., Sharma, C., Raman, R.R.V.S., Sasikumar, M., A methodology for enhancing programming competence of students using Parikshak (2010) Technology for Education (T4E), 2010 International Conference on, pp. 24-31. , 1-3 July;
Haghighi, P.D., Sheard, J., Summative computer programming assessment using both paper and computer (2005) Proceeding of the 2005 Conference on Towards Sustainable and Scalable Educational Innovations Informed by the Learning Sciences: Sharing Good Practices of Research, Experimentation and Innovation, pp. 67-75. , Chee-Rit Looi, David Jonassen, and Mitsuru Ikeda (Eds.). IOS Press, Amsterdam, The Netherlands, The Netherlands;
Medley, D.M., On-line finals for CS 1 and CS2 (1998) ITiCSE '98, in SIGCSE Bulletin, 30 (3). , Dublin, Ireland (August);
Califf, M.E., Goodwin, M., Testing skills and knowledge: Introducing a laboratory exam in CS1 (2002) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), pp. 217-221;
Jacobson, N., Using on-computer exams to ensure beginning students' programming competency (2000) ACM SIGCSE Bulletin, 32 (4), pp. 53-56;
Barros, J.P., Estevens, L., Dias, R., Pais, R., Soeiro, E., Using lab exams to ensure programming practice in an introductory programming course (2003) Proceedings of the 8th Annual Conference on Innovation and Technology in Computer Science Education, pp. 16-20. , ACM;
Daly, C., Waldron, J., Assessing the assessment of programming ability (2004) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 36 (1), pp. 210-213. , DOI 10.1145/1028174.971375, inroads - SIGCSE Bulletin - Proceedings of the Thirty-Fifth SIGCSE Technical Symposium on Computer Science Education;
Ala-Mutka, R., J{\"{a}}rvinen, H.-M., Assessment process for programming assignments (2004) Proceedings of the IEEE International Conference on Advanced Learning Technologies (ICALT'04);
Garcia-Mateos, G., Fernandez-Al{\'{e}}man, J.L., Make learning fun with programming contests (2009) Transactions on Edutainment II, Lecture Notes in Computer Science, 5660, pp. 246-257. , Springer-Verlag;
Romli, R., Sulaiman, S., Zamli, K.Z., Automatic programming assessment and test data generation a review on its approaches (2010) Information Technology (ITSim), 2010 International Symposium in, 3, pp. 1186-1192. , 15-17 June;
Douce, C., Livingstone, D., Orwell, J., Automatic test-based assessment of programming: A review (2005) J. Educ. Resour. Comput., 5 (3), p. 2005. , Article 4 (September);
Hwang, C.J., Gibson, E.D., Using an effective grading method for preventing plagiarism of programming assignments (1982) ACM SIGCSE Bulletin, (14);
Rosales, F., Garcia, A., Rodriguez, S., Pedraza, J.L., Mendez, R., Nieto, M.M., Detection of plagiarism in programming assignments (2008) IEEE Transactions on Education, 51 (2), pp. 174-183. , DOI 10.1109/TE.2007.906778, Special Issue on Plagiarism;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on IT students' propensity to cheat (2003) Proceedings of the Fifth Australasian Conference on Computing Education, , Australina Computer Society;
Zobel, J., Hamilton, M., Managing student plagiarism in large academic departments (2002) Australian University Review, 45 (2), pp. 23-30;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source Code Plagiarism in UK HE Computing Schools, , Issues, Attitudes and Tools, South Bank University Technical Report SBU-CISM-01-02;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Joyce, D., Harding, T., Laxer, C., Addressing student cheating: Definitions and solutions (2003) SIGCSE Bull, ACM, 35 (2), pp. 172-184;
Dey, S., Sobhan, A., Impact of unethical practices of plagiarism on learning, teaching and research in higher education: Some combating strategies (2006) 7th International Conference on Information Technology Based Higher Education and Training, pp. 388-393;
Devlin, M., Gray, K., In their own words: A qualitative study of the reasons Australian university students plagiarize (2007) Higher Education Research {\&} Development, 26 (2), pp. 181-198;
Naude, E., H{\"{o}}rne, T., Cheating or collaborative work: Does it pay? (2006) Issues in Informing Science and Information Technology, (3), pp. 459-466;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of software plagiarism by program dependence graph analysis (2006) Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2006, pp. 872-881. , KDD 2006: Proceedings of the Twelfth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining;
Freire, M., Visualizing program similarity in the Ac plagiarism detection system (2008) Proceedings of the Working Conference on Advanced Visual Interfaces, pp. 404-407. , ACM;
Stein, B., Koppel, M., Stamatatos, E., Plagiarism analysis, authorship identication,and near-duplicate detection pan'07 (2007) SIGIR Forum, 41 (2), pp. 68-71;
Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Science of Computer Programming, 74, p. 7;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with jplag java (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Bowyer, K.W., Hall, L.O., Experience using MOSS" to detect cheating on programming assignments (1999) Frontiers in Education Conference, 3, pp. 13B3/18-13B3/22;
Ohno, A., Murao, H., A quantification of students coding style utilizing hmm based coding models for in-class source code plagiarism detection (2008) Proceedings of the 2008 3rd International Conference on Innovative Computing Information and Control, ICICIC, , IEEE Computer Society;
Yadin, A., Or-Bach, R., Fostering individual learning: When and how (2008) SIGCSE Bull, ACM, 40 (4), pp. 83-86;
Carroll, J., Appleton, J., Plagiarism a good practice guide (2001) JISC Report;
Niezgoda, S., Way, T.P., SNITCH: A software tool for detecting cut and paste plagiarism (2006) Proceedings of the 37th SIGCSE Technical Symposium on Computer Science Education - SIGCSE ' 06, ACM, pp. 51-55;
Vamplew, P., Dermoudy, J., An anti-plagiarism editor for software development courses (2005) Proceedings of the 7th Australasian Conference on Computing Education, Australian Computer Society, 42;
Frantzeskou, G., Gritzalis, S., MacDonell, S., Source code authorship analysis for supporting the cybercrime investigation process (2004) Proceedings of the First International Conference on E-business and Telecommunication Networks, pp. 85-92. , Kluwer Academic Publishers;
Stamatatos, E., A survey of modern authorship attribution methods (2009) Journal of the American Society for Information Science and Technology, 60 (3), pp. 538-556;
Harris, J.K., Plagiarism in computer science courses (1994) Proceedings of the Conference on Ethics in the Computer Age, ACM, pp. 133-135;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Transactions of Education, 42 (2), pp. 129-133;
Sraka, D., Kaucic, B., Source code plagiarism Information Technology Interfaces (2009) ITI '09. Proceedings of the ITI 2009 31st International Conference on 2009, pp. 461-466;
Brandt, S., Copyright's (not so) little cousin, plagiarism (2002) Computers in Libraries, 22 (5), pp. 39-41;
Rudolph, H., Radcliff, P.J., Anti-plagiarism: A weapon of mass self delusion? (2007) Proceedings of the 2007 AAEE Conference;
Garcia, S.K., Shin, E., Incorporating social network analysis into traditional OD interventions (2008) OD Practitioner, 40 (1), pp. 17-24;
Dawson, S., A study of the relationship between student social networks and sense of community (2008) Educational Technology {\&} Society, 11 (3), pp. 224-238;
Sarma, A., MacCherone, L., Wagstrom, P., Herbsleb, J., Tesseract: Interactive visual exploration of socio-technical relationships in software development (2009) International Conference on Software Engineering, pp. 23-33;
Hubert, L., Schultz, J., Quadratic assignment as a general data analysis strategy (1976) Br. J. Math. Stat. Psychol., 29, pp. 190-241;
Tan, T.S., Cheung, W.S., Effects of computer collaborative group work on peer acceptance of a junior pupil with attention deficit hyperactivity disorder (ADHD) (2008) Computers and Education, 50 (3), pp. 725-741. , DOI 10.1016/j.compedu.2006.08.005, PII S0360131506001230;
Kanda, T., Sato, R., Saiwaki, N., Ishiguro, H., A two-month field trial in an elementary school for long-term human-robot interaction (2007) IEEE Transactions on Robotics, 23 (5), pp. 962-971. , DOI 10.1109/TRO.2007.904904, Special Issue on Human-Robot Interaction;
Mart{\'{i}}nez-Mon{\'{e}}s, A., Dimitriadis, Y., Rubia-Avi, B., G{\'{o}}mez-S{\'{a}}nchez, E., Fuente-Redondo, P., Combining qualitative evaluation and social network analysis for the study of classroom social interactions (2003) Computers and Education, 41 (4), pp. 353-368;
Churchill, E.F., Halverson, C.A., Social networks and social networking (2005) IEEE Internet Computing, 9 (5), pp. 14-19. , DOI 10.1109/MIC.2005.103;
Deerwester, S., Dumais, S.T., Furnas, G.W., Landauer, T.K., Harshman, R., Indexing by latent semantic analysis (1990) Journal of the American Society for Information Science;
Nakov, P., Latent semantic analysis of textual data (2000) Proceedings of the Conference on Computer Systems and Technologies, Eds. CompSysTech '00, ACM, pp. 5031-5035;
Grant, S., Cordy, J.R., Vector space analysis of software clones (2009) Proc. ICPC 2009, 17th IEEE International Conference on Program Comprehension, pp. 233-237;
Kontostathis, A., Pottenger, W.M., Essential Dimensions of Latent Semantic Indexing (EDLSI) (2007) Proc. 40th Annual Hawaii Intl. Conf. on System Sciences (CDROM);
Kuhn, A., Ducasse, S., Girba, T., Semantic clustering: Identifying topics in source code (2006) Information and Software Technology;
Huisman, M., Van Duijn, M.A.J., Software for statistical analysis of social networks (2005) Models and Methods in Social Network Analysis, pp. 270-316. , Cambridge University Press
A4 - Greater Amman Municipality; JC Bank

From Duplicate 2 (Programming plagiarism as a social phenomenon - Luquini, E; Omar, N)

From Duplicate 1 (Programming plagiarism as a social phenome - Luquini, E; Omar, N)

Conference code: 85112

Export Date: 23 February 2015

Correspondence Address: Luquini, E.; Information System Dep., Faculdade M{\'{o}}dulo, S{\~{a}}o Paulo, Brazil

References: (2008) Computer Science Curriculum 2008: An Interim Revision of CS 2001 December, , ACM/ IEEE; 
Information technology (2008) Curriculum Guidelines for Undergraduate Degree Programs in Information Technology, , ACM;
Leblanc, R., Software engineering (2004) Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering, , ACM and IEEE Computer Society, August 2004;
Gorgonne, J.T., Davis, G.B., Valacich, J.S., Topi, H., Feinstein, D.L., Longnecker Jr., H.E., (2003) IS 2002: Model Curriculum and Guidelines for Undergraduate Degree Programs in Information Systems;
Denning, P.J., McGettrick, A., (2005) Recentering Computer Science., 48 (11), pp. 15-19. , ACM;
Bennedsen, J., Caspersen, M.E., Assessing process and product - A practical lab exam for an introductory programming course (2006) 36th Annual Frontiers in Education Conference, San Diego, USA, , Submitted for;
Lu, J.J., Fletcher, G.H., Thinking about computational thinking Proceedings of the 40th ACM Technical Symposium on Computer Science Education, pp. 260-264. , ACM, New York, NY;
Caspersen, M., Rolling, M., (2009) STREAM: A First Programming Process, , ACM;
Denning, P.J., (2008) The Profession of IT Voices of Computing, 51 (8), pp. 19-21. , ACM;
Yardi, S., Bruckman, A., What is computing?: Bridging the gap between teenagers' perceptions and graduate students' experiences (2007) Third International Computing Education Research Workshop, ICER'07, pp. 39-50. , DOI 10.1145/1288580.1288586, Third International Computing Education Research Workshop, ICER'07;
Bennedsen, J., Caspersen, M.E., (2007) Failure Rates in Introductory Programming;
McGettrick, A., Boyle, R., Ibbett, R., Lloyd, J., Lovegrove, G., Mander, K., Grand challenges in computing: Education - A summary (2005) Computer Journal, 48 (1), pp. 42-48. , DOI 10.1093/comjnl/bxh064;
R{\'{a}}taia, Z., Juh{\'{a}}szb, R., Adorj{\'{a}}nia, A.R., On the role of senses in education (2008) Computers {\&} Education, 51 (4), pp. 1707-1717;
Sheard, J., Hamilton, M.S., L{\"{o}}nnberg, J., Analysis of research into the teaching and learning of programming (2009) International Computing Education Research Workshop, , ACM;
Lister, R., Computer science teachers as amateurs, students and researchers (2005) Proceedings of the 5th Baltic Sea Conference on Computing Education Research, Finland, pp. 3-12;
Pears, A., Seidman, S., Malmi, L., Mannila, L., Adams, E., Bennedsen, J., Devlin, M., Paterson, J., A survey of literature on the teaching of introductory programming (2007) SIGCSE Bulletin ACM, 13 (2). , New York - USA;
Winslow, L.E., Programming pedagogy - A psychological overview (1996) SIGCSE Bulletin, 28 (3);
Truong, N., Bancroft, P., Roe, P., ELP - A web environment for learning to program (2002) Proc. The 19th Annual Conference of the Australasian Society for Computers in Learning in Tertiary Education, 19, pp. 661-670. , Auckland,New Zealand;
Cheang, B., Rurnia, A., Lim, A., Oon, W.-C., On automated grading of programming assignments in an academic institution (2003) Computers and Education, 41, pp. 121-131;
Brito, M.A., Sa-Soares, F., (2010) Computer Programming: Fail Fast to Learn Sooner, , Springer Berlin Heidelberg;
Fetaji, M., Loskovska, S., Fetaji, B., Ebibi, M., Combining virtual learning environment and integrated development environment to enhance elearning (2007) Proceeding of the International Conference on Information Technology Interfaces, , Croatia, June 25-28, 2007;
Phuong, D.T.D., Shimakawa, H., Collaborative learning environment to improve novice programmer with convincing opinions (2008) WSEAS Transactions on Advances in Engineering Education, 5 (9), pp. 635-644;
Rane-Sharma, A., Sharma, C., Raman, R.R.V.S., Sasikumar, M., A methodology for enhancing programming competence of students using Parikshak (2010) Technology for Education (T4E), 2010 International Conference on, pp. 24-31. , 1-3 July;
Haghighi, P.D., Sheard, J., Summative computer programming assessment using both paper and computer (2005) Proceeding of the 2005 Conference on Towards Sustainable and Scalable Educational Innovations Informed by the Learning Sciences: Sharing Good Practices of Research, Experimentation and Innovation, pp. 67-75. , Chee-Rit Looi, David Jonassen, and Mitsuru Ikeda (Eds.). IOS Press, Amsterdam, The Netherlands, The Netherlands;
Medley, D.M., On-line finals for CS 1 and CS2 (1998) ITiCSE '98, in SIGCSE Bulletin, 30 (3). , Dublin, Ireland (August);
Califf, M.E., Goodwin, M., Testing skills and knowledge: Introducing a laboratory exam in CS1 (2002) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), pp. 217-221;
Jacobson, N., Using on-computer exams to ensure beginning students' programming competency (2000) ACM SIGCSE Bulletin, 32 (4), pp. 53-56;
Barros, J.P., Estevens, L., Dias, R., Pais, R., Soeiro, E., Using lab exams to ensure programming practice in an introductory programming course (2003) Proceedings of the 8th Annual Conference on Innovation and Technology in Computer Science Education, pp. 16-20. , ACM;
Daly, C., Waldron, J., Assessing the assessment of programming ability (2004) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 36 (1), pp. 210-213. , DOI 10.1145/1028174.971375, inroads - SIGCSE Bulletin - Proceedings of the Thirty-Fifth SIGCSE Technical Symposium on Computer Science Education;
Ala-Mutka, R., J{\"{a}}rvinen, H.-M., Assessment process for programming assignments (2004) Proceedings of the IEEE International Conference on Advanced Learning Technologies (ICALT'04);
Garcia-Mateos, G., Fernandez-Al{\'{e}}man, J.L., Make learning fun with programming contests (2009) Transactions on Edutainment II, Lecture Notes in Computer Science, 5660, pp. 246-257. , Springer-Verlag;
Romli, R., Sulaiman, S., Zamli, K.Z., Automatic programming assessment and test data generation a review on its approaches (2010) Information Technology (ITSim), 2010 International Symposium in, 3, pp. 1186-1192. , 15-17 June;
Douce, C., Livingstone, D., Orwell, J., Automatic test-based assessment of programming: A review (2005) J. Educ. Resour. Comput., 5 (3), p. 2005. , Article 4 (September);
Hwang, C.J., Gibson, E.D., Using an effective grading method for preventing plagiarism of programming assignments (1982) ACM SIGCSE Bulletin, (14);
Rosales, F., Garcia, A., Rodriguez, S., Pedraza, J.L., Mendez, R., Nieto, M.M., Detection of plagiarism in programming assignments (2008) IEEE Transactions on Education, 51 (2), pp. 174-183. , DOI 10.1109/TE.2007.906778, Special Issue on Plagiarism;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on IT students' propensity to cheat (2003) Proceedings of the Fifth Australasian Conference on Computing Education, , Australina Computer Society;
Zobel, J., Hamilton, M., Managing student plagiarism in large academic departments (2002) Australian University Review, 45 (2), pp. 23-30;
Culwin, F.,},
author = {Luquini, Evandro and Omar, Nizam},
booktitle = {IEEE Global Engineering Education Conference},
doi = {10.1109/EDUCON.2011.5773251},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Luquini, Omar - Programming plagiarism as a social phenomenon.pdf:pdf},
isbn = {978-1-61284-642-2},
keywords = {Assessment process,Disciplinary procedures,Effective learning,Engineering education,Indirect measure,Plagiarism detection,School buildings,Social Networks,Source codes,Student learning,Students,Teaching,Technical presentations,automatic plagiarism detection,classro,computer science education,programming assessment,programming plagiarism,social network,social sciences},
language = {English},
month = {apr},
pages = {895--902},
publisher = {IEEE},
title = {{Programming plagiarism as a social phenomenon}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79960246237{\&}partnerID=40{\&}md5=2f954872cdd606b24e350a15aedad2fc http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5773251 http://ieeexplore.ieee.org/document/5773251/},
year = {2011}
}
@inproceedings{Zakova2013a,
abstract = {The paper is devoted to the presentation of an application detecting similarities in shorter program codes. It helps to reveal plagiarism wide-spread among students. The application is available online. It enables to share information among several teachers and their reciprocal cooperation.},
address = {Bratislava, Slovakia},
annote = {From Duplicate 1 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -

From Duplicate 3 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P; {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -

From Duplicate 2 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P; {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -

From Duplicate 2 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -

From Duplicate 3 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P; {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -

From Duplicate 2 (Online tool for student's source code plagiarism detection - Zakova, K; Pistej, J; Bistak, P; {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

From Duplicate 1 (Online tool for student's source code plagiarism detection - {\v{Z}}{\'{a}}kov{\'{a}}, K; Pi{\v{s}}tej, J; Bist{\'{a}}k, P)

Conference code: 103398

Export Date: 23 February 2015

Correspondence Address: {\v{Z}}{\'{a}}kov{\'{a}}, K.; Faculty of Electrical Engineering and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: katarina.zakova@stuba.sk

References: Torry, H., Another german minister felled by plagiarism claims (2013) The Wall Street Journal, WSJ Blogs, , http://blogs.wsj.com/eurocrisis/2013/02/11/anothergerman-minister-felled- by-plagiarism-claims, 11 February, Online; 
(2013) German Education Minister Quits over PhD Plagiarism, , http://www.theguardian.com/world/2013/feb/09/german-education-minister- quits-phd-plagiarism, 9 Feb., Online;
Hansen, B., Combating plagiarism (2003) CQ Researcher, 13 (32), pp. 773-796. , September;
Maurer, H., Kappe, F., Zaka, B., Plagiarism : A survey (2006) Journal of Universal Computer Science, 12 (8);
Antiplag System, , http://www.svop.sk/en/antiplag.aspx/,accessed2.10.2013, Online;
Chuda, D., Navrat, P., Kovacova, B., Humay, P., The Issue of (Software) Plagiarism: A Student View (2012) IEEE Transactions on Education, 55 (1). , February;
Huba, M., Tap{\'{a}}k, P., Developing E-course robust constrained PID Control (2011) International Journal of Emerging Technologies in Learning, 6 (2), pp. 27-30. , special issue;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2);
Pi{\v{s}}tej, J., (2013) Online Detection of Program Based Assignments, , Bachelor Thesis, Slovak University of Technology in Bratislava, in Slovak;
James, R., Mcinnis, C., Devlin, M., (2002) Assessing Learning in Australian Universities, , Centre for the Study of Higher Education at the University of Melbourne and Australian Universities Teaching Committee, Australia;
Plagiarism Detection Software, , http://www.cshe.unimelb.edu.au/assessinglearning/docs/PlagSoftware.pdf, Australian Universities Teaching Committee, ", ", accessed at;
Bull, J., Collins, C., Coughlin, E., Sharp, D., Technical Review of Plagiarism: Detection Software Report, , Computer Assisted Assessment Centre, University of Luton, UK;
Hage, J., Rademaker, P., Vugt, N.V., A comparison of plagiarism detection tools (2010) Technical Report UU-CS-2010-015, , Department of Information and Computing Sciences, Utrecht University, Utrecht, The Netherlands, June;
Gen{\v{c}}i, J., Mata{\v{s}}ovsk{\'{A}}, M., Plo{\v{c}}ica, O., Telepovsk{\'{A}}, H., Plagiarism and ways of its restriction (2009) Int. Conf. on University Information Systems - UNINFOS, , Nitra, November, in Slovak;
(2012) CopyTracker, , http://plagiat.ec-lille.fr, Online;
WCopyfind, , http://plagiarism.bloomfieldmedia.com/z-wordpress/software/wcopyfind/, Online;
Sherlock, , http://sydney.edu.au/engineering/it/{\~{}}scilect/sherlock/, Online accessed 21.10.2012;
SIM, , http://dickgrune.com/Programs/similarity{\_}tester/sim.pdf, Online accessed 3.9.2013;
Grune, D., Huntjens, M., Detecting copied submissions in computer science workshops (1989) Informatie, 31 (11), pp. 864-867. , Nov, in Dutch
A4 -},
author = {Zakova, K and Pistej, J and Bistak, P},
booktitle = {IEEE 11th International Conference on Emerging eLearning Technologies and Applications},
doi = {10.1109/ICETA.2013.6674469},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Zakova, Pistej, Bistak - Online tool for student's source code plagiarism detection.pdf:pdf},
isbn = {978-1-4799-2162-1},
keywords = {Application programs,Intellectual property,On-line tools,Program code,Source code plagiarisms,computer crime,computer science education,software},
language = {English},
month = {oct},
pages = {415--419},
publisher = {IEEE},
title = {{Online tool for student's source code plagiarism detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84896933652{\&}partnerID=40{\&}md5=f47af19578d6b9385cb1f7983731514c http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6674469 http://ieeexplore.ieee.org/document/6674469/},
year = {2013}
}
@article{Anjali2015749,
abstract = {This paper presents a novel dynamic analysis approach to software plagiarism detection. Such an approach is inherently more resilient to code obfuscation techniques such as renaming of program entities, reordering of statements, etc. We develop our technique in the context of a dynamic analysis and visualization system for Java, called JIVE, but the techniques are applicable to other object-oriented languages. Our analyses are based on the execution traces of Java programs (produced by JIVE), and our experimental results confirm that this approach is both efficient and effective in detecting plagiarism of Java programs when their source codes are not available. {\textcopyright} 2015 Published by Elsevier B.V.},
annote = {From Duplicate 1 (Plagiarism Detection for Java Programs without Source Codes - Anjali, V.a; Swapna, T.R.a; Jayaraman, Bharat)

cited By 0; Conference of International Conference on Information and Communication Technologies, ICICT 2014 ; Conference Date: 3 December 2014 Through 5 December 2014; Conference Code:112270

From Duplicate 2 (Plagiarism Detection for Java Programs without Source Codes - Anjali, V; Swapna, T R; Jayaraman, Bharat)

Proceedings of the International Conference on Information and Communication Technologies, {\{}ICICT{\}} 2014, 3-5 December 2014 at Bolgatty Palace {\&} Island Resort, Kochi, India},
author = {Anjali, V.a and Swapna, T.R. and Jayaraman, Bharat},
doi = {10.1016/j.procs.2015.02.143},
editor = {{Elayidom M.S. Samuel P.}, James R K Raj S Paul B},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Anjali, Swapna, Jayaraman - Plagiarism Detection for Java Programs without Source Codes.pdf:pdf},
issn = {18770509},
journal = {Procedia Computer Science},
keywords = {Software plagiarism,call trees,dynamic analysis,key variables},
pages = {749--758},
publisher = {Elsevier},
title = {{Plagiarism Detection for Java Programs without Source Codes}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84931464286{\&}partnerID=40{\&}md5=792b6378942267e9c81f82de9a053ca1 http://linkinghub.elsevier.com/retrieve/pii/S1877050915002070 http://www.sciencedirect.com/science/article/pii/S1877050915002070},
volume = {46},
year = {2015}
}
@inproceedings{Pohuba2014,
abstract = {This paper introduces a system for automatic evaluation of correctness and originality of source codes submitted by students enrolled in courses dealing with computer programming. Automatic correctness checking consists of searching for plagiarisms in assignments submitted earlier and checking the correct implementation of algorithms. User interface is implemented as a Moodle module using its Plagiarism API. The complete system is published with GPLv3 license; therefore other learning institutions can use it as well. {\textcopyright} 2014 IEEE.},
address = {Zlin, Czech Republic},
annote = {Conference code: 107184

Export Date: 23 February 2015

References: http://docs.moodle.org/dev/PlagiarismAPI, Moodle.org. Plagiarism API [online]. 2006 [cit. 2014-02-18].Available at zhttp://luggage.bcs.uwa.edu.au/-michaelwIYAP.Html, Plagiarism Detection-YAP. Plagiarism Detection-YAP [ online]. 1996 [cit. 2014-01-09]. Available atA4 - Estonian Doctoral School in ICT; National Instruments - LabVIEW},
author = {Pohuba, Daniel and Dulik, Tomas and Janku, Peter},
booktitle = {10th European Workshop on Microelectronics Education},
doi = {10.1109/EWME.2014.6877393},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Pohuba, Dulik, Janku - Automatic evaluation of correctness and originality of source codes.pdf:pdf},
isbn = {978-1-4799-4016-5},
keywords = {Automatic evaluation,Complete system,Computer programming languages,Education,Intellectual property,Microelectronics,Moodle,Source codes,User interfaces,automatic checking,plagiarism,source code},
language = {English},
month = {may},
pages = {49--52},
publisher = {IEEE},
title = {{Automatic evaluation of correctness and originality of source codes}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84906761808{\&}partnerID=40{\&}md5=250b774a9a1ff54215c09c7dea641c49 http://ieeexplore.ieee.org/document/6877393/},
year = {2014}
}
@inproceedings{Kaucic2010,
abstract = {Plagiarism is a well known problem of today's society. Widespread of the internet, ease of data exchange, Bologna reforms and individual circumstances influence on students to resort to plagiarism. Many courses in computer science where students have programming assignments suffer from so called source code plagiarism. Beside the internet, most common origins of solved assignments are fellow students from the same or the previous generation. In this paper the source code plagiarism is discussed. Main results from observing the plagiarism in programming assignments are given showing to which extent students plagiarize.},
address = {Ljubljana, Slovenia},
annote = {Conference code: 81593

Export Date: 23 February 2015

Correspondence Address: Kau{\v{c}}i{\v{c}}, B.; Department of Mathematics and Computer Science, Faculty of Education, University of Ljubljana, Kardeljeva Plo{\v{s}}{\v{c}}ad 16, Ljubljana, Slovenia; email: branko.kaucic@pef.uni-lj.si

References: Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-licensed source code plagiarism detection engine for Java exercises (2006) Proceedings of the 6th Baltic Sea Conference on Computing Education Research: Koli Calling 2006, pp. 141-142. , ACM; 
Austin, M., Brown, L., Internet plagiarism: Developing strategies to curb student academic dishonesty (1999) The Internet and Higher Education, 2 (1), pp. 21-33;
Baggaley, J., Spencer, B., The mind of a plagiarist (2005) Learning, Media {\&} Technology, 30 (1), pp. 55-62;
Bennett, R., Factors associated with student plagiarism in a post-1992 university (2005) Assessment {\&} Evaluation in Higher Education, 30 (2), pp. 137-162;
Bowyer, K.W., Hall, O.L., Experience Using "MOSS" to Detect Cheating On Programming Assignments (1999) Frontiers in Education Conference, FIE '99, 29th Annual, pp. 18-22. , Puerto Rico;
Clough, P., Plagiarism in natural and programming languages: An overview of current tools and technologies (2000) Technical Report, Sheffield University, pp. 1-31;
Culwin, F., MacLeod, A., Lancaster, T., Source code plagiarism in UK HE computing schools, Issues, attitudes and tools (2001) Technical Report SBU-CISM-01-01, Joint Information Committee, pp. 1-34. , School of computing, information systems {\&} mathematics, South Bank University, London;
Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting similarity and plagiarism within a university programming environment (1987) Computers and Education, 11 (1), pp. 11-19;
Frantzeskou, G., Macdonell, S., Stamatatos, E., Gritzalis, S., Examining the significance of high-level programming features in source code author classification (2008) Journal of Systems and Software, 81 (3), pp. 447-460;
Hammond, M., Cyber plagiarism: Are FE students getting away with words (2004) Plagiarism: Prevention, Practice and Policies 2004 Conference, pp. 257-264. , Newcastle. Northumbria University Press;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;
Moussiades, L., Vakali, A., PDetect: A clustering approach for detecting plagiarism in source code datasets (2005) The Computer Journal, 48 (6), pp. 651-661;
Niggemann, O., (2001) Visual Data Mining of Graph-based Data, , PhD Thesis, Paderborn University, Paderborn;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99;
Prechlet, L., Malpohl, G., Philippsen, M., JPlag: Finding plagiarisms among a set of programs (2000) Technical Report 2000-1, Fakult{\"{a}}t fur Informatik, , Universit{\"{a}}t Karlsruhe, Karlsruhe;
Schiller, R.M., E-cheating: Electronic plagiarism (2005) Journal of the American Dietetic Association, 105 (7), pp. 1058-1062;
Sraka, D., Kau{\v{c}}i{\v{c}}, B., Source code plagiarism (2009) Proceedings of Information Technology Interfaces ITI2009, pp. 461-466. , Cavtat, Croatia;
Zeidman, R., Software source code correlation (2006) 5th IEEE/ACISInternational Conference on Computer and Information Science, 1st IEEE/ACIS International Workshop on Component-based Software Engineering, Software Architecture and Reuse (ICIS- COMSAR'06), , IEEE Computer Society},
author = {Kau{\v{c}}i{\v{c}}, B and Sraka, D and Rams«ék, M and Kra{\v{s}}na, M},
booktitle = {2nd International Conference on Computer Supported Education},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Kau{\v{c}}i{\v{c}} et al. - Observations on plagiarism in programming courses.pdf:pdf},
isbn = {9789896740238 (ISBN)},
keywords = {Computer programming,Data exchange,Internet,Plagiarism,Programming assignments,Programming course,Source code,Source code plagiarisms,Source codes,Students,Teaching,Teaching programming},
language = {English},
pages = {181--184},
title = {{Observations on plagiarism in programming courses}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77956357514{\&}partnerID=40{\&}md5=5f9862fdd4d21489ae058e307f50d593},
volume = {2},
year = {2010}
}
@inproceedings{Martins2014a,
abstract = {We illustrate the state of the art in software plagiarism detection tools by comparing their features and testing them against a wide range of source codes. The source codes were edited according to several types of plagiarism to show the tools accuracy at detecting each type. The decision to focus our research on plagiarism of programming languages is two fold: on one hand, it is a challenging case-study since programming languages impose a structured writing style; on the other hand, we are looking for the integration of such a tool in an Automatic-Grading System (AGS) developed to support teachers in the context of Programming courses. Besides the systematic characterisation of the underlying problem domain, the tools were surveyed with the objective of identifying the most successful approach in order to design the aimed plugin for our AGS. {\textcopyright} V{\'{i}}tor T. Martins, Daniela Fonte, Pedro Rangel Henriques, and Daniela da Cruz.},
address = {Gualtar, Portugal},
annote = {Conference code: 106818

Export Date: 23 February 2015

References: Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-licensed source code plagiarism detection engine for Java exercises (2006) Proceedings of 6th Koli Calling Intern. Conference on Comp. Ed. Research, pp. 141-142. , New York, USA, ACM; 
Baxter, I.D., Yahin, A., Moura, L., Sant'anna, M., Bier, L., Clone detection using abstract syntax trees (1998) Proceedings of IEEE ICSM 1998, pp. 368-377;
Bejarano, A.M., Garc{\'{i}}a, L.E., Zurek, E.E., Detection of source code similitude in academic environments (2013) Computer Applic. in Engineering Education;
Chong, M., Specia, L., Linguistic and statistical traits characterising plagiarism (2012) COLING 2012, pp. 195-204;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD;
Cosma, G., Joy, M., Towards a definition of source-code plagiarism (2008) IEEE Trans. on Educ., 51 (2), pp. 195-200. , May;
Cui, B., Li, J., Guo, T., Wang, J., Ma, D., Code comparison system based on abstract syntax tree (2010) 3rd IEEE IC-BNMT, pp. 668-673;
Fonte, D., Boas, I.V., Da Cruz, D., Gan{\c{c}}arski, A.L., Rangel Henriques, P., Program analysis and evaluation using quimera (2012) ICEIS'2012, pp. 209-219. , INSTICC, June;
Grozea, C., Popescu, M., Who's the thief? Automatic detection of the direction of plagiarism (2010) CICLing, pp. 700-710;
Grune, D., Huntjens, M., Het detecteren van kopie{\"{e}}n bij informatica-practica (1989) Informatie, 31 (11), pp. 864-867;
Hage, J., Rademaker, P., Van Vugt, N., (2010) A Comparison of Plagiarism Detection Tools, p. 28. , Utrecht University. Utrecht, The Netherlands;
Heckel, P., A technique for isolating differences between files (1978) Communications of the ACM, 21 (4), pp. 264-268;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. on Educ., 42 (2), pp. 129-133. , May;
Li, X., Jing Zhong, X., The source code plagiarism detection using AST (2010) International Symposium IPTC, pp. 406-408;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of software plagiarism by program dependence graph analysis (2006) Proceedings of the 12th ACM SIGKDD'06, pp. 872-881. , ACM Press;
Prechelt, L., Malpohl, G., Phlippsen, M., (2000) JPlag: Finding Plagiarisms among A Set of Programs, , Technical report, Fakult{\"{a}}t f{\"{u}}r Informatik, Universit{\"{a}}t Karlsruhe;
Schleimer, S., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD, pp. 76-85. , ACM Press;
Shay, I., Baer, N., Zeidman, R., Measuring whitespace patterns as an indication of plagiarism (2010) Proceedings of the ADFSL Conference, pp. 63-72;
Whale, G., Software metrics and plagiarism detection (1990) Journal of Systems and Software, 13 (2), pp. 131-138. , Special Issue on Using Software Metrics;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to plague'ing (1992) ACM SIGCSE Bulletin, 24, pp. 268-271. , ACM;
Wise, M.J., (1993) Running Karp-Rabin Matching and Greedy String Tiling, , Basser Dept. of Computer Science, University of Sydney, Sydney;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) SIGCSEB: SIGCSE Bulletin, pp. 130-134. , ACM Press;
Zeidman, R.M., (2003) Software Tool for Detecting Plagiarism in Computer Source Code
A4 - Computer Science and Technology Center (CCTC); Efacec; Polytechnic Institute of Braganca (IPB); Portuguese Foundation for Sci. and Technol. (FCT)},
author = {Martins, V T and Fonte, D and Henriques, P R and {Da Cruz}, D},
booktitle = {3rd Symposium on Languages, Applications and Technologies},
doi = {10.4230/OASIcs.SLATE.2014.143},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Martins et al. - Plagiarism detection A tool survey and comparison.pdf:pdf},
isbn = {21906807 (ISSN); 9783939897682 (ISBN)},
keywords = {Comparison,Computer software,Detection,Error detection,Grading,Intellectual property,Plagiarism,Plagiarism detection,Problem domain,Programming course,Slate,Software,Software plagiarisms,Software testing,State of the art,Structured writing,Surveys,Teaching,Test,Testing},
language = {English},
pages = {143--158},
publisher = {Schloss Dagstuhl- Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing},
title = {{Plagiarism detection: A tool survey and comparison}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84905664450{\&}partnerID=40{\&}md5=8d8e6eeca2c933d65d45820a8b4182c5},
volume = {38},
year = {2014}
}
@inproceedings{Menai2010,
abstract = {Similarity detection tools are nowadays commonly used by instructors to prevent student cheating and to enforce academic integrity. Systems identifying similarity in programming assignments are generally classified as either attribute-based or structure-based systems. Attribute-based methods make statistical analysis of the program attributes to detect lexical changes. Whereas structure-based methods complete a deeper analysis of the program structure to detect hidden structural similarities. Both methods can be useful for student programming assignments which consist generally of small to medium size source codes. In this paper, we introduce a method that encompasses both approaches to fit characteristics of student Java programming assignments. Similarities between pairs of programs can be detected by either profiling their source codes and measuring their distance or parsing them and comparing their encodings using a method inspired by DNA sequencing. We describe our experimental prototype, called CAPlag (Computing Assignment Plagiarism), and illustrate the results of some exploratory experiments. We demonstrate that our method is able to accurately find similarities in Java programs by comparing our results against those obtained with JPlag, a Web based service, and show that our system can be useful for instructors to deal with different programming assignment cases.},
address = {Riyadh, Saudi Arabia},
annote = {From Duplicate 1 (Similarity detection in Java programming assignments - El Bachir Menai, Mohamed; Al-Hassoun, Nailah Salah)

From Duplicate 1 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah; El Bachir Menai, M; Al-Hassoun, Nailah Salah)

From Duplicate 2 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah)

From Duplicate 1 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah)

Conference code: 82330

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Menai, M. E. B.; Department of Computer Science, CCIS - King Saud University, P.O. Box 51178, Riyadh 11543, Saudi Arabia; email: menai@ksu.edu.sa

References: Bowyer, W.K., Hall, O.L., Experience Using 'MOSS' to Detect Cheating on Programming Assignments (1999) Proc. 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22; 
Cannarozzi, G.M., (2005) String Alignment Using Dynamic Programming, , http://biorecipes.com/DynProgBasic/code.html;
Chen, X., Francia, B., Li, M., Mckinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Research Memoranda, Department of Computer Science, University of Sheffield, UK, Tech. Rep. CS-00-05;
Clough, P., (2003) Old and New Challenges in Automatic Plagiarism Detection, , Plagiarism Advisory Service, Department of Information Studies, University of Sheffield, UK;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.htm, March
A4 - Anhui University

From Duplicate 2 (Similarity detection in Java programming assignments - El Bachir Menai, M; Al-Hassoun, N S; Menai, M E B; Al-Hassoun, N S)

From Duplicate 1 (Similarity detection in Java programming assignments - Menai, M E B; Al-Hassoun, N S)

Conference code: 82330

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Menai, M. E. B.; Department of Computer Science, CCIS - King Saud University, P.O. Box 51178, Riyadh 11543, Saudi Arabia; email: menai@ksu.edu.sa

References: Bowyer, W.K., Hall, O.L., Experience Using 'MOSS' to Detect Cheating on Programming Assignments (1999) Proc. 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22; 
Cannarozzi, G.M., (2005) String Alignment Using Dynamic Programming, , http://biorecipes.com/DynProgBasic/code.html;
Chen, X., Francia, B., Li, M., Mckinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Research Memoranda, Department of Computer Science, University of Sheffield, UK, Tech. Rep. CS-00-05;
Clough, P., (2003) Old and New Challenges in Automatic Plagiarism Detection, , Plagiarism Advisory Service, Department of Information Studies, University of Sheffield, UK;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.htm, March
A4 - Anhui University

From Duplicate 3 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah)

Conference code: 82330

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Menai, M. E. B.; Department of Computer Science, CCIS - King Saud University, P.O. Box 51178, Riyadh 11543, Saudi Arabia; email: menai@ksu.edu.sa

References: Bowyer, W.K., Hall, O.L., Experience Using 'MOSS' to Detect Cheating on Programming Assignments (1999) Proc. 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22; 
Cannarozzi, G.M., (2005) String Alignment Using Dynamic Programming, , http://biorecipes.com/DynProgBasic/code.html;
Chen, X., Francia, B., Li, M., Mckinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Research Memoranda, Department of Computer Science, University of Sheffield, UK, Tech. Rep. CS-00-05;
Clough, P., (2003) Old and New Challenges in Automatic Plagiarism Detection, , Plagiarism Advisory Service, Department of Information Studies, University of Sheffield, UK;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.htm, March
A4 - Anhui University

From Duplicate 2 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah)

Conference code: 82330

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Menai, M. E. B.; Department of Computer Science, CCIS - King Saud University, P.O. Box 51178, Riyadh 11543, Saudi Arabia; email: menai@ksu.edu.sa

References: Bowyer, W.K., Hall, O.L., Experience Using 'MOSS' to Detect Cheating on Programming Assignments (1999) Proc. 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22; 
Cannarozzi, G.M., (2005) String Alignment Using Dynamic Programming, , http://biorecipes.com/DynProgBasic/code.html;
Chen, X., Francia, B., Li, M., Mckinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Research Memoranda, Department of Computer Science, University of Sheffield, UK, Tech. Rep. CS-00-05;
Clough, P., (2003) Old and New Challenges in Automatic Plagiarism Detection, , Plagiarism Advisory Service, Department of Information Studies, University of Sheffield, UK;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.htm, March
A4 - Anhui University

From Duplicate 2 (Similarity detection in Java programming assignments - Menai, Mohamed El Bachir; Al-Hassoun, Nailah Salah)

Conference code: 82330

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Menai, M. E. B.; Department of Computer Science, CCIS - King Saud University, P.O. Box 51178, Riyadh 11543, Saudi Arabia; email: menai@ksu.edu.sa

References: Bowyer, W.K., Hall, O.L., Experience Using 'MOSS' to Detect Cheating on Programming Assignments (1999) Proc. 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22; 
Cannarozzi, G.M., (2005) String Alignment Using Dynamic Programming, , http://biorecipes.com/DynProgBasic/code.html;
Chen, X., Francia, B., Li, M., Mckinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Research Memoranda, Department of Computer Science, University of Sheffield, UK, Tech. Rep. CS-00-05;
Clough, P., (2003) Old and New Challenges in Automatic Plagiarism Detection, , Plagiarism Advisory Service, Department of Information Studies, University of Sheffield, UK;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.htm, March
A4 - Anhui University},
author = {{El Bachir Menai}, Mohamed and Al-Hassoun, Nailah Salah},
booktitle = {5th International Conference on Computer Science {\&} Education},
doi = {10.1109/ICCSE.2010.5593613},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - El Bachir Menai, Al-Hassoun - Similarity detection in Java programming assignments.pdf:pdf},
isbn = {978-1-4244-6002-1},
keywords = {Attribute-based method,CAPlag,DNA sequencing,Java,Java programming assignment,Layout,Measurement,Plagiarism,Programming assignment,Programming profession,Similarity detection,Structure-based method,Web based service,Web services,academic integrity,attribute based system,computing assignment plagiarism,educational administrative data processing,hidden structural similarity detection,object-oriented programming,pattern classification,program compilers,source code,source coding,statistical analysis,structure based system,student cheating prevention},
language = {English},
month = {aug},
pages = {356--361},
publisher = {IEEE},
title = {{Similarity detection in Java programming assignments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78649421519{\&}partnerID=40{\&}md5=518883cc01632eb68ba8a44e4e9996f8 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5593613 http://ieeexplore.ieee.org/document/5593613/},
year = {2010}
}
@inproceedings{Simon2014107,
abstract = {Student perceptions of academic integrity have been extensively researched in relation to text-based assessments, but there is rather less research relating to non-text-based assessments such as computer programs, databases, and spreadsheets. This paper reports the findings from a survey of computing students and academics to investigate perceptions of particular academic practices with regard to both essays and computing assessments. For each practice the research sought to discover whether it was perceived to constitute plagiarism or collusion and whether it was considered to be acceptable in an academic environment. While there was general agreement between academics and students regarding some practices, both groups displayed high levels of uncertainty about other practices. There was considerable variation between their attitudes to similar practices in the text and non-text environments, and between what was seen as plagiarism/collusion and perceptions of unacceptability. That is, there were practices that were perceived to be plagiarism or collusion but were considered acceptable, and others that were considered not to be plagiarism or collusion but were nevertheless thought unacceptable. These findings suggest a need for academic integrity policies and procedures specific to computing, accompanied by discipline-specific student education. Copyright {\textcopyright} 2014 ACM.},
address = {New York, New York, USA},
annote = {From Duplicate 1 (Academic integrity perceptions regarding computing assessments and essays - Cook, Beth; Sheard, Judy; Carbone, Angela; Johnson, Chris)

cited By 0; Conference of 10th Annual International Conference on International Computing Education Research, ICER 2014 ; Conference Date: 11 August 2014 Through 13 August 2014; Conference Code:106888

From Duplicate 2 (Academic integrity perceptions regarding computing assessments and essays - Simon; Cook, Beth; Sheard, Judy; Carbone, Angela; Johnson, Chris)

From Duplicate 1 (Academic integrity perceptions regarding computing assessments and essays - Cook, Beth; Sheard, Judy; Carbone, Angela; Johnson, Chris)

From Duplicate 1 (Academic integrity perceptions regarding computing assessments and essays - Cook, Beth; Sheard, Judy; Carbone, Angela; Johnson, Chris)

From Duplicate 1 (Academic integrity perceptions regarding computing assessments and essays - Simona; Cook, B.a; Sheard, J.b; Carbone, A.b; Johnson, C.c)

cited By 0; Conference of 10th Annual International Conference on International Computing Education Research, ICER 2014 ; Conference Date: 11 August 2014 Through 13 August 2014; Conference Code:106888

From Duplicate 2 (Academic integrity perceptions regarding computing assessments and essays - Cook, Beth; Sheard, Judy; Carbone, Angela; Johnson, Chris)

cited By 0; Conference of 10th Annual International Conference on International Computing Education Research, ICER 2014 ; Conference Date: 11 August 2014 Through 13 August 2014; Conference Code:106888},
author = {Simon and Cook, Beth and Sheard, Judy and Carbone, Angela and Johnson, Chris},
booktitle = {Proceedings of the tenth annual conference on International computing education research},
doi = {10.1145/2632320.2632342},
file = {:C$\backslash$:/Users/matnovak/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/2014 - Simon et al. - Academic integrity perceptions regarding computing assessments and essays.pdf:pdf},
isbn = {9781450327558},
keywords = {academic integrity,computing education,non-text-based assessment},
pages = {107--114},
publisher = {ACM Press},
series = {ICER '14},
title = {{Academic integrity perceptions regarding computing assessments and essays}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84905829265{\&}partnerID=40{\&}md5=16601791c081c168921ad6ccdd6b2482 http://dl.acm.org/citation.cfm?id=2632320.2632342 http://doi.acm.org/10.1145/2632320.2632342 http://dl.acm.org/citation.cfm?doid=2632320.26323},
year = {2014}
}
@inproceedings{Le2013b,
abstract = {Technology empowers students but can also entice them to plagiarise. To tackle this problem, plagiarism detection tools are especially useful, not only in popular thinking as a deterrent for students, but also as an educational tool to raise students' awareness of the offence and to improve their academic skills. Commercial text matching tools (e.g. Turnitin) are at a high level of maturity. These tools offer the ability to interact with students, making them suitable for an educational objective. Additionally, they can be readily integrated into learning environments enabling uniform application at an institutional level. On the other hand, computer source code matching tools, despite their successful detection performance, are mostly used as standalone tools that are difficult to adopt at an institutional level. The research presented in this paper describes the trial and evaluation of a tool that is seamlessly integrated into the Moodle virtual learning environment. The tool provides code similarity scanning capability within Moodle so that institutions using this learning environment could apply this tool easily at an enterprise level. Additionally, the educational aspects available in text matching tools have been added into the tool capability. The tool relies on two popular code matching services, MOSS and JPlag, as underlying engines to provide good code similarity scanning performance. The evaluation of the tool from both academics' and students' perspectives indicates a considerable level of interest in using the tool, and supports the suitability of this tool for wider institutional adoption in the computing education community. {\textcopyright} 2013 IEEE.},
address = {Melbourne, Australia},
annote = {Conference code: 98104

Export Date: 23 February 2015

Correspondence Address: Office of the Pro-vice Chancellor Learning and Teaching, Monash University, Melbourne, Australia

References: Sheard, J., Dick, M., Markham, S., Macdonald, I., Walsh, M., Cheating and plagiarism: Perceptions and practices of first year IT students (2002) Proc. 7th Innovation and Technology in Computer Science Education, pp. 183-187; 
Sheard, J., Dick, M., Computing student practices of cheating and plagiarism: A decade of change (2011) Proceedings of the 16th Annual Joint Conference on Innovation and Technology in Computer Science Education, pp. 233-237. , Darmstadt, Germany;
D'Souza, D., Hamilton, M., Harris, M.C., Software development marketplaces: Implications for plagiarism (2007) Proc of the Ninth Australasian Conference on Computing Education, pp. 27-33;
Wagner, N.R., Plagiarism by Student Programmers, , http://www.cs.utsa.edu/{\~{}}wagner/pubs/plagiarism0.html;
Zobel, J., Uni cheats racket": A case study in plagiarism investigation (2004) ACE '04 Proceedings of the Sixth Australasian Conference on Computing Education;
Barrett, R., Malcolm, J., Embedding plagiarism education in the assessment process (2006) International Journal for Educational Integrity, 2 (1), pp. 38-45;
Stappenbelt, B., Rowles, C., The effectiveness of plagiarism detection software as a learning tool in academic writing education (2010) 4th Asia Pacific Conference on Educational Integrity (4APCEI, p. 29;
Rees, M., Emerson, L., The impact that Turnitin has had on textbased assessment practice (2009) International Journal for Educational Integrity, 5 (1), pp. 20-29;
Davis, M., Carroll, J., Formative feedback within plagiarism education: Is there a role for text-matching software (2009) International Journal for Educational Integrity, 5 (2), pp. 58-70;
Rolfe, V., Can Turnitin be used to provide instant formative feedback? (2011) British Journal of Educational Technology, 42 (4), pp. 701-710;
Cole, J., Foster, H., (2009) Using Moodle : Teaching with the Popular Open Source Course Management System 2nd Edition: o'Reilly Media;
Roberts, E., Strategies for promoting academic integrity in CS courses (2002) 32nd Annual Frontier in Education, pp. F3G-14;
Lancaster, T., Culwin, F., A comparison of source code plagiarism detection engines (2010) Computer Science Education, 14 (2), pp. 101-112;
Martin, D.F., Plagiarism and technology: A tool for coping with plagiarism (2005) The Journal of Education for Business, 80 (3), pp. 149-152;
Bilic-Zulle, L., Azman, J., Frkovic, V., Petrovecki, M., Is there an effective approach to deterring students from plagiarizing? (2008) Science and Engineering Ethics, 14 (1), pp. 139-147;
Bowyer, K.W., Hall, L.O., Reducing effects of plagiarism in programming classes (2001) Journal of Information System Education, 12 (3), pp. 141-148;
Youmans, R.J., Does the adoption of plagiarism-detection software in higher education reduce plagiarism? (2011) Studies in Higher Education, 36 (7), pp. 749-761;
Dick, M., Sheard, J., Hasen, M., Prevention is Better than Cure: Addressing Cheating and Plagiarism Based on the IT Student Perspective (2008) Student Plagiarism in An Online World: Problems and Solutions, pp. 160-182. , T. S. Roberts, ed.: Hershey, PA : Information Science Reference;
Le, T., Carbone, A., Sheard, J., Schuhmacher, M., Integrating Source Code Plagiarism into a Virtual Learning Environment: Benefits for Students and Staff (2012) Australasian Computing Education Conference
A4 - Galaxy Entertainment Group},
author = {Le, Tri and Carbone, A and Sheard, J and Schuhmacher, M and de Raath, M. and Johnson, C},
booktitle = {Learning and Teaching in Computing and Engineering},
doi = {10.1109/LaTiCE.2013.37},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Le et al. - Educating Computer Programming Students about Plagiarism through Use of a Code Similarity Detection Tool.pdf:pdf},
isbn = {978-1-4673-5627-5},
keywords = {Academic integrity,Computer aided instruction,Computer programming,Detection performance,Educational objectives,Engineering education,Inspection equipment,Intellectual property,Learning environments,Plagiarism detection,Societies and institutions,Source codes,Students,Students' perspectives,Tools,Virtual learning environments,academic integrity,computer source code,plagiarism detection tool},
language = {English},
month = {mar},
pages = {98--105},
publisher = {IEEE},
title = {{Educating Computer Programming Students about Plagiarism through Use of a Code Similarity Detection Tool}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84881108082{\&}partnerID=40{\&}md5=711f2cc5f5253a6834cfb47177d6e42f http://ieeexplore.ieee.org/document/6542245/},
year = {2013}
}
@inproceedings{Arabyarmohamady2012b,
abstract = {In this paper a plagiarism detection framework is proposed based on coding style. Furthermore, the typical style-based approach is improved to better detect plagiarism in programming codes. The plagiarism detection is performed in two phases: in the first phase the main features representing a coding style are extracted. In the second phase the extracted features are used in three different modules to detect the plagiarized codes and to determine the giver and takers of the codes. The extracted features for each code developer are kept in a history log, i.e. a user profile as his/her style of coding, and would be used to determine the change in coding style. The user profile allows the system to detect if a code is truly developed by the claimed developer or it is written by another person, having another style. Furthermore, the user profile allows determining the code giver and code taker when two codes are similar by comparing the codes' styles with the style of the programmers. Also if a code is copied from the internet or developed by a third party, then the style of who claims the ownership of the code is normally less proficient in coding than the third party and can be detected. The difference between the style levels is done through the style level checker module in the proposed framework. The proposed framework has been implemented and tested and the results are compared to Moss which shows comparable performance in detecting plagiarized codes. {\textcopyright} 2012 IEEE.},
address = {Iran},
annote = {Conference code: 95277

Export Date: 23 February 2015

Correspondence Address: Arabyarmohamady, S.; Advanced Robotics and Intelligent Systems Laboratory, School of Electrical and Computer Engineering, University of TehranIran

References: Haines, V.J., Diekhoff, G.M., Labeff, E.E., Clark, R.E., College cheating: Immaturity, lack of commitment, and the neutralizing attitude (1986) Research in Higher Education, 25 (4), pp. 342-354; 
Ashworth, P., Bannister, P., Thorne, P., Guilty in Whose Eyes? University students' perceptions of cheating and plagiarism in academic work and assessment (1997) Studies in Higher Education, 22 (2), pp. 187-203;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) SIGMOD 2003, , San Diego, CA USA June 9-12;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with jplag (2002) J. Univ. Comput. Sci., 8, pp. 1016-1038;
Collberg, C., Myles, G., Stepp, M., Cheating cheating detectors (2004) Technical Report TR04-05;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) 29th Australasian Computer Science Conference, 48;
Brassil, J., Low, S., Maxemchuk, N., O'Gorman, L., Electronic marking and identification techniques to discourage document copying (1994) 13th Proceedings IEEE Digital Object Identifier, 3, pp. 1278-1287;
Daly, C., Horgan, J., Patterns of plagiarism (2005) Proceedings of the Thirty-Sixth SIGCSE Technical Symposium on Computer Science Education, SIGCSE 2005, pp. 383-387. , Proceedings of the Thirty-Sixth SIGCSE Technical Symposium on Computer Science Education, SIGCSE 2005;
Daly, C., Horgan, J.M., Automatic plagiarism detection (2001) Proceedings of the IASTED International Conference Applied Informatics, pp. 255-259;
Simon, Electronic watermarks to help authenticate soft-copy exams (2005) ACE '05: Proceedings of the 7th Australasian Conference on Computing Education, 42. , 42;
Jankowitz, H.T., Detecting plagiarism in student pascal programs (1988) Computer Journal, 31 (1), pp. 1-8;
Frantzeskou, G., MacDonell, S., Stamatatos, E., Gritzalis, S., Examining the significance of high-level programming features in source code author classification (2008) Journal of Systems and Software, 81 (3), pp. 447-460. , DOI 10.1016/j.jss.2007.03.004, PII S0164121207000829, Selected Papers from the 2006 Brazilian Symposia on Databases and on Software Engineering;
Frantzeskou, G., Stamatatos, E., Gritzalis, S., Chaski, C.E., Howald, B.S., Identifying authorship by byte-level N-grams: The source code author profile (SCAP) (2007) Method Int. Journal of Digital Evidence, 6 (1);
Hope, J., (1994) The Authorship of Shakespeare's Plays, , Cambridge University Press, Cambridge;
Jadalla, A., Elnagar, A., PDE4Java: Plagiarism detection engine for java source code: A clustering approach (2008) IJBIDM, 3 (2), pp. 121-135;
Mann, S., Frew, Z., Similarity and originality in code: Plagiarism and normal variation in student assignments (2006) Proceedings of the 8th Austalian Conference on Computing Education, 52;
Moussiades, L., Vakali, A., PDetect: A clustering approach for detecting plagiarism in source code datasets (2005) The Computer Journal, 48 (6);
Lange, R.C., Mancoridis, S., Using code metric histograms and genetic algorithms to perform author identification for software forensics (2007) Proceedings of the 9th Annual Conference on Genetic and Evolutionary Computation, , July 07-11;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on IT students' propensity to cheat (2002) Proc. Fifth Australasian Computing Education Conference, pp. 119-126. , ACM Press;
Shevertalov, M., Kothari, J., Stehle, E., Mancoridis, S., On the use of discretized source code metrics for author identificatio (2009) The IEEE Proceedings of the 1 St International Symposium on Search Based Software Engineering (SBSE'09), , Windsor, UK, May},
author = {Arabyarmohamady, S and Moradi, H and Asadpour, M},
booktitle = {Proceedings of 2012 International Conference on Interactive Mobile and Computer Aided Learning},
doi = {10.1109/IMCL.2012.6396471},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Arabyarmohamady, Moradi, Asadpour - A coding style-based plagiarism detection.pdf:pdf},
isbn = {978-1-4673-4925-3},
keywords = {Author identification,Code developers,Computer aided instruction,Computer programming,Intellectual property,Plagiarism detection,Programming codes,Second phase,Software forensics,Source codes,Third parties,User profile,author identification,software forensics,source code},
language = {English},
month = {nov},
pages = {180--186},
publisher = {IEEE},
title = {{A coding style-based plagiarism detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84873121749{\&}partnerID=40{\&}md5=ab2f95d11ed5fbb239eea872898b0a6e http://ieeexplore.ieee.org/document/6396471/},
year = {2012}
}
@inproceedings{Arwin2006a,
abstract = {Plagiarism is a widespread problem in assessment tasks; in computing courses, students often plagiarise source code. For all but the smallest classes, manual detection of such plagiarism is impractical, and, while automated tools are available, none has been applied to detect inter-lingual plagiarism, where source code is copied from one language to another. In this work, we propose a novel approach, XPlag, to detect plagiarism involving multiple languages using intermediate program code produced by a compiler suite. We describe experiments to evaluate XPlag, and show that we can detect inter-lingual plagiarism with reasonably good precision. Copyright {\textcopyright} 2006, Australian Computer Society, Inc.},
address = {Melbourne, Australia},
annote = {Conference code: 93739

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Arwin, C.; School of Computer Science and Information Technology, RMIT University, GPO Box 2476V, Melbourne 3001, Australia; email: carwin@cs.rmit.edu.au

References: Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2004) Proceedings of the Second Australian Undergraduate Students' Computing Conference (AUSCC04), pp. 8-15. , G. Abraham and B.I.P. Rubinstein Editors; 
Chawla, M., (2003) An Indexing Technique for Efficiently Detecting Plagiarism in Large Volumes of Source Code, , Honours thesis, RMIT University, Melbourne, Australia, October;
Chen, X., Li, M., McKinnon, B., Seker, A., (2002) A Theory of Uncheatable Program Plagiarism Detection and Its Practical Implementation, , http://www.cs.ucsb.edu/{\_}mli/sid.ps, [13 August 2005];
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 31 (1), pp. 266-270;
Hernandez-Campos, F., (2002) Lecture 31: Building A Runnable Program, , http://www.cs.unc.edu/{\_}stotts/COMP144/lectures/lect31.pdf, [13 August 2005];
Hoad, T., Zobel, J., Methods for identifying versioned and plagiarised documents (2003) Journal of the American Society of Information Science and Technology, 54 (3), pp. 203-215;
Jain, N., Sanyal, A., Khedker, U., Retargeting GCC for cradle's DSE processor (2003) Technical Report, Department of Computer Science {\&} Engineering, , Indian Institute of Technology, Bombay, Bombay, India;
Jones, E.L., Metrics based plagiarism monitoring (2001) Proceedings of the Sixth Annual CCSC Northeastern Conference, pp. 1-8. , Middlebury, Vermont;
Karp, R.M., Rabin, M.O., Efficient randomized pattern-matching algorithms (1987) IBM Journal of Research and Development, 31 (2), pp. 249-260;
Prechelt, L., Malpohl, G., Philippsen, M., JPlag: Finding plagiarisms among a set of programs (2000) Technical Report 2000-1, Fakultat fur Informatik Universit{\"{a}}t Karlsruhe, , D76128 Karlsruhe, Germany;
Robertson, S.E., Walker, S., Okapi/keenbow at TREC-8 (1999) The Eighth Text Retrieval Conference (TREC-8), pp. 151-162;
Sheard, J., Dick, M., Markham, S., MacDonald, I., Walsh, M., Cheating and plagiarism: Perceptions and practices of first year IT students (2002) Proceedings of the Seventh Annual Conference on Innovation and Technology in Computer Science Education, pp. 183-187;
Singer, J., GCC.NET - A feasibility study (2003) Proceedings of the First InternationalWorkshop on C{\#} And.NET Technologies, , University of West Bohemia, Plzen, Czech Republic;
Whale, G., Detection of plagiarism in student programs (1986) Proceedings of the Ninth Australian Computer Science Conference, pp. 231-241. , Canberra;
Whale, G., Identification of program similarity in large populations (1990) The Computer Journal, 33, p. 2;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 28 (1), pp. 130-134;
Witten, I.H., Moffat, A., Bell, T.C., (1999) Manag- Ing Gigabytes: Compressing and Indexing Docu- Ments and Images, , Morgan Kaufmann Publishers, second edition;
Zobel, J., "Uni cheats racket": A case study in plagiarism investigation (2004) Proceedings of the Sixth Conference on Australian Computing Education, pp. 357-365. , Australian Computer Society, Inc;
Zobel, J., Hamilton, M., Managing student plagiarism in large academic departments (2002) Aus- Tralian Universities Review, 45 (1), pp. 23-30
A4 - University of Tasmania (UTAS); Australian Computer Society (ACS); Computing Research and Education (CORE); Griffith University; University of Auckland},
author = {Arwin, C and Tahaghoghi, S M M},
booktitle = {29th Australasian Computer Science Conference},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Arwin, Tahaghoghi - Plagiarism detection across programming languages.pdf:pdf},
isbn = {14451336 (ISSN); 1920682309 (ISBN); 9781920682309 (ISBN)},
keywords = {Assessment tasks,Automated tools,Computer programming languages,Computer science,Computing course,Intellectual property,Multiple languages,Plagiarism detection,Program code,Program compilers,Program source code similarity,Program source codes,Source codes},
language = {English},
pages = {277--286},
title = {{Plagiarism detection across programming languages}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84868708444{\&}partnerID=40{\&}md5=dfd83bc879c2b5fc3dec0599bb29dbc5},
volume = {48},
year = {2006}
}
@inproceedings{Li2010o,
abstract = {In the instruction of computer courses, some students copy other other's source code as themselves. In order to detect this plagiarism accurately, researchers did a lot.In this paper,we described a source code plagiarism detection technologe based on AST,This technologe can detect the plagiarism accurately when the position of functions is changed by plagiarist.At first,transforming the programs to the AST using ANTLR,and then,abstracting the function subtree subtrees from the AST,at last,compare the function subtree using LCS,get the simalarity between programs. {\textcopyright} 2010 IEEE.},
address = {Chengdu, China},
annote = {Conference code: 83425

Cited By :2

Export Date: 23 February 2015

Correspondence Address: Li, X.; School of Computer Science and Technology, SouthWest University for Nationalities, Chengdu 610041, China; email: x266@163.com

References: Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Compareing structure and attribute-counting systems (1996) Proceedings of the 1st Australian Conference on Computer Science Education, pp. 3-5; 
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarism among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. of the 2003 ACM SIGMOD Int. Conf. on Management of Data, pp. 76-85;
Wise, M.J., YAP3: Improved detection of similarities in computer programs and other texts (1996) Proceedings of the SIGCSE'96, pp. 130-134;
Parker, A., Hamblen, J.O., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99. , May;
Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting program similarity and plagiarism within a university programming environment (1987) Computers {\&} Education, 11, pp. 11-19. , Jan;
Whale, G., Identification of Program Similarity in Large Populations (1990) The Computer Journal, 33 (2);
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching[M], , An Unpublished Paper;
Clough, P., Plagiarism in Natural and Programming Languages:an Overview of Current Tools and Technologies;
Baxter, I.D., Yahin, A., Moura, L., Clone Detection Using Abstract Syntax Trees Proceedings of the International Conference on Software Maintenance, 1998, pp. 368-377;
Zou, L., Godfrey, M.W., Detecting merging and splitting using origin analysis Proceedings of the Working Conference on Reverse Engineering, 2003;
Tu, Q., Godfrey, M.W., An integrated approach for studying architectural evolution Proceedings of the International Workshop on Program Comprehension, 2002
A4 - Wuhan University; Huanggang Normal University; IEEE Wuhan Section; IEEE Signal Processing Tainan Chapter},
author = {Li, Xiao and Zhong, Xiao Jing},
booktitle = {International Symposium on Intelligence Information Processing and Trusted Computing},
doi = {10.1109/IPTC.2010.90},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Li, Zhong - The Source Code Plagiarism Detection Using AST.pdf:pdf},
isbn = {978-1-4244-8148-4},
keywords = {ANTLR,AST,Data processing,LCS,Plagiarism detection,Source code plagiarisms,Source codes,Subtrees,Teaching},
language = {English},
month = {oct},
pages = {406--408},
publisher = {IEEE},
title = {{The Source Code Plagiarism Detection Using AST}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78651086818{\&}partnerID=40{\&}md5=b7e15c4ad03144f59ad8f6ef5b137761 http://ieeexplore.ieee.org/document/5663286/},
year = {2010}
}
@inproceedings{6526164,
abstract = {Studies have shown that many students have similar programs in programming class, most of which due to plagiarism. Students may simply modify others' programs as their own. This makes the assessment standards for students' programs with lots of ambiguity and uncertainty, limiting assessment accuracy and efficiency, and reducing the reliability of test results. To solve this problem, a student program plagiarism detection approach is proposed based on a data mining algorithm. Firstly, similar code fragments are mined by the CloSpan algorithm. Then, similarities between programs are calculated. Finally, the plagiarism list is output. Experiments showed that compared with the widely used plagiarism detection tool MOSS, our approach is can not only more accurately give statistical information of the similar program detected, but also be able to visualize the similar code fragments, which can greatly increase detection efficiency. {\textcopyright} 2012 IEEE.},
address = {Changchun, China},
annote = {From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, Kechao K.a b; Wang, Tiantian T.b; Zong, M.a Mingkui; Wang, Z.a Zhifei; Ren, Xiangmin; Kechao, Wang; Tiantian, Wang; Mingkui, Zong; Zhifei, Wang; Xiangmin, Ren; Wang, Kechao K.a b; Wang, Tiantian T.b; Zong, M.a Mingkui; Wang, Z.a Zhifei; Ren, Xiangmin)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797

From Duplicate 3 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, Kechao; Wang, Tiantian; Zong, Mingkui; Wang, Zhifei; Ren, Xiangmin)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797

From Duplicate 2 (Detection of plagiarism in students' programs using a data mining algorithm - Kechao, Wang; Tiantian, Wang; Mingkui, Zong; Zhifei, Wang; Xiangmin, Ren)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, Kechao K.a b; Wang, Tiantian T.b; Zong, M.a Mingkui; Wang, Z.a Zhifei; Ren, Xiangmin; Kechao, Wang; Tiantian, Wang; Mingkui, Zong; Zhifei, Wang; Xiangmin, Ren; Wang, Kechao K.a b; Wang, Tiantian T.b; Zong, M.a Mingkui; Wang, Z.a Zhifei; Ren, Xiangmin)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797

From Duplicate 3 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, Kechao; Wang, Tiantian; Zong, Mingkui; Wang, Zhifei; Ren, Xiangmin)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797

From Duplicate 2 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797

From Duplicate 3 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, Kechao; Wang, Tiantian; Zong, Mingkui; Wang, Zhifei; Ren, Xiangmin)

From Duplicate 1 (Detection of plagiarism in students' programs using a data mining algorithm - Wang, K.a b; Wang, T.b; Zong, M.a; Wang, Z.a; Ren, X.a)

cited By 0; Conference of 2nd International Conference on Computer Science and Network Technology, ICCSNT 2012 ; Conference Date: 29 December 2012 Through 31 December 2012; Conference Code:97797},
author = {Kechao, Wang and Tiantian, Wang and Mingkui, Zong and Zhifei, Wang and Xiangmin, Ren},
booktitle = {Proceedings of 2012 2nd International Conference on Computer Science and Network Technology},
doi = {10.1109/ICCSNT.2012.6526164},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Kechao et al. - Detection of plagiarism in students' programs using a data mining algorithm.pdf:pdf},
isbn = {978-1-4673-2964-4},
keywords = {Algorithms,Assessment accuracy,CloSpan algorithm,CloSpan mining algorithm,Computer science,Data mining,E-learning,Intelle,MOSS plagiarism detection tool,code fragments,code plagiarism,computer science education,data mining,data mining algorithm,detection efficiency,program similarities,programming,programming class,student program plagiarism detection approach},
month = {dec},
pages = {1318--1321},
publisher = {IEEE},
title = {{Detection of plagiarism in students' programs using a data mining algorithm}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84880193753{\&}partnerID=40{\&}md5=6db2691b10c0cf328c3e2b131194c6b9 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6526164 http://ieeexplore.ieee.org/document/6526164/},
year = {2012}
}
@inproceedings{Oprisa2014,
abstract = {We have often seen how malware families evolve over time: the malware authors add new features, change the order of functions, modify some strings or add random useless code. They do all that to evade detection. In a similar way, computer science students that copy homework will change variable and function names, rephrase comments or even replace some small portions of the code. In both cases, the essence remains the same and it is easy for one to see it, by comparing two samples or two source codes. The challenge however, is to automatically find groups of similar items in a large collection. Our research shows that we can apply the same techniques in order to cluster new malicious samples into malware families and detect plagiarized students work. The paper proposes a novel approach for computing the similarity between two items, based not only on their features, but also based on the frequencies of those features in a given population. The new similarity function was tested in a clustering algorithm and it proved better than other approaches. Also, the nature of the method allows it to be used in other document classification tasks. {\textcopyright} 2013 IEEE.},
address = {Bitdefender, Romania},
annote = {From Duplicate 1 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

From Duplicate 1 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -

From Duplicate 2 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, Ciprian; Cab«éu, George; Cole≈üa, Adrian)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, Ciprian; Cab«éu, George; Cole≈üa, Adrian)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -

From Duplicate 2 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -

From Duplicate 2 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -

From Duplicate 3 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, Ciprian; Cab«éu, George; Cole≈üa, Adrian)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, Ciprian; Cab«éu, George; Cole≈üa, Adrian)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -

From Duplicate 2 (From plagiarism to malware detection - Oprisa, C; Cabau, G; Colesa, A; Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

From Duplicate 1 (From plagiarism to malware detection - Opri≈üa, C; Cab«éu, G; Cole≈üa, A)

Conference code: 106426

Export Date: 23 February 2015

References: Linn, C., Debray, S., Obfuscation of executable code to improve resistance to static disassembly (2003) Proceedings of the 10th ACM Conference on Computer and Communications Security, pp. 290-299. , ACM; 
Sun, L., Versteeg, S., Bozta, S., Yann, T., Pattern recognition techniques for the classification of malware packers (2010) Information Security and Privacy, 6168, pp. 370-390. , http://dx.doi.org/10.1007/978-3-642-14081-523, ser. Lecture Notes in Computer Science, R. Steinfeld and P. Hawkes, Eds. Springer Berlin Heidelberg;
(2013) Intel-R 64 and IA-32 Architectures Software Developer's Manual 325462-047US, , June;
Manber, U., Finding similar files in a large file system (1994) Proceedings of the USENIX Winter 1994 Technical Conference, 1. , San Fransisco, CA, USA;
Heintze, N., Scalable document fingerprinting (1996) 1996 USENIX Workshop on Electronic Commerce, 3 (1);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data. ACM, pp. 76-85;
Abou-Assaleh, T., Cercone, N., Sweidan, R., N-gram-based detection of new malicious code (2003) Proceedings of the 28th Annual International Computer Software and Applications Conference, pp. 10-1109. , IEEE CSP;
Bilar, D., Opcodes as predictor for malware (2007) Security Informatics, 1, pp. 156-168;
Shabtai, A., Moskovitch, R., Feher, C., Dolev, S., Elovici, Y., Detecting unknown malicious code by applying classification techniques on opcode patterns (2012) Security Informatics, 1 (1), pp. 1-22;
(2013) Visual C++, , http://msdn.microsoft.com/en-us/library/vstudio/60k1461a(v=vs.100).aspx;
Pietrek, M., (2002) An In-depth Look into the win32 Portable Executable File Format, , MSDN Magazine;
Dabah, G., (2013) Distorm, Powerful Disassembler for x86/amd64, , https://code.google.com/p/distorm/;
(2012) Similarities for Fun {\&}Profit, , Phrack Magazine;
Shannon, C.E., Weaver, W., (1948) A Mathematical Theory of Communication;
Kolmogorov, A.N., Three approaches to the quantitative definition of information (1968) International Journal of Computer Mathematics, 2 (1-4), pp. 157-168;
Adler, M., (2013) Zlib Home Site, , http://zlib.net/;
Sibson, R., Slink: An optimally efficient algorithm for the single-link cluster method (1973) The Computer Journal, 16 (1), pp. 30-34;
Rijsbergen, C.V., (1979) Information Retrieval, , (2nd ed.). Butterworths
A4 -},
author = {Oprisa, Ciprian and Cabau, George and Colesa, Adrian},
booktitle = {15th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing},
doi = {10.1109/SYNASC.2013.37},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Oprisa, Cabau, Colesa - From Plagiarism to Malware Detection.pdf:pdf},
isbn = {978-1-4799-3036-4},
keywords = {Clustering,Clustering algorithms,Computer crime,Entropy,Information retrieval systems,Intellectual property,Malware,N-grams,Normalized compression distance,Plagiarism,Similarity metric,Similarity metrics,change variab,invasive software,pattern clustering},
language = {English},
month = {sep},
pages = {227--234},
publisher = {IEEE},
title = {{From Plagiarism to Malware Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84904566094{\&}partnerID=40{\&}md5=817b2734bef2093833fcbb55070fe1d6 http://ieeexplore.ieee.org/document/6821154/},
year = {2013}
}
@inproceedings{Brixtel2010b,
abstract = {Clone detection is usually applied in the context of detecting small-to medium scale fragments of duplicated code in large software systems. In this paper, we address the problem of clone detection applied to plagiarism detection in the context of source code assignments done by computer science students. Plagiarism detection comes with a distinct set of constraints to usual clone detection approaches, which influenced the design f the approach we present in this paper. For instance, the source code can be heavily changed at a superficial level (in an attempt to look genuine), yet be functionally very similar. Since assignments turned in by computer science students can be in a variety of languages, we work at the syntactic level and do not consider the source-code semantics. Consequently, the approach we propose is endogenous and makes no assumption about the programming language being analysed. It is based on an alignment method using the parallel principle at local resolution (character level) to compute similarities between documents. We tested our framework on hundreds of real source files, involving a wide array of programming languages (Java, C, Python, PHP, Haskell, bash). Our approach allowed us to discover previously undetected frauds, and to empirically evaluate its accuracy and robustness. {\textcopyright} 2010 IEEE.},
address = {Caen, France},
annote = {Conference code: 82443

Cited By :8

Export Date: 23 February 2015

Correspondence Address: Brixtel, R.; GREYC-CNRS (UMR-6072), University of Caen Basse-Normandie, 14000 Caen, France; email: Romain.Brixtel@info.unicaen.fr

References: Kim, M., Sazawal, V., Notkin, D., Murphy, G.C., An empirical study of code clone genealogies (2005) ESEC/SIGSOFT FSE 2005: Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering, pp. 187-196; 
Baxter, I.D., Yahin, A., De Moura, L.M., Sant'anna, M., Bier, L., Clone detection using abstract syntax trees (1998) ICSM 1998: Proceedings of the 12th International Conference on Software Maintenance, pp. 368-377;
Krinke, J., Identifying similar code with program dependence graphs (2001) WCRE 2001: Proceedings of the 8th Working Conference on Reverse Engineering, pp. 301-309;
Baker, B.S., On finding duplication and near-duplication in large software systems (1995) WCRE 1995: Proceedings of the 2nd Working Conference on Reverse Engineering, pp. 86-95;
Kamiya, T., Kusumoto, S., Inoue, K., Ccfinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Trans. Software Eng., 28 (7), pp. 654-670;
Ducasse, S., Nierstrasz, O., Rieger, M., On the effectiveness of clone detection by string matching (2006) Journal of Software Maintenance, 18 (1), pp. 37-58;
Wettel, R., Marinescu, R., Archeology of code duplication: Recovering duplication chains from small duplication fragments (2005) SYNASC 2005: Proceedings of the 7th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, pp. 63-70;
Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Trans. Software Eng., 33 (9), pp. 577-591;
Whale, G., Identification of program similarity in large populations (1990) The Computer Journal, 33 (2), pp. 140-146;
Wise, M., YAP3: Improved detection of similarities in computer program and other texts (1996) Twenty-Seventh SIGCSE Technical Symposium, pp. 130-134;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with jplag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Malpohl, G., Detecting Software Plagiarism, , http://www.ipd.uni-karlsruhe.de/jplag/;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD, pp. 76-85. , ACM New York, NY, USA;
Freire, M., Cebrian, M., (2008) Design of the Ac Academic Plagiarism Detection System, , Technical report, Tech. rep., Escuela Politecnica Superior, Universidad Autonoma de Madrid, Madrid, Spain, Tech. Rep;
Cosma, G., (2008) An Approach O Source-code Plagiarism Detection and Investigation Using Latent Semantic Analysis, , Ph.D. dissertation, University of Warwick;
Son, J.W., Park, S.-B., Park, S.-Y., Program plagiarism detection using parse tree kernels (2006) PRICAI 2006: Proceedings of the 9th,Pacific Rim International Conference on Artificial Intelligence, pp. 1000-1004;
G{\"{o}}de, N., Evolution of type-1 clones (2009) SCAM 2009: Proceedings of the Ninth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 77-86;
Tiarks, R., Koschke, R., Falke, R., An assessment of type-3 clones as detected by state-of-the-art tools (2009) SCAM 2009: Proceedings of the Ninth IEEE International Working Conference on Source Code Analysis and Manipulation, pp. 67-76;
Livieri, S., Higo, Y., Matsushita, M., Inoue, K., Verylarge scale code clone analysis and visualization of open source programs using distributed ccfinder: D-ccfinder (2007) ICSE 2007: Proceedings of the 29th International Conference on Software Engineering, pp. 106-115;
Urvoy, T., Lavergne, T., Filoche, P., Tracking web spam with hidden style similarity (2006) AIRWeb 2006 Program, p. 25;
Levenshtein, Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10, pp. 707-710;
Cilibrasi, R., Vitanyi, P., Clustering by compression (2005) IEEE Transactions on Information Theory, 51 (4), pp. 1523-1545;
Kuhn, H., The hungarian method for the assignment problem (1955) Naval Res. Logist. Quart., 2, pp. 83-97;
V{\'{e}}ronis, J., From the Rosetta stone to the information society (2000) Parallel Text Processing-Alignment and Use of Translation Corpora, pp. 1-24
A4 - IEEE Computer Society},
author = {Brixtel, Romain and Fontaine, Mathieu and Lesner, Boris and Bazin, Cyril and Robbes, Romain},
booktitle = {10th IEEE Working Conference on Source Code Analysis and Manipulation},
doi = {10.1109/SCAM.2010.19},
file = {:C$\backslash$:/Users/matnovak/Documents/Mendeley Desktop/2010 - Brixtel et al. - Language-Independent Clone Detection Applied to Plagiarism Detection.pdf:pdf},
isbn = {978-1-4244-8655-7},
keywords = {Alignment,C (programming language),Cloning,Codes (symbols),Computer programming,Distance,Endogenous,Java programming language,Plagiarism detection,Similarity measure,Source code plagiarism,Source code plagiarisms,Source code segmentation,Source codes},
language = {English},
month = {sep},
pages = {77--86},
publisher = {IEEE},
title = {{Language-Independent Clone Detection Applied to Plagiarism Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78649426786{\&}partnerID=40{\&}md5=18ffd4bbf3c25e1909eeb4758ea21b80 http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=5601829 http://ieeexplore.ieee.org/document/5601829/},
year = {2010}
}
@article{Cosma2012a,
abstract = {Latent Semantic Analysis (LSA) is an intelligent information retrieval technique that uses mathematical algorithms for analyzing large corpora of text and revealing the underlying semantic information of documents. LSA isahighly parameterized statistical method, and its effectiveness is driven by the setting of its parameters which are adjusted based on the task to which it is applied. This paper discusses and evaluates the importance of parameterization for LSA based similarity detection of source-code documents, and the applicability of LSA asatechnique for source-code plagiarism detection when its parameters are appropriately tuned. The parameters involve preprocessing techniques, weighting approaches; and parameter tweaking inherent to LSA processing-in particular, the choice of dimensions for the step of reducing the original post-SVD matrix. The experiments revealed that the best retrieval performance is obtained after removal of in-code comments (Java comment blocks) and applyingacombined weighting scheme based on term frequencies, normalized term frequencies, and acosine-based document normalization. Furthermore, the use of similarity thresholds (instead of mere rankings) requires the use ofahigher number of dimensions.},
address = {Larnaca, Cyprus},
annote = {Export Date: 23 February 2015

CODEN: INFOF

Correspondence Address: Cosma, G.; Department of Business Computing, PA College, Larnaca, CY-7560, Cyprus; email: g.cosma@faculty.pacollege.ac.cy

References: Aiken, A., Moss: A System for Detecting Software Plagiarism, , www.cs.berkeley.edu/aiken/moss.html, Software:, accessed: July 2008; 
Baeza-Yates, R., Ribeiro-Neto, B., (1999) Modern Information Retrieval, , ACM Press/Addison-Wesley;
Berry, M., Large-scale sparse singular value computations (1992) The International Journal of Supercomputer Applications, 6 (1), pp. 13-49. , Spring;
Berry, M., Browne, M., (2005) Understanding Search Engines: Mathematical Modeling and Text Retrieval (Software, Environments, Tools), Second Edition, , Society for Industrial and Applied Mathematics, Philadelphia, PA, USA;
Berry, M., Drmac, Z., Jessup, E., Matrices, vector spaces, and information retrieval (1999) SIAM Review, 41 (2), pp. 335-362;
Berry, M., Dumais, S., O'Brien, G., (1994) Using Linear Algebra for Intelligent Information Retrieval, , Technical Report UT-CS-94-270, University of Tennessee Knoxville, TN, USA;
Britt, A., Wiemer-Hastings, P., Larson, A., Perfetti, C., Using intelligent feedback to improve sourcing and integration in students' essays (2004) International Journal of Artificial Intelligence in Education, 14, pp. 359-374;
Chen, C.-M., Stoffel, N., Post, M., Basu, C., Bassu, D., Behrens, C., Telcordia LSI engine: Implementation and scalability issues (2001) Proceedings of the International Workshop on Research Issues in Data Engineering - Distributed Object Management -RIDE-DOM, pp. 51-58;
Cosma, G., Joy, M., An approach to source-code plagiarism detection and investigation using latent semantic analysis (2009) IEEE Transactions on Computing, , Accepted for publication November 2009;
Deerwester, S., Dumais, S., Landauer, T., Furnas, G., Harshman, R., Indexing by latent semantic analysis (1990) Journal of the American Society of Information Science, 41 (6), pp. 391-407;
Dumais, S., Improving the retrieval of information from external sources (1991) Behavior Research Methods, Instruments and Computers, 23 (2), pp. 229-236;
Foltz Peter, W., Using latent semantic indexing for information filtering (1990) Conf Off Inf Sys, pp. 40-47;
Gravina, R., Yanagisawa, M., Akahori, K., Development and evaluation of a visual assesment asistant using latent semantic analysis and cluster analysis (2004) Proceedings of International Conference on Computers in Education, pp. 963-968;
Hoad, T., Zobel, J., Methods for identifying versioned and plagiarized documents (2003) Journal of the American Society for Information Science and Technology, 54 (3), pp. 203-215;
Jessup, E., Martin, J., Taking a new look at the latent semantic analysis approach to information retrieval (2001) Proceedings of the SIAM Workshop on Computational Information Retrieval, pp. 121-144. , Raleigh, NC;
Jones, K., A statistical interpretation of term specificity and its application in retrieval (1972) Journal of Documentation, 28, pp. 11-21;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Transactions on Education, 42 (1), pp. 129-133;
Kakkonen, T., Myller, N., Sutinen, E., Timonen, J., Automatic essay grading with probabilistic latent semantic analysis (2005) Proceedings of the 2nd Workshop on Building Educational Applications Using Natural Language Processing at the 43rd Annual Meeting of the Association for Computational Linguistics, pp. 29-36. , Ann Arbor, Michigan, USA;
Kakkonen, T., Sutinen, E., Automatic assessment of the content of essays based on course materials (2004) ITRE 2004 - 2nd International Conference on Information Technology: Research and Education - Proceedings, pp. 126-130. , ITRE 2004 - 2nd International Conference on Information Technology: Research and Education - Proceedings;
Kawaguchi, S., Garg, P.K., Matsushita, M., Inoue, K., MUDABlue: An automatic categorization system for open source repositories (2004) Proceedings - Asia-Pacific Software Engineering Conference, APSEC, pp. 184-193. , Proceedings - 11th Asia-Pacific Software Engineering Conference, APSEC 2004;
Kontostathis, A., Essential dimensions of latent semantic indexing (lsi) (2007) HICSS'07: Proceedings of the 40th Annual Hawaii International Conference on System Sciences, p. 73. , Washington, DC, USA, IEEE Computer Society;
Kuhn, A., Ducasse, S., Girba, T., Enriching reverse engineering with semantic clustering (2005) Proceedings - Working Conference on Reverse Engineering, WCRE, 2005, pp. 133-142. , DOI 10.1109/WCRE.2005.16, 1566153, WCRE: 12th Working Conference on Reverse Engineering 2005;
Landauer, T., Laham, D., Rehder, B., Schreiner, M., How well can passage meaning be derived without using word order: A comparison of latent semantic analysis and humans (1997) COGSCI-97, pp. 412-417. , Stanford, CA, Lawrence Erlbaum;
Lin, T.E.M., Amor, R., A Java reuse repository for eclipse using LSI (2006) Proceedings of the 2006 Australian Software Engineering Conference (ASWEC'06), , IEEE;
Lungu, M., Kuhn, A., G{\^{i}}rba, T., Lanza, M., Interactive exploration of semantic clusters (2005) 3rd International Workshop on Visualizing Software for Understanding and Analysis (VISSOFT 2005), pp. 95-100;
Maletic, J.I., Marcus, A., Supporting program comprehension using semantic and structural information (2001) Proceedings - International Conference on Software Engineering, pp. 103-112;
Maletic, J., Valluri, N., Automatic software clustering via latent semantic analysis (1999) ASE'99: Proceedings of the 14th IEEE International Conference on Automated Software Engineering, p. 251. , Washington, DC, USA, IEEE Computer Society;
Marcus, A., Sergeyev, A., Rajlich, V., Maletic, J., An information retrieval approach to concept location in source code (2001) Proceedings of the 11th IEEE Working Conference on Reverse Engineering (WCRE2004), pp. 214-223. , Delft, The Netherlands, November 9-12;
McMillan, C., Grechanik, M., Poshyvanyk, D., Detecting similar software applications (2012) Proceedings of the 2012 International Conference on Software Engineering, ICSE 2012, pp. 364-374. , Piscataway, NJ, USA, IEEE Press;
Moussiades, L., Vakali, A., PDetect: A clustering approach for detecting plagiarism in source code datasets (2005) Computer Journal, 48 (6), pp. 651-661. , DOI 10.1093/comjnl/bxh119;
Mozgovoy, M., Desktop tools for offline plagiarism detection in computer programs (2006) Informatics in Education, 5 (1), pp. 97-112;
Mozgovoy, M., (2007) Enhancing Computer-aided Plagiarism Detection, , Dissertation, Department of Computer Science, University of Joensuu, Department of Computer Science, University of Joensuu, P. O. Box 111, FIN-80101 Joensuu, Finland, November;
Nakov, P., Latent semantic analysis of textual data (2000) CompSysTech'00: Proceedings of the Conference on Computer Systems and Technologies, pp. 5031-5035. , New York, NY, USA, ACM;
Nakov, P., Popova, A., Mateev, P., Weight functions impact on LSA performance (2001) Proceedings of the EuroConference Recent Advances in Natural Language Processing (RANLP'01), pp. 187-193. , John Benjamins, Amsterdam/Philadelphia;
Perfetti, C., The limits of co-occurrence: Tools and theories in language research (1998) Discourse Processes, 25, pp. 363-377;
Pincombe, B., (2004) Comparison of Human and LSA Judgements of Pairwise Document Similarities for a News Corpus, , Research Report No. AR-013-177, Defence Science and Technology Organisation - Australia;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Rehder, B., Schreiner, M., Wolfe, M., Lahaml, D., Kintsch, W., Landauer, T., Using latent semantic analysis to assess knowledge: Some technical considerations (1998) Discourse Processes, 25, pp. 337-354;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) SIGMOD'03: Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data, pp. 76-85. , New York, NY, USA, ACM;
Singhal, A., Buckley, C., Mitra, M., Pivoted document length normalization (1996) Proceedings of the 19th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pp. 21-29. , ACM Press;
Singhal, A., Salton, G., Mitra, M., Buckley, C., (1995) Document Length Normalization, , Technical report, Cornell University, Ithaca, NY, USA;
Wiemer-Hastings, P., How latent is latent semantic analysis? (1999) Proceedings of the Sixteenth International Joint Conference on Artificial Intelligence, IJCAI 99, pp. 932-941. , Morgan Kaufmann, July 31-August 6;
Wild, F., Stahl, C., Stermsek, G., Neumann, G., Parameters driving effectiveness of automated essay scoring with LSA (2005) Proceedings of the 9th International Computer Assisted Assessment Conference (CAA), pp. 485-494. , M. Danson, editor, Loughborough, UK, July, Professional Development;
Yi, L., Haiming, L., Zengxiang, L., Pu, W., A simplified latent semantic indexing approach for multilinguistic information retrieval (2003) Proceedings of the 17th Pacific Asia Conference on Language, Information and Computation (PACLIC17), pp. 69-79. , Sentosa, Singapore, COLIPS Publications;
Zeimpekis, D., Gallopoulos, E., Design of a MATLAB toolbox for term-document matrix generation (2005) Technical Report HPCLAB-SCG, , Computer Engineering and Informatics Department, University of Patras, Greece, February},
author = {Cosma, G and Joy, M},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Cosma, Joy - Evaluating the performance of LSA for source-code plagiarism detection.pdf:pdf},
issn = {03505596 (ISSN)},
journal = {Informatica (Slovenia)},
keywords = {Information retrieval,Intellectual property,Intelligent information retrieval,LSA,Latent Semantic Analysis,Mathematical algorithms,Parameter tuning,Parameter-tuning,Parameterization,Parameterized,Plagiarism detection,Preprocessing techniques,Retrieval performance,Semantic information,Semantics,Similarity detection,Similarity threshold,Source-code similarity detection,Term Frequency,Weighting approaches,Weighting scheme},
language = {English},
number = {4},
pages = {409--424},
title = {{Evaluating the performance of LSA for source-code plagiarism detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84871874532{\&}partnerID=40{\&}md5=dc2f8ad3e625ee65e7f61c1abcadeef8},
volume = {36},
year = {2012}
}
@incollection{Ng2012b,
abstract = {Programming assignments are usually considered as a major assessment component of a programming course. As the number of students enrolling in programming courses has been always high, it becomes a difficult task to mark a large number of programming assignments effectively in a short period of time. Moreover, plagiarism on program codes has become a serious problem recently. Markers may not be able to locate similar scripts that they have marked before. This paper introduces an online assignment management system which allows programming assignments to be submitted online and marked effectively. The marking of programming assignments involves two processes: plagiarism detection among different submitted source codes and automatic marking of individual assignment which includes program testing on different test cases and checking across the model answer. In this paper, we propose the use of parse tree for checking the similarity between program codes. The method can be employed in plagiarism detection and automatic marking of programming assignments. {\textcopyright} 2012 Springer-Verlag.},
address = {School of Science and Technology, Open University of Hong Kong, Hong Kong, Hong Kong},
annote = {Conference code: 91248

Export Date: 23 February 2015

Correspondence Address: Ng, S.-C.; School of Science and Technology, Open University of Hong Kong, Hong Kong, Hong Kong; email: scng@ouhk.edu.hk

References: Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting program similarity within a university programming environment (1987) Computers and Education, 11 (1), pp. 11-19; 
Verco, K.L., Wise, M.J., Software for Detecting Suspected Plagiarism: Comparing Structure and Attribute-Counting Systems First Australian Conference on Computer Science Education, ACSE 1996, Australia (1996);
Prechelt, L., Malpohl, G., Phlippsen, M., (2000) JPlag: Finding Plagiarisms among A Set of Programs, , Fakult{\"{a}}t f{\"{u}}r Informatik Technical Report 2000-1. Universit{\"{a}}t Kalrsruhe, Germany;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts Proceedings of the Twenty-Seventh SIGCSE Technical Symposium on Computer Science Education, SIGCSE 1996, Philadelphia, USA (1996);
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , ftp://ftp.cs.su.oz.au/michaelw/doc/RKRGST.ps, Department of Computer Science, University of Sydney (retrieved);
Joy, M., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions of Education, 42 (2), pp. 129-133;
Ahmadzadeh, M., Namvar, S., Soltani, M., JavaMarker: A Marking System for Java Programs (2011) International Journal of Computer Applications, 20 (2), pp. 15-20;
Higgins, C., Hegazy, T., Symeonidis, P., Tsintsifas, A., The CourseMarker CBA system: Improvements over Ceilidh (2003) Education and Information Technologies, 8 (3), pp. 287-304;
Jackson, D., Usher, M., Grading student programs using ASSYST Proceedings of the Twenty-Eighth SIGCSE Technical Symposium on Computer Science Education, SIGCSE 1997, San Jose, USA (1997);
Joy, M., Griffiths, N., Boyatt, R., The BOSS online submission and assessment system (2005) ACM Journal on Educational Resources in Computing, 5 (3), pp. 1-28;
Kodaganallur, V., Incorporating language processing into Java applications: A JavaCC tutorial (2004) IEEE Computer Society, 21 (3), pp. 70-77
A4 - Croucher Foundation; Sino-British Fellowship Trust; Wu Jieh Yee Charitable Foundation},
author = {Ng, Sin-Chun and Lui, Andrew Kwok-Fai and Wong, Lai-Shan},
booktitle = {International Conference on ICT in Teaching and Learning},
doi = {10.1007/978-3-642-31398-1_15},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Ng, Lui, Wong - Tree-Based Comparison for Plagiarism Detection and Automatic Marking of Programming Assignments.pdf:pdf},
isbn = {18650929 (ISSN); 9783642313974 (ISBN)},
keywords = {Automation,Forestry,Individual assignments,Information Retrieval,Intellectual property,Management systems,Mathematical Models,Model checking,Online assignments,Parse trees,Plagiarism detection,Program code,Program testing,Programing Languages,Programming assignments,Programming course,Short periods,Source codes,Teaching,Test case,Tree-based,automatic marking,plagiarism detection,programming assignments},
language = {English},
pages = {165--179},
title = {{Tree-Based Comparison for Plagiarism Detection and Automatic Marking of Programming Assignments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84864049325{\&}partnerID=40{\&}md5=903716174820c640b5d36236dd2a9f16 http://link.springer.com/10.1007/978-3-642-31398-1{\_}15},
volume = {302 CCIS},
year = {2012}
}
@inproceedings{5578975,
abstract = {In this paper, a plagiarism detection model based on XML is introduced to detect similarities among programs. Based upon the syntax of a specific programming language, the key structure which can represent the procedural structure is picked out from C program. Then using XML text represent C program. According to different key structure, we design the different similarity comparison algorithm to calculate the procedural similarity. Finally the usefulness of the detection of plagiarism is discussed.},
address = {Chengdu, China},
annote = {From Duplicate 1 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu)

From Duplicate 1 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180

From Duplicate 2 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu; Zhong, M; Liu, D)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180

From Duplicate 2 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180

From Duplicate 2 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180

From Duplicate 3 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu; Zhong, M; Liu, D)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180

From Duplicate 2 (An XML plagiarism detection model for C program - Mei, Zhong Mei Zhong; Dongsheng, Liu Dongsheng Liu)

From Duplicate 1 (An XML plagiarism detection model for C program - Zhong, M; Liu, D)

cited By 0; Conference of 2010 3rd International Conference on Advanced Computer Theory and Engineering, ICACTE 2010 ; Conference Date: 20 August 2010 Through 22 August 2010; Conference Code:82180},
author = {Mei, Zhong and Dongsheng, Liu},
booktitle = {3rd International Conference on Advanced Computer Theory and Engineering},
doi = {10.1109/ICACTE.2010.5578975},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Mei, Dongsheng - An XML plagiarism detection model for C program.pdf:pdf},
isbn = {978-1-4244-6539-2},
issn = {2154-7491},
keywords = {C program,XML text,plagiarism detection,similarity},
month = {aug},
pages = {V1--460--V1--464},
publisher = {IEEE},
title = {{An XML plagiarism detection model for C program}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78149309700{\&}partnerID=40{\&}md5=90627b291ceb21da7f30b409f3390da5 http://ieeexplore.ieee.org/document/5578975/},
volume = {1},
year = {2010}
}
@inproceedings{Mateljan2011,
abstract = {The paper shows the possibility of analyzing programming code similarity by using intermediate language. Intermediate language that is generated by compiler is not sensitive to different kind of common code transformations, like changing variable names, modifications of some language constructs and loops. Therefore, the changes in original source code result in lesser changes in intermediate language code, that has positive effect on the results of code similarity analysis. Paper proposes a method for determining the similarity of programming code, and relies on existing and efficient string similarity algorithms. Method's performance is shown by analyzing source code of applications submitted by students, as their homework. The paper describes method's advantages and disadvantages, and suggests future steps to improve its results and accuracy. {\textcopyright} 2011 MIPRO.},
address = {Zagreb, Croatia},
annote = {Conference code: 86227

Export Date: 23 February 2015

Correspondence Address: Mateljan, V.; Faculty of Humanities and Social Sciences, Department of Information Sciences, Zagreb, Croatia; email: vladimir.mateljan@gmail.com

References: Buttler, D., A Short Survey of Document Structure Similarity Algorithms, , http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.125. 1983{\&}rep=rep1{\&}type=pdf; 
Chapman, S., (2006) SimMetrics, Open Source Library of Similarity Metrics, , http://staffwww.dcs.shef.ac.uk/people/S.Chapman/stringmetrics.html;
Church, W.K., Helfman, J.I., Dotplot: A Program for Exploring Self-Similarity in Millions of Lines of Text and Code., , http://imagebeat.com/dotplot/rp.jcgs.pdf;
Clough, P., Plagiarism in natural and programming languages: An overview of current tools and technologies (2000) Ftp://www.dlsi.ua.es/people/armando/maria/Plagiarism.rtf;
Cohen, W.W., Ravikumar, P., Fienberg, S.E., A Comparison of String Distance Metrics for Name-Matching Tasks, , http://www.cs.cmu.edu/{\~{}}wcohen/postscript/ijcaiws-2003.pdf;
Common Intermediate Language, , http://en.wikipedia.org/wiki/Common-Intermediate-Language, 17.12. 2010;
Culwin, F., Lancaster, T., A Review of Electronic Services for Plagiarism Detection in Student Submissions, , http://www.ics.heacademy.ac.uk/events/presentations/317-Culwin.pdf;
Goel, S., Rao, D., Plagiarism and Its Detection in Programming Languages, , http://www.stanford.edu/{\~{}}drao/Resources/Plagiarism.pdf;
Kang, N., Gelbukh, A., Han, S., PPChecker: Plagiarism Pattern Checker in Document Copy Detection, , http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107. 8122{\&}rep=rep1{\&}type=pdf;
List of CIL Instructions, , http://en.wikipedia.org/wiki/List-of-CIL-instructions, 17.12. 2010;
Lyon, C., Barret, R., Malcolm, J., A Theoretical Basis to the Automated Detection of Copying between Texts, and Its Practical Implementation in the Ferret Plagiarism and Collusion Detector, , http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.66.8927{\&}rep= rep1{\&}type=pdf;
Parker, A., Hamblen, J., Computer algorithms for Plagiarism Detection (1989) IEEE Transactions on Education, 32 (2). , May;
Verco, L.K., Wise, J.M., (2006) Software for Detecting Suspected Plagiarism: Comparing Structure and Attribute-Counting Systems, , http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.47.8300{\&}rep= rep1{\&}type=pdf;
Wise, J.M., Detection of Similarities in Student Programs: yap'Ing May Be Preferable to Plagueing., , http://luggage.bcs.uwa.edu.au/{\~{}}michaelw/ftp/doc/yap.ps;
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , http://vernix.org/marcel/share/RKR-GST.ps
A4 - Nokia Siemens Networks; T-Croatian Telecom; Croatian Electricity Company (HEP); Ericsson Nikola Tesla; Koncar - Electrical Industries},
author = {Mateljan, V and Juri{\v{c}}i{\'{c}}, V and Peter, K},
booktitle = {34th International Convention on Information and Communication Technology, Electronics and Microelectronics},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Mateljan, Juri{\v{c}}i{\'{c}}, Peter - Analysis of programming code similarity by using intermediate language.pdf:pdf},
isbn = {9789532330670 (ISBN)},
keywords = {Algorithms,Analysis,Code transformation,Cosine transforms,Engineering exhibitions,Information technology,Intermediate languages,Language constructs,Microelectronics,Plagiarism detection,Plagiarism detection algorithm,Positive effects,Programming codes,Similarity,Similarity analysis,Source code,Source codes,String similarity},
language = {English},
pages = {1235--1240},
title = {{Analysis of programming code similarity by using intermediate language}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-80052285195{\&}partnerID=40{\&}md5=f5eca5554714231d595886b840a14e75},
year = {2011}
}
@article{Lin2013,
abstract = {In recent years, most of source code plagiarism detection systems are based on pairwise comparing representations of the program structures, called structure-metric systems. However, these systems have limitations. In this study, a Markov model based source code plagiarism detection tool is proposed (called MPlag) to cope with the limitations. It applies Markov models to students' coding process data recorded while writing a program to detect plagiarism. MPlag reduces the probability of obtaining the false positives caused by coincident similarities. In addition, MPlag improves scalability by reducing the time complexity from O(n2) to O(n). Furthermore, MPlag is programming language independent and provides robust evidence for proving plagiarism by replaying a student's coding process. The experimental results revealed that MPlag had high effectiveness in detecting complex programs as well as in detecting simpler programs. {\textcopyright} 2013 ICIC International.},
address = {Department of Information Management, National Yunlin University of Science and Technology, No. 123, University Road, Section 3, Douliou, Yunlin 64002, Taiwan},
annote = {Export Date: 23 February 2015

Correspondence Address: Department of Information Management, National Yunlin University of Science and Technology, No. 123, University Road, Section 3, Douliou, Yunlin 64002, Taiwan

References: Ohno, A., Murao, H., A two-step in-class source code plagiarism detection method utilizing improved CM algorithm and SIM (2011) International Journal of Innovative Computing, Information and Control, 7 (8), pp. 4729-4739; 
McCabe, D.L., Cheating among college and university students: A north American perspective (2005) Int. J. For Educational Integrity, 1 (1), pp. 1-11;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Trans. Information Theory, 50 (7);
Whale, G., Identification of program similarity in large populations (1990) The Computer J, 33 (2), pp. 140-146;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. of ACM SIGMOD Conf. On Management of Data, pp. 76-85. , San Diego, CA, USA;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. of Universal Computer Science, 8 (11), pp. 1016-1038;
Gitchell, D., Tran, N., SIM: A utility for detecting similarity in computer programs (1999) Proc. of the 30th SIGCSE Technical Symposium On Computer Science Education, pp. 266-270;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2007) Software - Practice and Experiences, 37, pp. 151-175;
Rosales, F., Garcia, A., Rodriguez, S., Pedraza, J., Mendez, R., Nieto, M.M., Detection of plagiarism in programming assignments (2008) IEEE Trans. Education, 51 (2), pp. 174-183;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Trans. Education, 42 (2), pp. 129-133;
Poon, J.Y.H., Sugiyama, K., Tan, Y.F., Kan, M.Y., Instructor-centric source code plagiarism detection and plagiarism corpus (2012) Proc. of the 17th ACM Conf. On Innovation and Technology In Computer Science Education, pp. 122-127. , Haifa, Israel;
Duric, Z., Gasevic, D., A source code similarity system for plagiarism detection (2012) The Computer J;
Cosma, G., Joy, M., An approach to source-code plagiarism detection and investigation using latent semantic analysis (2012) IEEE Trans. Computers, 61 (3), pp. 379-394;
Ohno, A., Murao, H., A new similarity measure for in-class source code plagiarism detection (2009) International Journal of Innovative Computing, Information and Control, 5 (11 B), pp. 4237-4247;
Tung, S.H., Lin, T.T., Lin, Y.H., (2012) PLWeb Web Site, , http://plweb.org;
Rabiner, L.R., A tutorial on hidden Markov model and selected applications in speech recognition (1989) Proc. of the IEEE, 77 (2), pp. 257-286},
author = {Lin, T.-T. and Tung, S.-H.},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Lin, Tung - Plagiarism detection in programming exercises using a Markov model approach.pdf:pdf},
issn = {1881803X (ISSN)},
journal = {ICIC Express Letters},
keywords = {Complex programs,Computer programming languages,Intellectual property,Markov model,Markov processes,Plagiarism detection,Program structures,Programming exercise,Programming learning,Source code plagiarism detection,Source code plagiarisms,Time complexity},
language = {English},
number = {9},
pages = {2563--2568},
title = {{Plagiarism detection in programming exercises using a Markov model approach}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84884509326{\&}partnerID=40{\&}md5=53c94925cad68e7b7e2b821a22527152},
volume = {7},
year = {2013}
}
@inproceedings{ISI:000324282200108,
abstract = {Software plagiarism is a growing and serious problem that affects computer science universities in particular and the quality of education in general. More and more students tend to copy their thesis's software from older theses or internet databases. Checking source codes manually, to detect if they are similar or the same, is a laborious and time consuming job, maybe even impossible due to existence of large digital repositories. Ontology is a way of describing a document's semantic, so it can be easily used for source code files too. OWL Web Ontology Language could find its applicability in describing both vocabulary and taxonomy of a programming language. SPARQL is a query language based on SQL that extracts saved or deducted information from ontologies, including complex data based on algebraic logic. Our paper proposes a source code plagiarism detection method based on ontology mapping that can be applied in scanning students' bachelor's or master's degree theses' software source code.},
address = {Bucharest, Romania},
annote = {12th International Conference on Informatics in Economy (IE 2013),
Education, Research {\&} Business Technologies, Bucharest, ROMANIA, APR
25-28, 2013},
author = {Smeureanu, Ion and Iancu, Bogdan},
booktitle = {International Conference on Informatics in Economy},
editor = {{Boja, C and Batagan, L and Doinea, M and Ciurea, C and Pocatilu, P and Ion, A and Magos, R and Cotfas, L and Velicanu, A and Amancei, C and Andreica, M and Zamfiroiu}, A},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Smeureanu, Iancu - Source code plagiarsim detection method using ontologies.pdf:pdf},
issn = {2284-7472},
keywords = {OWL,Ontology,Plagiarism,SPARQL},
organization = {Bucharest Univ Econ Studies; Dept Econ Informat {\&} Cybernetics; INFOREC Assoc},
pages = {594--597},
publisher = {Buchares Univ Economic Studies-ASE},
series = {International Conference on Informatics in Economy},
title = {{Source code plagiarsim detection method using ontologies}},
type = {Proceedings Paper},
year = {2013}
}
@inproceedings{ISI:A1990BU70A00002,
address = {Eugene, Oregon, USA},
annote = {11TH NATIONAL EDUCATIONAL COMPUTING CONF ( NECC 90 ), NASHVILLE, TN, JUN
25-27, 1990},
author = {Rambally, G K and Lesage, M},
booktitle = {Proceedings - National educational computing conference},
editor = {Ellis, E},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1990 - AN INDUCTIVE INFERENCE APPROACH TO PLAGIARISM DETECTION IN COMPUTER-PROGRAMS.pdf:pdf},
isbn = {0-924667-69-9},
organization = {CLEMSON UNIV; BELMONT COLL; MISSISSIPPI STATE UNIV; MURRAY STATE UNIV},
pages = {23--29},
publisher = {INT SOC Technology Education},
title = {{An inductive inference approach to plagiarsim detection in computer-programs}},
type = {Proceedings Paper},
year = {1990}
}
@article{Shah2016645,
abstract = {In this paper we propose different representations of a source code, which attempt to highlight different aspects of a code; particularly: (i) lexical, (ii) structural, and (iii) stylistics. For the lexical view, we used levenshtein distance without considering all reserved words of the programming language. For the structural view, we proposed a similarity metric that takes into account the function's signatures and variable declaration within a source code. The third view consists of several stylistic features, such as the number of white spaces, lines of code, upper case letters, etc. At the end, we combine these different representations in several ways. Obtained results indicate that proposed representations provide some information that allows to detect particular cases of source code re-use. {\textcopyright} Springer Science+Business Media Singapore 2016.},
annote = {cited By 0; Conference of International Conference on Information and Communication Technology for Sustainable Development, ICT4SD 2015 ; Conference Date: 3 July 2015 Through 4 July 2015; Conference Code:167399},
author = {Shah, Nrupesh and Modha, Sandip and Dave, Dhruv},
doi = {10.1007/978-981-10-0135-2_62},
editor = {{Satapathy S.C. Modi N.}, Pathak N Joshi A},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Shah, Modha, Dave - Differential Weight Based Hybrid Approach to Detect Software Plagiarism.pdf:pdf},
isbn = {9789811001338},
issn = {21945357},
journal = {Advances in Intelligent Systems and Computing},
pages = {645--653},
publisher = {Springer Verlag},
title = {{Differential Weight Based Hybrid Approach to Detect Software Plagiarism}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84960415716{\&}partnerID=40{\&}md5=db3dfbd47b1bf3a4a30bd364964c2b17 http://link.springer.com/10.1007/978-981-10-0135-2{\_}62},
volume = {409},
year = {2016}
}
@article{Rahal2014,
abstract = {Source code plagiarism is easy to commit but difficult to catch. Many approaches have been proposed in the literature to automate its detection; however there is little consensus on what works best. In this paper, we propose two new measures for determining the accuracy of a given technique and describe an approach to convert code files into strings which can then be compared for similarity in order to detect plagiarism. We then compare several string comparison techniques, heavily utilised in the area of biological sequence alignment, and compare their performance on a large collection of student source code containing various types of plagiarism. Experimental results show that the compared techniques succeed in matching a plagiarised file to its original files upwards of 90{\%} of the time. Finally, we propose a modification for these algorithms that drastically improves their runtimes with little or no effect on accuracy. Even though the ideas presented herein are applicable to most programming languages, we focus on a case study pertaining to an introductory-level Visual Basic programming course offered at our institution. {\textcopyright} 2014 World Scientific Publishing Co.},
annote = {cited By 1},
author = {Rahal, Imad and Wielga, Colin},
doi = {10.1142/S0219649214500282},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Rahal, Wielga - Source Code Plagiarism Detection Using Biological String Similarity Algorithms.pdf:pdf},
issn = {0219-6492},
journal = {Journal of Information {\&} Knowledge Management},
month = {sep},
number = {03},
pages = {1450028},
publisher = {World Scientific Publishing Co. Pte Ltd},
title = {{Source Code Plagiarism Detection Using Biological String Similarity Algorithms}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84941347150{\&}partnerID=40{\&}md5=af9443b7cf7b3e6572b302961dab50e2 http://www.worldscientific.com/doi/abs/10.1142/S0219649214500282},
volume = {13},
year = {2014}
}
@article{Qiu20151171,
abstract = {Measuring program similarity plays an important role in solving many problems in software engineering. However, because programs are instruction sequences with complex structures and semantic functions and furthermore, programs may be obfuscated deliberately through semantics-preserving transformations, measuring program similarity is a difficult task that has not been adequately addressed. In this paper, we propose a new approach to measuring Java program similarity. The approach first measures the low-level similarity between basic blocks according to the bytecode instruction sequences and the structural property of the basic blocks. Then, an error-tolerant graph matching algorithm that can combat structure transformations is used to match the Control Flow Graphs (CFG) based on the basic block similarity. The high-level similarity between Java programs is subsequently calculated on the matched pairs of the independent paths extracted from the optimal CFG matching. The proposed CFG-Match approach is compared with a string-based approach, a tree-based approach and a graph-based approach. Experimental results show that the CFG-Match approach is more accurate and robust against semantics-preserving transformations. The CFG-Match approach is used to detect Java program plagiarism. Experiments on the collection of benchmark program pairs collected from the students' submission of project assignments demonstrate that the CFG-Match approach outperforms the comparative approaches in the detection of Java program plagiarism. {\textcopyright} 2015 World Scientific Publishing Company.},
annote = {cited By 0},
author = {Qiu, Dehong and Sun, Jialin and Li, Hao},
doi = {10.1142/S0218194015500229},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Qiu, Sun, Li - Improving Similarity Measure for Java Programs Based on Optimal Matching of Control Flow Graphs.pdf:pdf},
issn = {0218-1940},
journal = {International Journal of Software Engineering and Knowledge Engineering},
keywords = {Algorithms,Comparative approach,Computer software,Control flow graphs,Data flow analysis,Embedded systems,Error-},
month = {sep},
number = {07},
pages = {1171--1197},
publisher = {World Scientific Publishing Co. Pte Ltd},
title = {{Improving Similarity Measure for Java Programs Based on Optimal Matching of Control Flow Graphs}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84951746917{\&}partnerID=40{\&}md5=0714bf0a0dd06c281dd56f5b0129d336 http://www.worldscientific.com/doi/abs/10.1142/S0218194015500229},
volume = {25},
year = {2015}
}
@article{Karuna2016,
abstract = {Background/Objectives: Rising Plagiarism incidences among students has become a common source of stress for academic community. This research is undertaken to reduce plagiarism in programming labs of universities across globe, faculty evaluation system development, and to remove social media use in labs. Methods/Statistical Analysis: Students of 21st century copy and exchange software codes available online with each other and at times even pay third-parties for timely submission of lab-assignments. They feel exchanging assignments with others maintain their social rapport/image among their friends. Our research initiated with Hawk-Eye that's a mobile based plagiarism detection system easy to handle and maintain. By further research we had observed that Hawk-Eye combination with Cohort-Intelligence (CI) would lead to design of more reliable plagiarism evaluation system. As Hawk's penetrating eyesight help in successful plagiarism detection and CI self-supervising nature helps to prevent students plagiarized behavior. Findings: The key motivation behind writing this paper is to highlight the fact that plagiarism in today's cyber age is contributing as a global business option in academic areas. So the design of evaluation systems in Universities should be flexible enough to lessen the overall incidence of plagiarism and motivating its students for not breaking University rules and regulations. Applications/Improvements: Hawk Eye along with CI would prove to be an efficient system to design an incrementally learning evaluation system as a measure in Universities to stop plagiarism that would continue to evolve every year with new semester.},
annote = {cited By 0},
author = {Karuna, Puri and Preeti, Mulay},
doi = {10.17485/ijst/2016/v9i15/92113},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Karuna, Preeti - Global Plagiarism Management Through Intelligence of Hawk Eye.pdf:pdf},
issn = {0974-5645},
journal = {Indian Journal of Science and Technology},
month = {may},
number = {15},
publisher = {Indian Society for Education and Environment},
title = {{Global Plagiarism Management Through Intelligence of Hawk Eye}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969528720{\&}partnerID=40{\&}md5=104dff6e47cb0f6ca950d2a4d949a0fd http://www.indjst.org/index.php/indjst/article/view/92113},
volume = {9},
year = {2016}
}
@conference{Tselikas2014232,
abstract = {In programming language courses, programming exercises and assignments are typical measurable tasks used to determine the skills and knowledge of students on the respective programming language. On the other hand, widespread access to the Internet has served as something of a double-edged sword with respect to plagiarism appearance in exercises, assignments, etc. We present a viable architecture implementing plagiarism detection and decision in a programming laboratory environment. The proposed architecture could be realized as an extension of an already implemented diagnosing and evaluation system for laboratory based academic exercises, which exploits the legacy system as well as the already existing plagiarism detection tools, such as MOSS or JPlag. We combine the input of plagiarism detection tools with the corresponding logging information of the existing monitoring and tracing subsystem of the legacy system, in order to conclude in a safer manner whether a case of potential plagiarism indeed is plagiarism or not. {\textcopyright} 2014 IADIS.},
address = {Madrid; Spain},
annote = {cited By 0; Conference of 7th IADIS International Conference on Information Systems, IS 2014 ; Conference Date: 28 February 2014 Through 2 March 2014; Conference Code:114447},
author = {Tselikas, N.D.a and Samarakou, M.b and Karolidis, D.b and Prentakis, P.b and Athineos, S.c},
booktitle = {Proceedings of the 7th IADIS International Conference Information Systems},
editor = {{Nunes M.B. Rodrigues L.}, Powell P Isaias P},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Tselikas et al. - Automatic plagiarism detection in programming laboratory courses.pdf:pdf},
isbn = {9789898704047},
keywords = {Automatic programming,Computational linguistics,Computer-aided education,Intellectual property,Labo,Laboratory course},
pages = {232--238},
publisher = {IADIS},
title = {{Automatic plagiarism detection in programming laboratory courses}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84944028416{\&}partnerID=40{\&}md5=fb6dfa18821a2ea4db7f6953ce7be18b},
year = {2014}
}
@article{Martins2015153,
abstract = {We propose a methodology using abstract syntax trees for the detection of plagiarism in source code, within an academic environment. We show the architecture and decisions that came before we produce our own solution (Spector), after conducting a study of the methods and tools in existence. An example is then shown, which goes through and explains each of the algorithms steps. Finally, conclusions are drawn noting that such a system, while not the most efficient, produces accurate results. {\textcopyright} Springer International Publishing Switzerland 2015.},
annote = {cited By 0; Conference of 4th International Symposium on Languages, Applications and Technologies, SLATE 2015 ; Conference Date: 18 June 2015 Through 19 June 2015; Conference Code:159539},
author = {Martins, V{\'{i}}tor T and Henriques, Pedro Rangel and da Cruz, Daniela},
doi = {10.1007/978-3-319-27653-3_15},
editor = {{Sierra-Rodriguez J.-L. Leal J.P.}, Simoes A},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Martins, Henriques, da Cruz - An AST-based Tool, Spector, for Plagiarism Detection The Approach, Functionality, and Implementatio.pdf:pdf},
isbn = {9783319276526},
issn = {18650929},
journal = {Communications in Computer and Information Science},
keywords = {Abstract Syntax Trees,Academic environment,Comp,Computational linguistics,Computer software,Erro,Intellectual property},
pages = {153--159},
publisher = {Springer Verlag},
title = {{An AST-based Tool, Spector, for Plagiarism Detection: The Approach, Functionality, and Implementation}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84952671614{\&}partnerID=40{\&}md5=bfe0f7eae342de263372ab6b8fd03aab http://link.springer.com/10.1007/978-3-319-27653-3{\_}15},
volume = {563},
year = {2015}
}
@article{Misic2016738,
abstract = {Computing education usually involves intensive practical training through laboratory exercises, programming projects, and homework assignments. Those assignments are frequent targets for plagiarism. In this paper, we discuss social and educational aspects of the source code plagiarism in academic environment, and present an overview of software tools for source code similarity detection. We present our experiences with JPlag, Moss, and SPD tools, and compare them using simulated plagiarism based on programming assignment solutions produced after 1, 2, 4, and 8 hours of work on baseline version using more than 20 types of lexical and structural modifications that students use to hide plagiarism. We also compare results of the selected tools used on real-life student programming solutions from three different courses. The courses were attended by 100 to 300 students, and the programming assignment solutions varied in size and complexity from 50 to 1000 lines of source code. The results show that 5-10{\%} of students plagiarized their solutions. In our experience, JPlag and Moss proved to be effective tools for plagiarism detection, as they clearly indicated cases of similarity which were manually confirmed by human code inspection. {\textcopyright} 2016 TEMPUS Publications.},
annote = {cited By 0},
author = {Misic, M and Siustran, Z and Protic, J},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Misic, Siustran, Protic - A comparison of software tools for plagiarism detection in programming assignments.pdf:pdf},
issn = {0949149X},
journal = {International Journal of Engineering Education},
keywords = {C,Code similarities,Codes (symbols),Computer programming languages,JPlag,Moss,Plagiarism detect,Students},
number = {2},
pages = {738--748},
publisher = {Tempus Publications},
title = {{A comparison of software tools for plagiarism detection in programming assignments}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84961675265{\&}partnerID=40{\&}md5=e25007cd4364a4d7604028bda05cb658},
volume = {32},
year = {2016}
}
@conference{Flores201421,
abstract = {This paper summarizes the goals, organization and results of the first SOCO competitive evaluation campaign for systems that automatically detect the source code re-use phenomenon. The detection of source code re-use is an important research field for both software industry and academia fields. Accordingly, PAN@FIRE track, named SOurce COde Re-use (SOCO) focused on the detection of re-used source codes in C/C++ and Java programming languages. Participant systems were asked to annotate several source codes whether or not they represent cases of source code re-use. In total five teams submitted 17 runs. The training set consisted of annotations made by several experts, a feature which turns the SOCO 2014 collection in a useful data set for future evaluations and, at the same time, it establishes a standard evaluation framework for future research works on the posed shared task. {\textcopyright} 2015 ACM.},
address = {New York, New York, USA},
annote = {cited By 0; Conference of 6th International Workshop of the Forum for Information Retrieval Evaluation, FIRE 2014 ; Conference Date: 5 December 2014 Through 7 December 2014; Conference Code:119052},
author = {Flores, Enrique and Rosso, Paolo and Moreno, Lidia and Villatoro-Tello, Esa{\'{u}}},
booktitle = {Proceedings of the Forum for Information Retrieval Evaluation},
doi = {10.1145/2824864.2824878},
editor = {{Mehta P. Mitra M.}, Agrawal M Majumder P},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Flores et al. - On the Detection of SOurce COde Re-use.pdf:pdf},
isbn = {9781450337557},
keywords = {C (programming language),Codes (symbols),Computer pr,Computer programming,Evaluation framework,Plagiarism detection,SOCO},
pages = {21--30},
publisher = {ACM Press},
title = {{On the Detection of SOurce COde Re-use}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84959866977{\&}partnerID=40{\&}md5=7a458d2d6c811c5fa9c3daec960c3887 http://dl.acm.org/citation.cfm?doid=2824864.2824878},
year = {2015}
}
@book{Ng2008217,
abstract = {Plagiarism is a common problem in education, and detecting it is a very difficult task if a marker is responsible for marking only some of the scripts. The situation becomes worse for distance learning as some students are allowed to submit assignments after the due dates and markers may have to mark assignments over quite a long period of time. They might forget ‚Äòsimilar' scripts that they marked some time before. This chapter introduces an integrated online assessment system for markers to detect plagiarism of program codes in a more structured, less computational and more flexible way. We propose a new algorithm using parse tree for detecting plagiarism of programming codes. The use of parse tree introduces a structured and systematic way for detecting similarities among computer programs. The assessment system provides multiple features to aid in the effective marking of assignments, such as plagiarism detection, automatic program testing and students performance statistics. The aim of these features is to relieve the burden of teaching staff and provide an alternative way to paper-based marking. {\textcopyright} 2008 by World Scientific Publishing Co. Pte. Ltd. All rights reserved.},
annote = {cited By 0},
author = {Ng, S. C. and Choy, S. O. and Kwan, R.},
booktitle = {Enhancing Learning Through Technology},
doi = {10.1142/9789812799456_0014},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Ng, Choy, Kwan - An intelligent online assessment system for programming courses.pdf:pdf},
isbn = {9789812799456; 9812799443; 9789812799449},
month = {jun},
pages = {217--231},
publisher = {WORLD SCIENTIFIC},
title = {{An intelligent online assessment system for programming courses}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84969233490{\&}partnerID=40{\&}md5=edc29d78b54af7479e23a6a026c9baa1 http://www.worldscientific.com/doi/abs/10.1142/9789812799456{\_}0014},
year = {2008}
}
@conference{Shah201515,
abstract = {In today's digital era information access is just a click away. so computer science students also have easy access to all the source codes from different websites thus it has become difficult for academicians to detect source code reuse in students programming assignments. The new trend in the area of source code reuse is using the source code by translating it in another programming language popularly known as cross language plagiarism. Our CLSCR addresses this problem. CLSCR mainly has two components: A compiler that compiles and translates the language specific source code into a tool specific internal format and The Similarity calculator that computes similarity between internal formats of different programs.},
annote = {cited By 0; Conference of 7th Workshops at the Forum for Information Retrieval Evaluation, FIRE-WS 2015 ; Conference Date: 4 December 2015 Through 6 December 2015; Conference Code:122150},
author = {Shah, D and Jethani, H and Joshi, H},
booktitle = {CEUR Workshop Proceedings},
editor = {{Majumder P. Mehta P.}, Agrawal M Mitra M},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Shah, Jethani, Joshi - (CLSCR) cross language source code reuse detection using intermediate language.pdf:pdf},
issn = {16130073},
keywords = {CLSCR,Codes (symbols),Comput,Computational linguistics,Computer science students,Cross languages,Translation (languages)},
pages = {15--18},
publisher = {CEUR-WS},
title = {{(CLSCR) cross language source code reuse detection using intermediate language}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84977572612{\&}partnerID=40{\&}md5=a115b16611b1c03cdaa271a2604e747a},
volume = {1587},
year = {2015}
}
@inproceedings{Domin:2016:IPD:2851581.2892512,
abstract = {Plagiarism in online learning environments has a detrimental e ect on the trust of online courses and their viability. Automatic plagiarism detection systems do exist yet the speci c situation in online courses restricts their use. To allow for easy automated grading, online assignments usually are less open and instead require students to ll in small gaps. Therefore solutions tend to be very similar, yet are then not necessarily plagiarized. In this paper we propose a new approach to detect code re-use that increases the prediction accuracy by dynamically removing parts in assignments which are part of almost every assignment|the so called common ground. Our approach shows signi cantly better F-measure and Cohen's  results than other state of the art algorithms such as Moss or JPlag. The proposed method is also language agnostic to the point that training and test data sets can be taken from di erent programming languages.},
address = {New York, New York, USA},
author = {Domin, Christian and Pohl, Henning and Krause, Markus},
booktitle = {Proceedings of the 2016 CHI Conference Extended Abstracts on Human Factors in Computing Systems},
doi = {10.1145/2851581.2892512},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Domin, Pohl, Krause - Improving Plagiarism Detection in Coding Assignments by Dynamic Removal of Common Ground.pdf:pdf},
isbn = {9781450340823},
keywords = {computer science education,massive open online course,plagiarism},
pages = {1173--1179},
publisher = {ACM Press},
series = {CHI EA '16},
title = {{Improving Plagiarism Detection in Coding Assignments by Dynamic Removal of Common Ground}},
url = {http://doi.acm.org/10.1145/2851581.2892512 http://dl.acm.org/citation.cfm?doid=2851581.2892512},
year = {2016}
}
@article{Heron:2016:MMP:2874239.2874304,
abstract = {Tools for algorithmically detecting plagiarism have become very popular, but none of these tools offers an effective and reliable way to identify plagiarism within academic software development. As a result, the identification of plagiarism within programming submissions remains an issue of academic judgment. The number of submissions that come in to a large programming class can frustrate the ability to fully investigate each submission for conformance with academic norms of attribution. It is necessary for academics to investigate misconduct, but time and logistical considerations likely make it difficult, if not impossible, to ensure full coverage of all solutions. In such cases, a subset of submissions may be analyzed, and these are often the submissions that have most readily come to mind as containing suspect elements. In this paper, the authors discuss some of the issues with regards to identifying plagiarism within programming modules, and the ethical issues that these raise. The paper concludes with some personal reflections on how best to deal with the complexities so as to ensure fairer treatment for students and fairer coverage of submissions.},
address = {New York, NY, USA},
author = {Heron, Michael James and Belford, Pauline},
doi = {10.1145/2874239.2874304},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Heron, Belford - Musings on misconduct A Practitioner Reflection on the Ethical Investigation of Plagiarism within Programming Mo.pdf:pdf},
issn = {00952737},
journal = {ACM SIGCAS Computers and Society},
keywords = {academic misconduct,attribution,education,ethics,morality,plagiarism,programming,teaching},
month = {jan},
number = {3},
pages = {438--444},
publisher = {ACM},
title = {{Musings on misconduct: A Practitioner Reflection on the Ethical Investigation of Plagiarism within Programming Modules}},
url = {http://doi.acm.org/10.1145/2874239.2874304 http://dl.acm.org/citation.cfm?doid=2874239.2874304},
volume = {45},
year = {2016}
}
@inproceedings{Sheahen:2016:TME:2876034.2893435,
abstract = {Cheating in computer science classes can damage the reputation of institutions and their students. It is therefore essential to routinely authenticate student submissions with available software plagiarism detection algorithms such as Measure of Software Similarity (MOSS). Scaling this task for large classes where assignments are repeated each semester adds complexity and increases the instructor workload. The MOSS Tool for Addressing Plagiarism at Scale (MOSS-TAPS), organizes the MOSS submission task in courses that repeat coding assignments. In a recent use-case in the Online Master of Science in Computer Science (OMSCS) program at the Georgia Institute of Technology, the instructor time spent was reduced from 50 hours to only 10 minutes using the managed submission tool design presented here. MOSS-TAPS provides persistent configuration, supports a mixture of software languages and file organizations, and is implemented in pure Java for cross-platform compatibility.},
address = {New York, New York, USA},
author = {Sheahen, Dana and Joyner, David},
booktitle = {Proceedings of the Third ACM Conference on Learning @ Scale},
doi = {10.1145/2876034.2893435},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2016 - Sheahen, Joyner - TAPS A MOSS Extension for Detecting Software Plagiarsim at Scale.pdf:pdf},
isbn = {9781450337267},
keywords = {academic integrity,cheating,moss,software plagiarism},
pages = {285--288},
publisher = {ACM Press},
series = {L@S '16},
title = {{TAPS: A MOSS Extension for Detecting Software Plagiarsim at Scale}},
url = {http://doi.acm.org/10.1145/2876034.2893435 http://dl.acm.org/citation.cfm?doid=2876034.2893435},
year = {2016}
}
@article{Flores2014a,
abstract = {The advent of the Internet has caused an increase in content reuse, including source code. The purpose of this research is to uncover potential cases of source code reuse in large-scale environments. A good example is academia, where massive courses are taught to students who must demonstrate that they have acquired the knowledge. The need of detecting content reuse in quasi real-time encourages the development of automatic systems such as the one described in this paper for source code reuse detection. Our approach is based on the comparison of programs at character level. It is able to find potential cases of reuse across a huge number of assignments. It achieved better results than JPlag, the most used online system to find similarities among multiple sets of source codes. The most common obfuscation operations we found were changes in identifier names, comments and indentation. {\textcopyright} 2014 Wiley Periodicals, Inc.},
address = {Universitat Polit{\`{e}}cnica de Val{\`{e}}nciaVal{\`{e}}nciaSpain},
annote = {From Duplicate 1 (Uncovering source code reuse in large-scale academic environments - Flores, E; Barr{\'{o}}n-Cede{\~{n}}o, A; Moreno, L; Rosso, P)

Export Date: 23 February 2015

Article in Press

CODEN: CAPEE

Correspondence Address: Flores, E.; Universitat Polit{\`{e}}cnica de Val{\`{e}}nciaVal{\`{e}}nciaSpainemail: eflores@dsic.upv.es

From Duplicate 2 (Uncovering source code reuse in large-scale academic environments - Flores, E.a; Barr{\~{o}}n-Cede{\~{n}}o, A.b; Moreno, L.a; Rosso, P.a; Barr{\'{o}}n-Cede{\~{n}}o, A; Moreno, L.a; Rosso, P.a)

From Duplicate 1 (Uncovering source code reuse in large-scale academic environments - Flores, E; Barr{\'{o}}n-Cede{\~{n}}o, A; Moreno, L; Rosso, P)

Export Date: 23 February 2015

Article in Press

CODEN: CAPEE

Correspondence Address: Flores, E.; Universitat Polit{\`{e}}cnica de Val{\`{e}}nciaVal{\`{e}}nciaSpainemail: eflores@dsic.upv.es

From Duplicate 2 (Uncovering source code reuse in large-scale academic environments - Flores, E.a; Barr{\~{o}}n-Cede{\~{n}}o, A.b; Moreno, L.a; Rosso, P.a)

cited By 1},
author = {Flores, Enrique and Barr{\'{o}}n-Cede{\~{n}}o, Alberto and Moreno, Lidia and Rosso, Paolo},
doi = {10.1002/cae.21608},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Flores et al. - Uncovering source code reuse in large-scale academic environments.pdf:pdf},
isbn = {10613773 (ISSN)},
issn = {10613773},
journal = {Computer Applications in Engineering Education},
keywords = {Authoring tools and methods,Codes (symbols),Computer aided instruction,Computer programming languages,Interactive learning environment,Interactive learning environments,Object oriented programming,Plagiarism detection,Programming and programming languages,Real time systems,Source code reuse,Source codes},
language = {English},
month = {may},
number = {3},
pages = {383--390},
publisher = {John Wiley and Sons Inc.},
title = {{Uncovering source code reuse in large-scale academic environments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84905784920{\&}partnerID=40{\&}md5=65d1dc02ae3b66ab0a4395db5c6111f1 http://www.scopus.com/inward/record.url?eid=2-s2.0-84927692798{\&}partnerID=40{\&}md5=c4cd97c9c2af0f89e378d8faf505281a http://doi.wiley.com/10.1002/},
volume = {23},
year = {2015}
}
@inproceedings{Lazar2014c,
abstract = {In this paper we present useful methodologies in analyzing program code written in C programming language in order to detect source code clones between two or multiple files. For detecting student plagiarism in C code, we implemented a three phase clone detection algorithm based on the AST (Abstract Syntax Tree) approach. Starting from the state of the art in this domain, we make a short description and comparison between the proposed methods and finally we present a case study upon student assignments for the Programming Techniques classes. In the end, we conclude pointing the future directions of development and improvement in order to obtain a better clone detection tool. {\textcopyright} 2014 IEEE.},
address = {Timisoara, Romania},
annote = {Conference code: 106235

Export Date: 23 February 2015

References: Wettel, R., Marinescu, R., Archeology of code duplication: Recovering duplication chains from small duplication fragments (2005) Proc. 7th int'L. Symposium on Symbolic and Numeric Algorithms for Scientific Computing, pp. 63-70. , September; 
Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., (1998) Clone Detection Using Abstract Syntax Trees, pp. 368-377. , ICSM November;
Roy, C.K., (2007) Cordy A Survey on Software Clone Detection Research, , Technical report Queen's University at Kingston Ontario Canada;
Ducasse, S., Rieger, M., Demeyer, S., (1999) A Language Independent Approach for Detecting Duplicated Code, pp. 109-118. , ICSM 30 August-3 September;
Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Proc. 13th Working Conference on Reverse Engineering, pp. 253-262. , October;
Fowler, M., Beck, K., Brant, J., Opdyke, W., Roberts, D., (1999) Refactoring: Improving the Design of Existing Code, , Addison Wesley;
Kapser, C., Godfrey, M., (2005) Improved Tool Support for the Investigation of Duplication in Software;
Komondoor, R., Horwitz, S., Using slicing to identify duplication in source code (2001) Proc. Int. Symposium on Static Analysis, pp. 40-56. , July;
Krinke, J., Identifying similar code with program dependence graphs (2001) Proceedings Eigth Working Conference on Reverse Engineering (WCRE'01) IEEE Computer Society, pp. 301-309. , October;
Mayrand, J., Leblanc, C., Merlo, E.M., Experiment on the automatic detection of function clones in a software system using metrics (1996) International Conference on Software System Using Metrics, pp. 244-253;
Bulychev, P., Minea, M., Duplicate code detection using antiunification (2008) Proc. Spring Young Researchers Colloquium on Software Engineering, pp. 51-54. , May
A4 -},
author = {Lazar, Flavius-Mihai and Banias, Ovidiu},
booktitle = {9th IEEE International Symposium on Applied Computational Intelligence and Informatics},
doi = {10.1109/SACI.2014.6840038},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Lazar, Banias - Clone detection algorithm based on the Abstract Syntax Tree approach.pdf:pdf},
isbn = {978-1-4799-4694-5},
keywords = {Abstract Syntax Trees,Algorithms,Artificial intelligence,C (programming language),Clone detection,Clone detection algorithms,Cloning,Information science,Program code,Programming technique,Signal detection,Source codes,State of the art,Student assignments},
language = {English},
month = {may},
pages = {73--78},
publisher = {IEEE},
title = {{Clone detection algorithm based on the Abstract Syntax Tree approach}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84904173348{\&}partnerID=40{\&}md5=366588881304bfb48cf93d09a0d2bc2f http://ieeexplore.ieee.org/document/6840038/},
year = {2014}
}
@inproceedings{Kustanto2009b,
abstract = {Plagiarism is one form of academic dishonesty, which is often done by students in programming classes. In a large class, detecting plagiarism manually is both difficult and time-consuming,especially due to the numerous modifications of the source code to conceal the cheating. We designed and developed Deimos, a prototype of a source code plagiarism detector, which can be extended to handle other programming languages, simply by implementing new scanners and parsers. Deimos works in two steps: (1) parsing source code and transforming it into tokens, and then (2) comparing each pair of token strings obtained in the first step using Running Karp-Rabin Greedy String Tiling algorithm. Instructor can access Deimos via a web application interface that receives input parameters, triggers a background process, and displays the result. The web interface offers user friendliness while the background process prevents timeout and reduces bandwidth consumption. This approach was chosen since Deimos is intended to be used for processing more than 100 source code. The web application was implemented using PHP, while Java was used to implement the backend application, which is responsible for the background process. Unit test, functional test, and nonfunctional test has been conducted. Detection time is 1 hour for processing 100 samples of beginner's source code taken from real assignment of our programming class where the average length of source code is 150 lines. This code similarity detector could also be used for other pedagogical tools, such as autograder, which checks consistency of source code based on a template or solution. {\textcopyright} 2009 IEEE.},
address = {Bandung, Indonesia},
annote = {Conference code: 78633

Cited By :5

Export Date: 23 February 2015

Correspondence Address: Kustanto, C.; School of Electrical Engineering and Informatics, Institut Teknologi Bandung, Bandung, Indonesia; email: cynthia.kustanto@yahoo.com

References: Hannabuss, S., (2001) Contested texts: Issues of plagiarism, 22 (6-7), pp. 311-318. , Library Management, MCB University Press; 
Joy, M., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions of Education, 42 (2), pp. 129-133;
Mann, S., Frew, Z., Similarity and originality in code: Plagiarism and normal variation in student assignments (2006) Proceedings of the 8th Australian conference on Computing education, 52, pp. 143-150;
Wagner, N., (2000) Plagiarism by Student Programmers, , http://www.cs.utsa.edu/{\~{}}wagner/pubs/plagiarism0.html;
Christian, A., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proceedings of the 29th Australasian Computer Science Conference, 48, pp. 277-286;
Whale, G., (1988) Plague : Plagiarism detection using program structure, , Dept. of Computer Science Technical Report 8805, University of NSW, Kensington, Australia;
M. J. Wise, Detection of Similarities in Student Programs: YAP'ing may be Preferable to Plague'ing, ACM SIGSCE Bulletin(proc. of 23rd SIGCSE Technical Symp.), 24(1), pp. 268-271, 1992P. Lutz, M. Guido, and M. Phlippsen, JPlag: Finding plagiarisms among a set of programs, Fakult{\"{a}}t f{\"{u}}r Informatik Technical Report 2000-1, Universit{\"{a}}t Kalrsruhe, Karlsruhe, Germany, 2000Wise, M.J., YAP3: Improved Detection of Similarities in Computer Programs and Other Texts (1996) SIGCSE'96, pp. 130-134;
M. J. Wise, Neweyes: A System for Comparing Biological Sequences Using the Running Karp-Rabin Greedy String Tiling Algorithm, Department of Computer Science, University of Sydney, Australia, Technical Report 463, 1993Wise, M.J., (1993) String Similarity via Greedy String Tiling and Running Karp-Rabin Matching, , Department of Computer Science, University of Sydney, Australia;
Karp, R., Rabin, M., Efficient Randomized Pattern-Matching Algorithms (1987) IBM Journal of Research and Development, 31 (2), pp. 249-260;
Faidhi, J.A., Robinson, S.K., (1987) An empirical approach for detecting program similarity and plagiarism within a university programming environment, 11, pp. 11-19. , Computing in Education},
author = {Kustanto, Cynthia and Liem, Inggriani},
booktitle = {0th ACIS International Conference on Software Engineering, Artificial Intelligences, Networking and Parallel/Distributed Computing},
doi = {10.1109/SNPD.2009.62},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Kustanto, Liem - Automatic Source Code Plagiarism Detection.pdf:pdf},
isbn = {978-0-7695-3642-2},
keywords = {Academic dishonesty,Artificial intelligence,Average length,Bandwidth consumption,Computer science,Computer software,Detecting plagiarism,Detection time,Detectors,Functional test,Input parameter,Java programming language,Large class,Non-functional tests,One-form,Pedagogical tools,Plagiarism detection,Programming class,Programming language,Source code plagiarism,Source codes,Unit tests,User friendliness,WEB application,Web interface,World Wide Web},
language = {English},
pages = {481--486},
publisher = {IEEE},
title = {{Automatic Source Code Plagiarism Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-71249138135{\&}partnerID=40{\&}md5=5cfc4abbec8c3ae2e5377c5fae401869 http://ieeexplore.ieee.org/document/5286623/},
year = {2009}
}
@inproceedings{Ji2008e,
abstract = {Most plagiarism detection systems evaluate the similarity of source codes and detect plagiarized program pairs. If we use the source codes in plagiarism detection, the source code security can be a significant problem. Plagiarism detection based on target code can be used for protecting the security of source codes. In this paper, we propose a new plagiarism detection technique for Java programs using bytecodes without referring their source codes. The plagiarism detection procedure using bytecode consists of two major steps. First, we generate the token sequences from the Java class file by analyzing the code area of methods. Then, we evaluate the similarity between token sequences using the adaptive local alignment. According to the experimental results, we can find the distributions of similarities of the source codes and that of bytecodes are very similar. Also, the correlation between the similarities of source code pairs and those of bytecode pairs is high enough for typical test data. The plagiarism detection system using bytecode can be used as a preliminary verifying tool before detecting the plagiarism by source code comparison. {\textcopyright} 2008 IEEE.},
address = {Busan, South Korea},
annote = {Conference code: 74851

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Ji, J.-H.; Dept. of Computer Engineering, Pusan National University, Busan, South Korea; email: jhji@pusan.ac.kr

References: Aiken, A., (1998) Moss(measure of software similarity) plagiarism detection system; 
Arwin, C., Tahaghoghi, S., Plagiarism detection across programming language (2006) Proceedings of the 24th Australasian Computer Science Conference, pp. 383-387;
Baker, B.S., Manber, U., Deducing similarities in Java sources from bytecodes (1998) Proc. of Usenix Annual Technical Conf, pp. 179-190;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Trans. on Information Theory, 50 (7), pp. 1545-1551;
Daly, C., Horgan, J., Patterns of plagiarism (2005) Proceedings of the 36th SIGCSE Technical Symposium on Computer Science Education, pp. 383-387. , ACM;
D. Gitchell and N. Tran. Sim: a utility for detecting similarity in computer programs. ACM SIGCSE Bulletin, 32(1):266-270, 1999Ji, J., Park, S., Woo, G., Cho, H., Understanding the evolution process of program source for investigating software authorship and plagiarism (2007) Digital Information Management, 2007. ICDIM'07. 2nd International Conference on, 1, pp. 98-103. , Oct;
Ji, J.-H., Park, S.-H., Woo, G., Cho, H.-G., Source code management system for e-learning based programming education (2007) Digital Information Management, 2007. ICDIM'07. 2nd International Conference on, 1, pp. 362-367. , Oct;
Ji, J.H., Park, S.-H., Woo, G., Cho, H.-G., Source code similarity detection using adaptive local alignment of keywords (2007) PDCAT 2007, pp. 179-180. , IEEE;
Ji, J.-H., Woo, G., Park, S.-H., Cho, H.-G., An intelligent system for detecting source code plagiarism using a probabilistic graph model (2007) Poster Proc. of MLDM 2007, , Springer Verlag, to appear;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133. , May;
Mann, S., Frew, Z., Similarity and originality in code: Plagiarism and normal variation in student assignments (2006) Proceedings on Eighth Australasian Computing Education Conference, 52, pp. 143-150. , ACS;
Parker, A., Hamblen, J.O., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Smith, T.F., Waterman, M.S., Identification of common molecular subsequences (1981) Journal of Molecular Biology, 147, pp. 195-197;
Son, J.-W., Park, S.-B., Park, S.-Y., Program plagiarism detection using parse tree kernels (2006) PRICAI 2006, pp. 1000-1004. , Springer, Aug;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to plague'ing (1992) SIGSCE Bulletin, 24, pp. 268-271. , Proceedings of the 23rd SIGCSE Technical Symposium on Computer Science Education, 1 of},
author = {Ji, Jeong-Hoon and Woo, Gyun and Cho, Hwan-Gue},
booktitle = {Third International Conference on Convergence and Hybrid Information Technology},
doi = {10.1109/ICCIT.2008.267},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Ji, Woo, Cho - A Plagiarism Detection Technique for Java Program Using Bytecode Analysis.pdf:pdf},
isbn = {978-0-7695-3407-7},
keywords = {Byte codes,Codes (symbols),Computer programming languages,Computer software,Information technology,Java class files,Java programming language,Local alignments,Plagiarism detections,Source codes,Target codes,Test datums,Token sequences},
language = {English},
month = {nov},
pages = {1092--1098},
publisher = {IEEE},
title = {{A Plagiarism Detection Technique for Java Program Using Bytecode Analysis}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-57849160245{\&}partnerID=40{\&}md5=6656d13acf5115e09bb36146a48910c4 http://ieeexplore.ieee.org/document/4682179/},
volume = {1},
year = {2008}
}
@article{Kuo2010b,
abstract = {The online course management system (OCMS) assists online instruction in various aspects, including testing, course discussion, assignment submission, and assignment grading. This paper proposes a plagiarism detection system whose design is integrated with an OCMS. Online assignment submission is prone to easy plagiarism, which can seriously influence the quality of learning. In the past, plagiarism was detected manually, making it very time-consuming. This research thus focuses on developing a system involving code standardization, textual analysis, structural analysis, and variable analysis for evaluating and comparing programming codes. An agent system serves as a daemon to analyze the program codes for OCMS. For textual analysis, the Fingerprinting Algorithm was used for text comparison. Structurally, a formal algebraic expression and a dynamic control structure tree (DCS Tree) were utilized to rebuild and evaluate the program structure. For variables, not only the relevant information for each variable was recorded, but also the programming structure was analyzed where the variables are positioned. By applying a similarity measuring method, a similarity value was produced for each program in the three aspects mentioned above. This research implements an Online Detection Plagiarism System (ODPS) providing a web-based user interface. This system can be applied independently for assignment analysis of Java programs. After three comparison experiments with other researches, the results demonstrated the ODPS has many advantages and good performance. Meanwhile, a combined approach is proven that it is better than a single approach for source codes of various styles. {\textcopyright} 2010 Elsevier Inc.},
address = {Taipei, Taiwan},
annote = {Cited By :5

Export Date: 23 February 2015

CODEN: JSSOD

Correspondence Address: Kuo, J. Y.; Department of Computer Science and Information Engineering, National Taipei University of Technology, Taipei 106, Taiwan; email: jykuo@ntut.edu.tw

References: Adaptive Brusilovsky, P., Kobsa, A., Hypermedia user modeling and user adapted interaction (2001) Ten Year Anniversary Issue, 11 (1-2), pp. 87-110; 
Aiken, A., Measure of Software Similarity [Online], , http://www.cs.berkeley.edu/{\~{}}aiken/moss.html;
Broder, A.Z., On the resemblance and containment of documents (1997) IEEE Proceedings of Compression and Complexity of Sequences, pp. 21-29;
Canfora, G., Cimitile, A., De Carlini, U., De Lucia, A., An extensible system for source code analysis (1998) IEEE Transactions on Software Engineering, 24 (9), pp. 721-740;
Chen, X., Francia, B., Li, M., Shared information and program plagiarism detection (2004) IEEE Transactions in Information Theory, 50, pp. 1545-1551;
De Lucia, A., Deufemia, V., Gravino, C., Risi, M., Design pattern recovery through visual language parsing and source code analysis (2009) The Journal of Systems and Software, 82 (7), pp. 1177-1193;
Ding, H., Samadzadeh, M., Extraction of Java program fingerprints for software authorship identification (2004) The Journal of Systems and Software, 72 (1), pp. 49-57;
Donaldson, J.L., Lancaster, A., Sposato, P.H., A plagiarism detection system (1981) Proceedings of the Twelfth SIGCSE Technical Symposium on Computer Science Education, Vol. 13, Issue 1, pp. 21-25;
Dyer, D., (2002) Java Decompilers, , http://www.andromeda.com/people/ddyer/java/decompiler-table.htm;
Eric Wong, W., Gokhale, S., Static and dynamic distance metrics for feature-based code analysis (2005) The Journal of Systems and Software, 74, pp. 283-295;
Frantzeskou, G., MacDonell, S., Stamatatos, E., Gritzalis, S., Examining the significance of high-level programming features in source code author classification (2008) The Journal of Systems and Software, 81 (3), pp. 447-460;
Frasson, C., Aimeur, A., Design a multi-strategic intelligent tutoring system for training in industry (1998) Computer in Industry, 37, pp. 153-167;
Gitchell, D., Tran, N., A utility for detecting similarity in computer programs (1998) Proceedings of the 30th ACM Special Interest Group on Computer Science Education Technology Symposium, pp. 266-270. , New Orleans, LA;
Kouznetsov, P., (2004) Jad - The Fast Java Decompiler, , http://kpdus.tripod.com/jad.html;
Kuo, J.Y., Chang, K.C., Adaptive learning of assimilation and accommodation for intelligent agent system (2007) Proceeding of the 10th Joint International Conference on Information Sciences, pp. 1172-1178. , World Scientific Publishing Co Salt Lake City, USA;
Kuo, J.Y., Chu, L., Intelligent code analyzer for online course management system (2005) Proceedings of the 3rd ACIS International Conference on Software Engineering Research, Management {\&} Applications, , Michigan, USA;
Li, M., Vit{\'{a}}nyi, P., (1997) An Introduction to Kolmogorov Complexity and Its Applications, , 2nd ed. Springer-Verlag New York;
Malpohl, G., JPlag: Detecting Software Plagiarism [Online], , http://www.ipd.uka.de:2222/index.html;
Navarro, G., A guided tour to approximate string matching (2001) ACM Computing Surveys, 33 (1), pp. 31-88;
Ottenstein, K., An algorithmic approach to the detection and prevention of plagiarism (1977) SIGCSE Bulletin, 8 (4), pp. 30-41;
Perkowitz, M., Etzioni, O., Adaptive web sites: An AI challenge (1997) Proceedings of the 15th International Joint Conference on Artificial Intelligence, pp. 16-23. , Nagoya, Japan;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data;
Whale, G., Identification of program similarity in large populations (1990) Computer Journal, 33 (2), pp. 140-146;
Whale, G., YAP3: Improved detection of similarities in computer program and other texts (1996) Proceedings 27th SCGCSE Technology Symposium, pp. 130-134. , Philadelphia, PA;
Yu, P., Kontogiannis, K., Lau, T.C., Transforming legacy web applications to the MVC architecture (2003) Eleventh Annual International Workshop on Software Technology and Engineering Practice, pp. 133-142. , 19-21 September;
Ziv, J., Lempel, A., A universal algorithm for sequential data compression (1977) IEEE Transactions on Information Theory, 23, pp. 337-343},
author = {Kuo, Jong Yih and Huang, Fu Chu},
doi = {10.1016/j.jss.2010.07.037},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Kuo, Huang - Code analyzer for an online course management system.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
keywords = {Agent systems,Algebraic expression,Assignment analysis,Computer software,Dynamic controls,E-learning,Fingerprinting algorithm,Intelligent agent,Java program,Java programming language,Management,On-line detection,Online assignments,Online course management systems,Online instructions,Online systems,Plagiarism detection,Program code,Program plagiarism,Program similarity,Program structures,Programming codes,Programming structures,Quality of learning,Research,Similarity measuring,Source codes,Structural analysis,Textual analysis,User interfaces,Variable analysis},
language = {English},
month = {dec},
number = {12},
pages = {2478--2486},
title = {{Code analyzer for an online course management system}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78049348349{\&}partnerID=40{\&}md5=d14958987215ba86a61d7a32b0bf85ce http://linkinghub.elsevier.com/retrieve/pii/S0164121210002049},
volume = {83},
year = {2010}
}
@inproceedings{Bosnic2012c,
abstract = {Learning various programming languages in a short amount of time is a challenging task. To help students tackle several programming languages during the course of a semester, while reducing the teaching assistants' support efforts, a system named ORVViS was implemented and integrated with Moodle Learning Management System. ORVViS is used to assist students validate assignment solutions, and also to check for source code plagiarism. This paper presents the course Open computing, our motivation, system use cases, as well as our results and experiences. These observations helped us improve the assignments to better suit our teaching goals and help students learn the course concepts more quickly.},
address = {Zagreb, Croatia},
annote = {Conference code: 91901

Export Date: 23 February 2015

Correspondence Address: Bosni{\'{c}}, I.; Faculty of Electrical Engineering and Computing, University of Zagreb, Unska 3, Zagreb, Croatia; email: ivana.bosnic@fer.hr

References: Ala-Mutka, K.M., A survey of automated assessment approaches for programming assignments (2005) Computer Science Education, 15 (2), pp. 83-102; 
Auffarth, B., (2008) System for Automated Assistance in Correction of Programming Exercises (SAC);
Bosnic, I., Orlic, M., Zagar, M., Beyond LMS: Expanding course experience with content collaboration and smart assignment feedback (2010) International Journal of Emerging Technologies in Learning IJET, 5 (4);
Cosma, G., Joy, M., Source-code plagiarism: A UK academic perspective (2006) I Can, (422), p. 74;
Dick, M., Addressing student cheating (2003) ACM SIGCSE Bulletin, 35 (2), p. 172;
Edwards, S.H., Perez-Quinones, M.A., Web-CAT: Automatically grading programming assignments (2008) ITiCSE 08 Proceedings of the 13th Annual Conference on Innovation and Technology in Computer Science Education, 3 (3), pp. 60558-60558;
Goel, S., Rao, D., Plagiarism and its detection in programming languages (2005) Environment;
Higgins, C., The CourseMarker CBA system: Improvements over ceilidh (2003) Education and Information Technologies, 8 (3), pp. 287-304;
Ihantola, P., Review of recent systems for automatic assessment of programming assignments (2010) Proceedings of the 10th Koli Calling International Conference on Computing Education Research Koli Calling, 10, pp. 86-93. , ACM Press;
Joy, M., Griffiths, N., Boyatt, R., The BOSS online submission and assessment system (2005) Journal on Educational Resources in Computing, 5 (3), p. 2;
Lancaster, T., Culwin, F., A comparison of source code plagiarism detection engines (2004) Computer Science Education, 14 (2), pp. 101-112;
Sheard, J., Dick, M., Influences on cheating practice of graduate students in IT courses: What are the factors? (2003) Proceedings of the 8th Annual Conference on Innovation and Technology in Computer Science Education, p. 49. , ACM;
Tomi{\'{c}}, S., Living the E-campus dream (2006) Proceedings of the EDEN Conference, pp. 644-650. , A. Szucs {\&} I. Bo, eds. Vienna, Austria: European Distance and E-Learning Network;
Wagner, N., (2004) Plagiarism by Student Programmers, , San Antonio, TX, USA
A4 - Inst. Syst. Technol. Inf., Control Commun. (INSTICC)},
author = {Bosni{\'{c}}, I and Mihaljevi{\'{c}}, B and Orli{\'{c}}, M and {\v{Z}}agar, M},
booktitle = {4th International Conference on Computer Supported Education},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Bosni{\'{c}} et al. - Source code validation and plagiarism detection Technology-rich course experiences.pdf:pdf},
isbn = {9789898565068 (ISBN)},
keywords = {Assignment solutions,E-learning,Intellectual property,Learning management system,Plagiarism,Plagiarism detection,Programming assignments,Source code plagiarisms,Source codes,Students,System use,Teaching assistants,Validation},
language = {English},
pages = {149--154},
title = {{Source code validation and plagiarism detection: Technology-rich course experiences}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84864869657{\&}partnerID=40{\&}md5=035cfb10a83a2dab13445842a901ad89},
volume = {2},
year = {2012}
}
@article{1306552,
abstract = {A fundamental question in information theory and in computer science is how to measure similarity or the amount of shared information between two sequences. We have proposed a metric, based on Kolmogorov complexity, to answer this question and have proven it to be universal. We apply this metric in measuring the amount of shared information between two computer programs, to enable plagiarism detection. We have designed and implemented a practical system SID (Software Integrity Diagnosis system) that approximates this metric by a heuristic compression algorithm. Experimental results demonstrate that SID has clear advantages over other plagiarism detection systems. SID system server is online at http://software.bioinformatics.uwaterloo.ca/SID/.},
address = {Piscataway, NJ, USA},
author = {Chen, Xin and Francia, Brent and Li, Ming and McKinnon, Brian and Seker, Amit},
doi = {10.1109/TIT.2004.830793},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2004 - Chen et al. - Shared Information and Program Plagiarism Detection.pdf:pdf},
isbn = {00189448 (ISSN)},
issn = {0018-9448},
journal = {IEEE Transactions on Information Theory},
keywords = {Kolmogorov complexity,Program plagiarism detection,Shared information,computational complexity,data compression,data int},
month = {jul},
number = {7},
pages = {1545--1551},
publisher = {IEEE Press},
title = {{Shared Information and Program Plagiarism Detection}},
url = {http://dx.doi.org/10.1109/TIT.2004.830793 http://ieeexplore.ieee.org/document/1306552/},
volume = {50},
year = {2004}
}
@inproceedings{Ueta2010,
abstract = {Recently, the network environment in classroom has been much improved. However, the facilities may promote the imprudent plagiarism of the other's answer in online report submission. We are developing the detection tool for report plagiarism based on similarity. We adopt two kinds of approach for similarity judgment. The one is text base by editorial distance. Another is binary base by file compression ratio. We prepare some preprocess methods like morphological analysis and removing redundant information. We aim to realize adequate judgment precision and cost performance. The tool incorporated as a function of WebBinder, which is online report task support system. It uses not only for exposure of the fraudulent activity by a teacher but also for the warnings at the time of students' uploading files. As preliminary experiment, we applied the prototype tool for similarity calculation and detection plagiarism. The samples are the three kinds of data; explanation text of information engineering term, mathematical document in binary file and C language source code. {\textcopyright}2010 IEEE.},
address = {Hayashi-cho, Takamatsu, Japan},
annote = {Conference code: 80924

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Ueta, K.; Kagawa University, 2217-20, Hayashi-cho, Takamatsu, Japan; email: s09g453@stmail.eng.kagawa-u.ac.jp

References: Maurer, H., Zaka, B., Plagiarism - A Problem and How to Fight It (2007) Proceedings of ED-MEDIA 2007, pp. 4451-4458; 
Wang, Y., University Student Online Plagiarism (2008) International Journal on E-Learning, 7 (4), pp. 743-757;
Suarez, J., Martin, A., Internet Plagiarism: A Teacher's Combat Guide (2001) Contemporary Issues in Technology and Teacher Education, 1 (4), pp. 546-549;
Maurer, H., Kulathuramaiyer, N., Coping with the Copy-Paste-Syndrome (2007) Proceedings of E-Learn 2007, pp. 1071-1079;
Knight, A., Almeroth, K., Bimber, B., Design, Implementation and Deployment of PAIRwise (2008) Journal of Inteactive Learning Research, 19 (3), pp. 489-508;
iParadigms, , http://turnitin.com/;
Stetter, M.E., Plagiarism and the use of Blackboard's TurnItIn (2008) Proceedings of ED-MEDIA 2008, pp. 5083-5085;
http://www.ank.co.jp/works/products/copypelna/Patton, R., Johnson, D., Bimber, B., Almeroth, K., Michaels, G., Technology and Plagiarism in the University: Brief Report of a Trial in Detecting Cheating (2004) AACE Journal, 12 (3), pp. 281-299;
Brown, V., Robin, N., Jordan, R., A Faculty's Perspective and Use of Plagiarism Detection Software (2008) Proceedings of SITE 2008, pp. 1946-1948;
Thomas, M., Plagiarism Detection Software (2008) Proceedings of E-Learn 2008, pp. 2390-2397;
Knight, A., Almeroth, K., Bimber, B., An Automated System for Plagiarism Detection Using the Internet (2004) Proceedings of ED-MEDIA 2004, pp. 3619-3625;
Tang, M., Byrne, R., Tang, M., University anti-plagiarism efforts versus commercial anti-plagiarism software and services and do online students cheat more? (2007) Proceedings of E-Learn 2007, pp. 6595-6601;
Pighizzini, G., How Hard Is Computing the Edit Distance (1995) Information and Computation, 165 (1), pp. 1-13;
Ukkonen, E., Finding approximate patterns in strings (1985) Information and Control, 64, pp. 100-118;
Hyyroe, H., A Bit-Vector Algorithm for Computing Levenshtein and Damerau Edit Distance (2003) Nordic Journal of Computing, 10, pp. 1-11;
Helmer, S., Measuring the Structural Similarity of Semistructured Documents Using Entropy (2007) Proceedings of the 33rd International Conference on Very Large Data Bases, pp. 1022-1032;
http://mecab.sourceforge.net/Kurata, H., Tominaga, H., Hayashi, T., Yamasaki, T., Contest Style Exercise with Execution Tests for Every Lesson in Introductory C Programming (2007) Proceedings of ITHET 2007, pp. 99-102;
Ueta, K., Tominaga, H., A Prototype and Functions of WebBinder for Student Task Support in Report Processing and Submission (2009) Proceedings of ED-MEIDA 2009, pp. 3472-3477},
author = {Ueta, Kazushi and Tominaga, Hiroyuki},
booktitle = {9th International Conference on Information Technology Based Higher Education and Training},
doi = {10.1109/ITHET.2010.5480091},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Ueta, Tominaga - A development and application of similarity detection methods for plagiarism of online reports.pdf:pdf},
isbn = {978-1-4244-4810-4},
keywords = {Binary files,C language,Cost performance,Detection tools,File compression,Information engineerings,Information technology,Morphological analysis,Network environments,Online reports,Preprocess,Prototype tools,Redundant informations,Similarity calculation,Similarity detection,Source codes,Support systems,Teaching},
language = {English},
pages = {363--371},
publisher = {IEEE},
title = {{A development and application of similarity detection methods for plagiarism of online reports}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77954416989{\&}partnerID=40{\&}md5=50e505fac196d9331be11a13fcd8bd81 http://ieeexplore.ieee.org/document/5480091/},
year = {2010}
}
@article{Zhu2014,
abstract = {In order to help teachers to identify plagiarism in student assignment submissions among students' Source code quickly and accurately, this paper discusses a measurement method of Source code similarity. In the proposed algorithm, firstly, both of token oriented edit distance (TD) and token oriented length of longest common subsequence (TLCSLen) is calculated; secondly, considering the TD and TLCSLen, a similarity calculation formula is given to measure similarity of Source code; Thirdly, a dynamic and variable similarity threshold is set to determine whether there is plagiarism between Source codes, which ensure a relatively reasonable judgment of plagiarism. This method has been applied to the university's programming course work online submission system and online examination system. Practical application results show that this method can identify similar Source code timely, effectively and accurately.},
address = {Department of Computer, Shandong Agricultural UniversityTai'an, China},
annote = {Conference code: 108649

Export Date: 23 February 2015

Correspondence Address: Zhu, H.M.; Department of Computer, Shandong Agricultural UniversityChina

References: Edward, J.L., Metrics-based Plagiarism Monitoring (2001) Journal of Computing Sciences in Colleges, 16 (4), pp. 253-261; 
Yamamoto, T., Matsushita, M., Kamiya, T., (2005) Measuring similarity of large software systems based on source code correspondence. Product Focused Software Process Improvement, pp. 530-544. , Springer Berlin Heidelberg, Berlin;
Prechelt, L., Malpohl, G., Philippsen, M., (2000) Jplag: Finding plagiarisms among a set of programs, Technical Report, , Fakultat fur Informatik, Universitat Karlsruhe, Germany;
Wise, M.J., (1996) YAP3: Improved detection of similarities in computer program and other texts, p. 28. , SIGCSEB: SIGCSE Bulletin (ACM Special Interest Group on Computer Science Education);
Wise, M.J., Detection of Similarities in Student Programs: YAP'ing may be Preferable to Plague'ing (1992) 23rd SIGCSE Technical Symposium, pp. 268-271. , Kansas City, USA;
John, L., Donaldson, Ann-Marie Lancaster, Paul H Sposato: A plagiarism detection system (1981) 12th SIGCSE Technical Symposium, pp. 21-25. , St Louse, Missouri;
Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10 (8), pp. 707-710;
Maier, D., The Complexity of Some Problems on Subsequences and Supersequence (1978) J. ACM (ACM Press), 25 (2), pp. 322-336
A4 - Nankai University},
author = {Zhu, Hong Mei and Zhang, Liang and Sun, Wei and Sun, Yong Xiang},
doi = {10.4028/www.scientific.net/AMM.668-669.899},
editor = {W., Ge},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Zhu et al. - A Token Oriented Measurement Method of Source Code Similarity.pdf:pdf},
isbn = {16609336 (ISSN); 9783038353126 (ISBN)},
issn = {1662-7482},
journal = {Applied Mechanics and Materials},
keywords = {Codes (symbols),Computer programming languages,E-learning,Edit distance,Intellectual property,Longest common subsequences,On-line examinations,Similarity,Similarity calculation,Similarity threshold,Social networking (online),Source code,Source code similarities,Source codes,Teaching,Token oriented edit distance,Token oriented longest common subsequence},
language = {English},
month = {oct},
pages = {899--902},
publisher = {Trans Tech Publications Ltd},
title = {{A Token Oriented Measurement Method of Source Code Similarity}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84920867151{\&}partnerID=40{\&}md5=ef1eb9d01df89a83b1e0a588feef07aa http://www.scientific.net/AMM.668-669.899},
volume = {668-669},
year = {2014}
}
@article{Liu201529,
abstract = {Nowadays, computer programming is getting more necessary in the course of program design in college education. However, the trick of plagiarizing plus a little modification exists among some students' home works. It's not easy for teachers to judge if there's plagiarizing in source code or not. Traditional detection algorithms cannot fit this condition. The author designed an effective and complete method to detect source code plagiarizing according to the popular way of students' plagiarizing. There are two basic concepts of the algorithm. One is to standardize the source code via filtration against to remove the majority noises intentionally blended by plagiarists. The other one is an improved Longest Common Subsequence algorithm for text matching, using statement as the unit for matching. The authors also designed an appropriate HASH function to increase the efficiency of matching. Based on the algorithm, a system was designed and proved to be practical and sufficient, which runs well and meet the practical requirement in application. Copyright {\textcopyright} 2015, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.},
annote = {2. Existing Methods And Shortcomings
Back in the 1970s, researchers started research of the similarity detection technology against source code. Halstead (1975) proposed the first algorithm named property counting method. The algorithm counted the operators and operands statistics appeared in the source program, and used the results as main basis of detecting. Ottenstein (1976) implemented the first source code near-duplicates detection system for Fortran by using properties counting method. Since the attribute notation doesn't remain the program structure information, the method cannot meet practical requirements of short program due to high false alarm rate (definition in section 4).
In the mid-1990s, Verco and Wise (1996) added vector dimension technology to the properties counting method, but the effect is still not satisfactory. Damashek (1995) proposed structural measure approach, used program control flow as metrics, such methods are usually applicated with attribute notation. Such methods work well in checking large programs, because in handling complex problems, different programmers often have different ideas, probability of identical program control flow is extremely low, so the false alarm rate is relatively low, but experiments proved that when such algorithms applying on program designing jobs, it has a relatively high false alarm rate. Because programming as common work is simple and the fundamental knowledge is quite similar, so the students' main concepts of solving the problems are similar, thus the control flow of the program will be basically alike.},
author = {Liu, Xin and Xu, Chan and Ouyang, Boyu},
doi = {10.4018/IJDET.2015100102},
file = {:D$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2015 - Liu, Xu, Ouyang - Plagiarism Detection Algorithm for Source Code in Computer Science Education.pdf:pdf},
issn = {1539-3100},
journal = {International Journal of Distance Education Technologies},
keywords = {Algorithms,Codes (symbols),Coding standardize,College education,Computer S,Computer programming},
month = {oct},
number = {4},
pages = {29--39},
publisher = {IGI Global},
title = {{Plagiarism Detection Algorithm for Source Code in Computer Science Education}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84937699576{\&}partnerID=40{\&}md5=aa957385343b0ae876365c7a6bc0a5ba http://services.igi-global.com/resolvedoi/resolve.aspx?doi=10.4018/IJDET.2015100102},
volume = {13},
year = {2015}
}
@article{Wojdyga2013300,
abstract = {Software plagiarism can have destructive effects on company's economy or one's personal carrier. Easy access to online source code databases encourages such behaviour. Authorship of a unit of software should be easily determined. This is a problem in education at the university level, especially for the off-site or e-learning courses. Verification by human effort is tedious and error- prone, therefore not acceptable. This article presents expectations and vulnerabilities of automatic plagiarism verification and presents a general method for solving this problem. A proof-of-concept code in Haskell functional language implements such an algorithm.},
annote = {cited By 0},
author = {Wojdyga, A},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Wojdyga - Towards intellectual property theft prevention Economic significance of automatic software plagiarism verification.pdf:pdf},
issn = {19936788},
journal = {Actual Problems of Economics},
number = {4},
pages = {300--306},
publisher = {National Academy of Management},
title = {{Towards intellectual property theft prevention: Economic significance of automatic software plagiarism verification}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84929998729{\&}partnerID=40{\&}md5=0facbfde4e832697e11ccea1f9dc7104},
volume = {142},
year = {2013}
}
@conference{Ohno201437,
abstract = {Scoring and plagiarism detection in university programming classes are important but time-consuming and burdensome tasks for teachers. In this paper, we explain about the structure and functions of the online education support system developed for university programming class. The system mainly provides two functions: scoring function and plagiarism detection function implementing two different kind of similarity measuring methods that had been proposed in the previous studies. Each of the methods calculates similarity between a pair of source codes in different aspect: content-based similarity and style-based similarity. This paper also describes how those two different methods work for the system to provide each functions with summarized explanations of each of the methods.},
address = {Nara; Japan},
annote = {cited By 0; Conference of 22nd International Conference on Computers in Education, ICCE 2014 ; Conference Date: 30 November 2014 Through 4 December 2014; Conference Code:110501},
author = {Ohno, A and Yamasaki, T and Tokiwa, K.-I.},
booktitle = {Proceedings of the 22nd International Conference on Computers in Education},
editor = {{Mohd Ayub A.F. Kashihara A.}, Matsui T Liu C.-C. Ogata H Kong S C},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Ohno, Yamasaki, Tokiwa - An online system for scoring and plagiarism detection in university programing class.pdf:pdf},
isbn = {9784990801441},
keywords = {Distance education,E-learning,Education,Intellectual proper,On-line education,Plagiarism detection,Programm},
pages = {37--39},
publisher = {Asia-Pacific Society for Computers in Education},
title = {{An online system for scoring and plagiarism detection in university programing class}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84923870245{\&}partnerID=40{\&}md5=34bd8aafdce5db2a9d8ac6679b3184bd},
year = {2014}
}
@article{Kar:2000:DPC:1852563.1852601,
abstract = {Plagiarism in programming assignments in computer science courses is on the rise, mainly due to recent innovation in computer technology which has made copying, sharing, and modifying a document effortless. Detecting plagiarism in computer programs through manual inspection process is very error-prone, since a plagiarist can easily produce a program with a whole different look through some clever text substitution and rearrangement of statements. In addition, the detection process is very time-consuming. This paper introduces and discusses different techniques of automatic screening and detection of plagiarism that can be used as aids to detect and deter plagiarism in computer programming courses. The paper also presents a simple screening and detection scheme based on statistical techniques.},
address = {USA},
author = {Kar, Dulal C},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2000 - Kar - Detection of Plagiarism in Computer Programming Assignments.pdf:pdf},
issn = {1937-4771},
journal = {Journal of Computing Sciences in Colleges},
keywords = {automatic,detection,plagiarism,plagiarist,programming,statistics},
number = {3},
pages = {266--276},
publisher = {Consortium for Computing Sciences in Colleges},
title = {{Detection of Plagiarism in Computer Programming Assignments}},
url = {http://dl.acm.org/citation.cfm?id=1852563.1852601},
volume = {15},
year = {2000}
}
@inproceedings{Mozgovoy:2005:FPD:2178997.2179028,
abstract = {The large class sizes typical for an undergraduate programming course mean that it is nearly impossible for a human marker to accurately detect plagiarism, particularly if some attempt has been made to hide the copying. While it would be desirable to be able to detect all possible code transformations we believe that there is a minimum level of acceptable performance for the application of detecting student plagiarism. It would be useful if the detector operated at a level that meant for a piece of work to fool the algorithm would require that the student spent a large amount of time on the assignment and had a good enough understanding to do the work without plagiarising.},
address = {Berlin, Heidelberg},
author = {Mozgovoy, Maxim and Fredriksson, Kimmo and White, Daniel and Joy, Mike and Sutinen, Erkki},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/11575832_30},
file = {:C$\backslash$:/Users/matnovak/AppData/Local/Mendeley Ltd/Mendeley Desktop/Downloaded/2005 - Mozgovoy et al. - Fast Plagiarism Detection System.pdf:pdf},
isbn = {3540297405},
issn = {03029743},
pages = {267--270},
publisher = {Springer-Verlag},
series = {SPIRE'05},
title = {{Fast Plagiarism Detection System}},
url = {http://dx.doi.org/10.1007/11575832{\_}30 http://link.springer.com/10.1007/11575832{\_}30},
volume = {3772 LNCS},
year = {2005}
}
@inproceedings{Asadullah2012,
abstract = {Plagiarism detection in software programs is very important in both academia and industry. There are many tools available today to aid in detecting plagiarism in text and source documents. Most of the plagiarism detection tools for source code do some sort of pre-processing, like removing comments {\&} blank spaces and using uniform tokens for primitive types {\&} variables, before actually applying intelligent matching techniques so that the tool can detect the copied code even if it is changed in format and variable names etc. In this paper, we propose a novel preprocessing approach based on design patterns such that any code that is intelligently plagiarized can also be easily located. {\textcopyright} 2012 IEEE.},
address = {Bangalore, India},
annote = {Conference code: 95873

Export Date: 23 February 2015

Correspondence Address: Asadullah, A.; Infosys Labs, Bangalore, India; email: allahbaksh.asadullah@infosys.com

References: Copy Paste Detector, , http://pmd.sourceforge.net/cpd.html; 
Moss, , http://theory.stanford.edu/aiken/moss/;
Plagiarism-britannica Online Encyclopedia, , http://www.britannica.com/EBchecked/;
Sim, , http://www.cs.vu.nl/dick/sim.html;
(2006) Design Pattern Detection, , http://java.uom.gr/nikos/patterndetection.html;
Baker, B., A program for identifying duplicated code (1992) Proceedings of Computing Science and Statistics:24th Symposium on the Interface, 24, pp. 49-57;
Baker, B.S., On finding duplication and near duplication in large software systems (1995) 2nd Working Conf. on Reverse Engineering;
Baxter, I.D., Yahin, A., Moura, L., Anna, M.S., Clone, B.L., Detection using abstract syntax trees (1998) Intl. Conference on Software Maintenance, pp. 368-377;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Transactions on Information Theory, 50 (7), pp. 1545-1551;
Chilowicz, M., Duris, E., Roussel, G., (2011) Syntax Tree Fingerprinting: A Foundation for Source Code Similarity Detection, , Sept;
Erich Gamma, R.J., Helm, R., Vlissides, J., (2011) Design Patterns: Elements of Reusable Object-oriented Software, , 39, March;
Gitchell, D., Tran, N., Sim: A Utility for Detecting Similarity in Computer Programs;
Heckel, P., A technique for isolating differences between files (1978) Communications of the ACM, 21 (4), pp. 264-268. , April;
Jiang, L., Misherghi, G., Su, Z., Glondu, S., DECKARD: Scalable and accurate tree-based detection of code clones (2007) Proceedings - International Conference on Software Engineering, pp. 96-105. , DOI 10.1109/ICSE.2007.30, 4222572, Proceedings - 29th International Conference on Software Engineering, ICSE 2007;
Kerievsky, J., (2004) Refactoring to Patterns, , Addision Wesley Signature Series;
Koschke, R., Falke, R., Frenzel, P., Clone detection using abstract syntax suffix trees (2006) Proceedings - Working Conference on Reverse Engineering, WCRE, pp. 253-262. , DOI 10.1109/WCRE.2006.18, 4023995, Proceedings - 13th Working Conference on Reverse Engineering, WCRE 2006;
Krinke, J., Identifying similar code with program dependence graphs (2001) Reverse Engineering - Working Conference Proceedings, pp. 301-309;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of software plagiarism by program dependence graph analysis (2006) Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, 2006, pp. 872-881. , KDD 2006: Proceedings of the Twelfth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining;
Lukcsy, G., Szeredi, P., Plagiarism Detection in Source Programs Using Structural Similarities;
Zechner, R.K.M., Muhr, M., Granitzer, M., (2009) External and Intrinsic Plagiarism Detection Using Vector Space Models;
Marcus, A., Maletic, J.I., Identification of high-level concept clones in source code (2001) 16th IEEE International Conference on Automated Software Engineering, p. 107;
Michael, J.W., Running karp rabin matching and greedy string tiling (1993) Basser Department of Computer Science Technical Report, , March;
Chilowicz, E.D.M., Roussel, G., Finding similarities in source code through factorization (2011) Electronic Notes in Theoretical Computer Science, , September;
Myles, G., Collberg, C., Detecting software theft via whole program path birthmarks (2004) Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics), 3225, pp. 404-415;
Ohno, A., Murao, H., Work in progress - A novel methodology to reduce instructors and students psychological burdens in source code plagiarism detection (2010) 40th ASEE/IEEE Frontiers in Education Conference;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99;
Prechelt, L., Malpohl, G., Philippsen, M., Jplag: Finding plagiarisms among a set of programs (2000) Technical Report University of Karlsruhe Department of Informatics;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) ACM SIGMOD International Conference on Management of Data, pp. 76-85;
Shams, K., Plagiarism detection using semantic analysis (2010) Thesis Report, , April;
Wise, M., Yap3: Improved detection of similarities in computer program and other texts (1996) SIGCSEB: SIGCSE Bulletin ACM Special Interest Group on Computer Science Education
A4 - IEEE Hong Kong Section Computer Society Chapter; ACM Hong Kong Chapter},
author = {Asadullah, Allahbaksh and M., Basavaraju and Stern, Ilan and Bhat, Vasudev D},
booktitle = {19th Asia-Pacific Software Engineering Conference},
doi = {10.1109/APSEC.2012.141},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Asadullah et al. - Design Patterns Based Pre-processing of Source Code for Plagiarism Detection.pdf:pdf},
isbn = {978-1-4673-4930-7},
keywords = {Design Patterns,Detecting plagiarism,Intellectual property,Java programming language,Matching techniques,Plagiarism Detection,Plagiarism detection,Preprocessing,Preprocessing approaches,Primitive types,Software engineering,Software program,Source Code Plagiarism Detection,Source code plagiarisms,Source codes},
language = {English},
month = {dec},
pages = {128--135},
publisher = {IEEE},
title = {{Design Patterns Based Pre-processing of Source Code for Plagiarism Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84874640040{\&}partnerID=40{\&}md5=9e4f6807ba7b3349dc7ccfc8a50a585e http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6462791 http://ieeexplore.ieee.org/document/6462791/},
volume = {2},
year = {2012}
}
@inproceedings{Grier:1981:TDP:800037.800954,
abstract = {Plagiarism has become a problem in introductory Computer Science courses. Programmed assignments can be copied and transformed with little human effort. A pertinent recommendation has resulted from this realization; an on-line system to detect programs that are ‚Äútoo similar‚Äù and hence suspected of plagiarism should be developed [4]. This paper discusses such a system for Pascal programs.},
address = {New York, New York, USA},
author = {Grier, Sam},
booktitle = {Proceedings of the twelfth SIGCSE technical symposium on Computer science education},
doi = {10.1145/800037.800954},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1981 - Grier - A tool that detects plagiarism in Pascal programs.pdf:pdf},
isbn = {0897910362},
pages = {15--20},
publisher = {ACM Press},
series = {SIGCSE '81},
title = {{A tool that detects plagiarism in Pascal programs}},
url = {http://doi.acm.org/10.1145/800037.800954 http://portal.acm.org/citation.cfm?doid=800037.800954},
year = {1981}
}
@article{Jones:2001:MBP:378613.378727,
abstract = {Plagiarism in programming courses is a pervasive and frustrating problem that undermines the educational process. Defining plagiarism is difficult because of the fuzzy boundary between allowable peer-peer collaboration and plagiarism. Pursuing suspected plagiarism has attendant emotional and legal risks to the student and teacher, with the teacher bearing the burden of proof. In this paper we present a metrics-based system for monitoring similarities between programs and for gathering the ‚Äúpreponderance‚Äù of evidence needed to pursue suspected plagiarism. Anonymous results from monitoring are posted to create a climate in which the issue of plagiarism is discussed openly.},
address = {USA},
author = {Jones, Edward L},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2001 - Jones - Metrics Based Plagarism Monitoring.pdf:pdf},
issn = {1937-4771},
journal = {Journal of Computing Sciences in Colleges},
number = {4},
pages = {253--261},
publisher = {Consortium for Computing Sciences in Colleges},
title = {{Metrics Based Plagarism Monitoring}},
url = {http://dl.acm.org/citation.cfm?id=378613.378727},
volume = {16},
year = {2001}
}
@inproceedings{Traxler:1996:PPR:247158.242625,
abstract = {In the light of recent press coverage of Wolverhampton University's attempts to sensitise students and staff to the dangers of copying and plagiarism in assessed coursework, it is timely to look at one facet of this problem peculiar to software engineering, namely the copying of source code by novice programmers, especially those novice programmers on high-volume modular programmes of study. This paper attempts to review the issue of plagiarism and copying from a wide variety of angles and in the light of this review draws on informal surveys and ongoing project work at Wolverhampton to highlight possible improvements. The paper starts by reviewing the most general factors that influence academic misdemeanors. These factors are common to all subjects and cover not only the institutional climate and its regulatory framework, b},
address = {Billerica, MA, USA},
author = {Traxler, J},
booktitle = {Proceedings of the Second International Conference on Software Engineering in Higher Education II},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1995 - Traxler - Plagiarism in Programming A Review and Discussion of the Factors.pdf:pdf},
isbn = {1-56252-309-0},
pages = {131--138},
publisher = {Computational Mechanics, Inc.},
series = {SEHE '95},
title = {{Plagiarism in Programming: A Review and Discussion of the Factors}},
url = {http://dl.acm.org/citation.cfm?id=247158.242625 http://www.witpress.com/elibrary/wit-transactions-on-information-and-communication-technologies/12/10511},
year = {1995}
}
@conference{Kim200510,
abstract = {In this paper, we introduce an evaluation system for identifying program similarity by comparing syntax-trees for the given programs. By using syntax-trees, this system is capable of distinguishing plagiarism in spite of changes in program styles such as indent, white space and comments. It can also recognize plagiarism patterns resulting from changes in program structure such as statement exchanges, code block and function. Syntax-trees are created after program parsing, so they have the advantage of performing syntax and semantic analysis automatically. We also introduce an evaluation algorithm for program similarity and a grouping algorithm for the sake of reducing the count of comparisons. The experiment and estimation proves that a grouping algorithm can reduce a lot of counts of comparison. {\textcopyright} Springer-Verlag Berlin Heidelberg 2005.},
annote = {cited By 1; Conference of International Conference on Computational Science and Its Applications - ICCSA 2005 ; Conference Date: 9 May 2005 Through 12 May 2005; Conference Code:65625},
author = {Kim, Young-Chul and Choi, Jaeyoung},
booktitle = {Lecture Notes in Computer Science},
doi = {10.1007/11424925_2},
editor = {{Gervasi O. Gavrilova M.L.}, Kumar V Lagana A Lee H P Mun Y Taniar D Tan C J K},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2005 - Kim, Choi - A Program Plagiarism Evaluation System.pdf:pdf},
issn = {03029743},
keywords = {Algorithms,Block codes,Computer program listings,Data structures,Evaluati,Program parsing,Program plagiarism,Syntax-trees},
number = {IV},
pages = {10--19},
title = {{A Program Plagiarism Evaluation System}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-24944446862{\&}partnerID=40{\&}md5=5835f76b775ca6952b77c6c74a9c85ec http://link.springer.com/10.1007/11424925{\_}2},
volume = {3483},
year = {2005}
}
@article{Shan2012363,
abstract = {With the rapid development of higher education, students copying work is becoming increasingly serious. The purpose of this paper is:first, converting the program into assembly language, and then using the string comparison algorithm, the improved algorithm KR, to get the similarity between programs. This method has very good results for teachers to detect plagiarism. {\textcopyright} 2012 Springer-Verlag GmbH.},
address = {Wuhan},
annote = {cited By 0; Conference of Electronic Commerce, Web Application and Communication, ECWAC 2012 ; Conference Date: 17 March 2012 Through 18 March 2012; Conference Code:91390},
author = {Shan, Shuqian and Guo, Fengjuan and Ren, Jiaxun},
doi = {10.1007/978-3-642-28655-1_57},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Shan, Guo, Ren - Similarity Detection Method Based on Assembly Language and String Matching.pdf:pdf},
isbn = {9783642286544},
issn = {18675662},
journal = {Advances in Intelligent and Soft Computing},
keywords = {Algorithms,Assembly language,Communication,Electronic commerce,Higher education,S,Similarity,World Wide We},
number = {VOL. 1},
pages = {363--367},
title = {{Similarity Detection Method Based on Assembly Language and String Matching}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84864302569{\&}partnerID=40{\&}md5=64ac50536f7dcd122babec431c3b3652 http://link.springer.com/10.1007/978-3-642-28655-1{\_}57},
volume = {148 AISC},
year = {2012}
}
@article{Mariani2012,
abstract = {In academic courses, students frequently take advantage of someone else's work to improve their own evaluations or grades. This unethical behavior seriously threatens the integrity of the academic system, and teachers invest substantial effort in preventing and recognizing plagiarism. When students take examinations requiring the production of computer programs, plagiarism detection can be semiautomated using analysis techniques such as JPlag and Moss. These techniques are useful but lose effectiveness when the text of the exam suggests some of the elements that should be structurally part of the solution. A loss of effectiveness is caused by the many common parts that are shared between programs due to the suggestions in the text of the exam rather than plagiarism. In this article, we present the AuDeNTES anti-plagiarism technique. AuDeNTES detects plagiarism via the code fragments that better represent the individual students' contributions by filtering from students' submissions the parts thatmight be common tomany students due to the suggestions in the text of the exam. The filtered parts are identified by comparing students' submissions against a reference solution, which is a solution of the exam developed by the teachers. Specifically, AuDeNTES first produces tokenized versions of both the reference solution and the programs that must be analyzed. Then, AuDeNTES removes from the tokenized programs the tokens that are included in the tokenized reference solution. Finally, AuDeNTES computes the similarity among the filtered tokenized programs and produces a ranked list of program pairs suspected of plagiarism. An empirical comparison against multiple state-of-the-art plagiarism detection techniques using several sets of real students' programs collected in early programming courses demonstrated that AuDeNTES identifies more plagiarism cases than the other techniques at the cost of a small additional inspection effort. {\textcopyright} 2012 ACM 1946-6226/2012/03-ART2 10.00.},
annote = {cited By 0},
author = {Mariani, Leonardo and Micucci, Daniela},
doi = {10.1145/2133797.2133799},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Mariani, Micucci - AuDeNTES Automatic Detection of teNtative plagiarism according to a rEference Solution.pdf:pdf},
issn = {19466226},
journal = {ACM Transactions on Computing Education},
keywords = {Academic course,Academic system,Algorithms,Analysis techniq,Intellectual property,Students},
month = {mar},
number = {1},
pages = {1--26},
title = {{AuDeNTES: Automatic Detection of teNtative plagiarism according to a rEference Solution}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84859407319{\&}partnerID=40{\&}md5=5300be77658c220ae7c3aae0e4a2dc92 http://dl.acm.org/citation.cfm?doid=2133797.2133799},
volume = {12},
year = {2012}
}
@conference{Wise1992268,
abstract = {It has argued that systems for detecting similarities in submitted programs must be based on the analysis of program structure. One such system is `Plague'. In this paper, some difficulties with the Plague system are outlined and a new system is described that achieves the same goals as Plague, but in a way that is both more portable and more easily customized to new target languages.},
address = {Kansas City, MO, USA},
annote = {cited By 34; Conference of 23rd SIGCSE Technical Symposium on Computer Science Education ; Conference Date: 5 March 1992 Through 6 March 1992; Conference Code:17693},
author = {Wise, Michael J},
booktitle = {ACM SIGCSE Bulletin},
doi = {10.1145/135250.134564},
editor = {Anon},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1992 - Wise - Detection of similarities in student programs.pdf:pdf},
isbn = {0897914686},
issn = {00978418},
keywords = {Computer based plagiarism,Computer programming,Computer programming languages,Computer software,Plague systems,Progra},
month = {mar},
number = {1},
pages = {268--271},
publisher = {Publ by ACM, Fort Collins, CO, United States},
title = {{Detection of similarities in student programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-0026826629{\&}partnerID=40{\&}md5=354e6bc2ec8fe84b76c7228018978f70 http://portal.acm.org/citation.cfm?doid=135250.134564},
volume = {24},
year = {1992}
}
@conference{Nunome2010181,
abstract = {In this paper, we present an e-learning back-end system which cooperates with a learning management system (LMS). Our back-end system is aimed at fair and effective assessment in a class of elementary programming practice. While most LMSs provide basic functions to support various learning courses, this back-end system complements such conventional LMSs by providing the following specialized functions: syntax check of codes, plagiarism detection, and automated black-box testing. Our specialized back-end system makes a general-purpose LMS more useful for both students and teachers at low cost. The back-end system gets account information about a student from the front-end LMS such as Moodle when a student submits a report. This approach makes the back-end system maintenance-free from user table and enables single sign-on (SSO) for all LMS users. In order to accept simultaneous requests from numerous students and to respond without delay, the system is designed to minimize the amount of file locking and dynamic page generation. The back-end system is used in practical classes, and students of the classes feel no stress on the response time. {\textcopyright} 2010 ACM.},
address = {New York, New York, USA},
annote = {cited By 0; Conference of 38th Annual Fall Conference on SIGUCCS, SIGUCCS '10 ; Conference Date: 24 October 2010 Through 27 October 2010; Conference Code:83165},
author = {Nunome, Atsushi and Hirata, Hiroaki and Fukuzawa, Masayuki and Shibayama, Kiyoshi},
booktitle = {Proceedings of the 38th annual fall conference on SIGUCCS},
doi = {10.1145/1878335.1878381},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Nunome et al. - Development of an e-learning back-end system for code assessment in elementary programming practice.pdf:pdf},
isbn = {9781450300032},
keywords = {Backend system,Basic functions,Black-box testing,E-learning,Management,Rating,Students,Teaching},
pages = {181},
publisher = {ACM Press},
title = {{Development of an e-learning back-end system for code assessment in elementary programming practice}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78650614870{\&}partnerID=40{\&}md5=b189da695d72f463d4497cbe6f9314d8 http://portal.acm.org/citation.cfm?doid=1878335.1878381},
year = {2010}
}
@article{Shan201432,
abstract = {With the rapid development of higher education, students copying work is becoming increasingly serious.The purpose of this paper is:first, geting the count and frequency of attribute used in program, and second using Chi-square test method to get the similarity between programs. This method has very good results for teachers to detect plagiarism.},
annote = {cited By 0; Conference of International Forum on Computers, Electronics and Mechatronics, IFCEM 2014 ; Conference Date: 27 August 2014 Through 28 August 2014; Conference Code:108639},
author = {Shan, Shu Qian and Tian, Zhi Gang and Guo, Feng Juan and Ren, Jia Xun},
doi = {10.4028/www.scientific.net/AMM.667.32},
editor = {P., Yarlagadda},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Shan et al. - Similarity Detection's Application Using Chi-Square Test in the Property of Counting Method.pdf:pdf},
isbn = {9783038352907},
issn = {1662-7482},
journal = {Applied Mechanics and Materials},
keywords = {Attribute of counting,Chi-square tests,Higher e,Software testing,Statistical tests,Teaching,Testing},
month = {oct},
pages = {32--35},
publisher = {Trans Tech Publications Ltd},
title = {{Similarity Detection's Application Using Chi-Square Test in the Property of Counting Method}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84920864254{\&}partnerID=40{\&}md5=795f0215ce9e9556e1cd6a2b8f651676 http://www.scientific.net/AMM.667.32},
volume = {667},
year = {2014}
}
@conference{Freire2008404,
abstract = {Programming assignments are easy to plagiarize in such a way as to foil casual reading by graders. Graders can resort to automatic plagiarism detection systems, which can generate a "distance" matrix that covers all possible pairings. Most plagiarism detection programs then present this information as a simple ranked list, losing valuable information in the process. The Ac system uses the whole distance matrix to provide graders with multiple linked visualizations. The graph representation can be used to explore clusters of highly related submissions at different filtering levels. The histogram representation presents compact "individual" histograms for each submission, complementing the graph representation in aiding graders during analysis. Although Ac's visualizations were developed with plagiarism detection in mind, they should also prove effective to visualize distance matrices from other domains, as demonstrated by preliminary experiments. Copyright 2008 ACM.},
address = {New York, New York, USA},
annote = {cited By 5; Conference of Working Conference on Advanced Visual Interfaces, AVI 08 ; Conference Date: 28 May 2008 Through 30 May 2008; Conference Code:74431},
author = {Freire, Manuel},
booktitle = {Proceedings of the working conference on Advanced visual interfaces},
doi = {10.1145/1385569.1385644},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Freire - Visualizing program similarity in the Ac plagiarism detection system.pdf:pdf},
isbn = {9781605581415},
keywords = {Ac systems,Distance matrixes,Do-mains,Graph re,Signal detection,Unmanned aerial vehicles (UAV),Visualization},
pages = {404},
publisher = {ACM Press},
title = {{Visualizing program similarity in the Ac plagiarism detection system}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-57349144910{\&}partnerID=40{\&}md5=4ca55c6c160dd22bcab595e78d7e957e http://portal.acm.org/citation.cfm?doid=1385569.1385644},
year = {2008}
}
@conference{Gitchell1999266,
abstract = {We describe the design and implementation of a program called sim to measure similarity between two C computer programs. It is useful for detecting plagiarism among a large set of homework programs. This software is part of a project to construct tools to assist the teaching of computer science.},
address = {New York, New York, USA},
annote = {cited By 46},
author = {Gitchell, David and Tran, Nicholas},
booktitle = {The proceedings of the thirtieth SIGCSE technical symposium on Computer science education},
doi = {10.1145/299649.299783},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1999 - Gitchell, Tran - Sim A utility for detecting similarity in computer programs.pdf:pdf},
isbn = {1581130856},
issn = {00978418},
number = {1},
pages = {266--270},
publisher = {ACM Press},
title = {{Sim: A utility for detecting similarity in computer programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-1442344984{\&}partnerID=40{\&}md5=fe56fb798c9487fb7b1518bfb3df8af2 http://portal.acm.org/citation.cfm?doid=299649.299783},
volume = {31},
year = {1999}
}
@article{Parker199294,
abstract = {A survey of computer algorithms used for the detection of student plagiarism is presented. A summary of several algorithms is provided. Common features of the different plagiarism detection algorithms are described. Ethical and administrative issues involving detected plagiarism are discussed.},
annote = {cited By 50},
author = {Parker, Alan and Hamblen, J.O.},
doi = {10.1109/13.28038},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1989 - Parker, Hamblen - Computer algorithms for plagiarism detection.pdf:pdf},
issn = {00189359},
journal = {IEEE Transactions on Education},
keywords = {Automatic Plagiarism Detection,Computer Programming,Computer Software--Computer Aided Analysis,Plagiarism Detect},
month = {may},
number = {2},
pages = {94--99},
title = {{Computer algorithms for plagiarism detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-34250902471{\&}partnerID=40{\&}md5=42e5c63a3eb5b56852a658a71da6837b http://ieeexplore.ieee.org/document/28038/},
volume = {32},
year = {1989}
}
@article{Daly2005662,
abstract = {We present a technique for detecting plagiarism in computer code, which is easier to implement than existing methods and has the advantage of distinguishing between the originator and the copiers. We record our experience using it to monitor a large group studying Java programming in an automated learning environment. {\textcopyright} The Author 2005. Published by Oxford University Press on behalf of The British Computer Society. All rights reserved.},
annote = {cited By 5},
author = {Daly, C},
doi = {10.1093/comjnl/bxh139},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2005 - Daly - A Technique for Detecting Plagiarism in Computer Code.pdf:pdf},
issn = {0010-4620},
journal = {The Computer Journal},
keywords = {Algorithms,Automated learning environment,Codes (symbols),Computer aided instru,Computer code,De,Programming theory},
month = {jun},
number = {6},
pages = {662--666},
title = {{A Technique for Detecting Plagiarism in Computer Code}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-27844559732{\&}partnerID=40{\&}md5=0b64a2c13d32e29c7f7e88635dfbd62b https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/bxh139},
volume = {48},
year = {2005}
}
@article{Chunhui2013269,
abstract = {Student plagiarism is epidemic in universities. In computer programming education process, it is very common that students copy or modify other'scode as their own work. Because every course having numerous assignments, detected plagiarism will be very difficult and extremely time consuming. Howto prevent the plagiarism in programming course is an important problem in education. This paper analyzes and expatiates the reasons and the methods about the code's plagiarism, and thinks there are two phases in preventing this plagiarism: one is preventing plagiarism from occur, the other is to detect cases of plagiarism when the preventative measures fail. Preventing plagiarism methods mainly include the valid course assignment design and to forbid the electronic copy. This paper describes a code's editor software which has been implemented use Java. When the preventative measures fail, this paper describes an automatic tool to help instructor find the suspicious targets. These phases' aim is to cut down the plagiarism and improve the ability of the student' programming. {\textcopyright} 2013 SERSC.},
annote = {cited By 0},
author = {Wang, Chunhui and Liu, Zhiguo and Liu, Dongsheng},
doi = {10.14257/ijsia.2013.7.5.25},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Wang, Liu, Liu - Preventing and Detecting Plagiarism in Programming Course.pdf:pdf},
issn = {17389976},
journal = {International Journal of Security and Its Applications},
keywords = {Anti-plagiarism editor,Assignment design,Automat,Computer programming,Computer software,Curricul,Intellectual property},
month = {sep},
number = {5},
pages = {269--278},
title = {{Preventing and Detecting Plagiarism in Programming Course}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84886457646{\&}partnerID=40{\&}md5=72456827869dcc78d7e7212f6e2a80fa http://www.sersc.org/journals/IJSIA/vol7{\_}no5{\_}2013/25.pdf},
volume = {7},
year = {2013}
}
@article{Whale1990140,
abstract = {Various techniques for detecting similar programs in large classes have been proposed previously, but research in this area is hampered by the lack of a means for evaluating their performance. To address this deficiency, new concepts are introduced that permit the effectiveness of competing systems to be quantified and enable realistic comparisons to be made. Using these criteria, popular approaches to plagiarism detection based on counting program attributes are shown to be inadequate. A two-stage method of identifying similar pairs based on structural features is proposed, and the superior performance of this technique is established.},
annote = {cited By 37},
author = {Whale, G},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1990 - Whale - Identification of program similarity in large populations.pdf:pdf},
issn = {00104620},
journal = {Computer Journal},
keywords = {Computer Programming,Computer Software--Evaluation,Program Similarity},
number = {2},
pages = {140--146},
title = {{Identification of program similarity in large populations}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-0025417991{\&}partnerID=40{\&}md5=c6f0556703a397b19a29edc20d41027d},
volume = {33},
year = {1990}
}
@article{Jankowitz19881,
abstract = {Detecting plagiarism in student PASCAL programs is normally based on a statistical analyis of particular characteristics of style. We discuss how a 'template' can be constructed for each program, enabling us to identify other similar templates; this technique is used to extract similar regions or areas from our set of programs in order to perform the statistical analysis. Several examples are presented to show the power of this technique. We conclude by proposing a means of characterizing programming style and suggest its use as a gage for evaluating the student's assignment.},
annote = {cited By 24},
author = {Jankowitz, H T},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1988 - Jankowitz - Detecting plagiarsim in student pascal programs.pdf:pdf},
issn = {00104620},
journal = {Computer Journal},
keywords = {COMPUTER PROGRAMMING,COMPUTER PROGRAMMING LANGUAGES - PASCAL,PLAGIARISM,SATISTICAL ANALYSIS,STUDENT PASCAL P},
number = {1},
pages = {1--8},
title = {{Detecting plagiarsim in student pascal programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-0023960940{\&}partnerID=40{\&}md5=48adc5c2c157c401fe9166557e091ced},
volume = {31},
year = {1988}
}
@conference{Meyer2011143,
abstract = {We are excited to introduce CoMoTo - the Collaboration Modeling Toolkit - a new, web-based application that expands and enhances well-known software similarity detection systems. CoMoTo is an end-to-end data management, analysis, and visualization system whose purpose is to assist instructors of courses requiring programming exercises to monitor and investigate the extent of student collaboration, both allowed and illicit. We describe CoMoTo's interface, which was designed to facilitate scrutiny of collaboration data projected along student, course, assignment, etc. attributes, and to allow for interactive visualization of pairwise similarity measures via a dynamic graph. We also elaborate on the details of CoMoTo's implementation. Finally, we briefly discuss two use cases that foreshadow CoMoTo's broad utility in student code analysis, not only for plagiarism detection, but also for investigating early student coding styles, and for evaluating software similarity detection systems, themselves. {\textcopyright} 2011 ACM.},
address = {New York, New York, USA},
annote = {cited By 1; Conference of 16th Annual Conference on Innovation and Technology in Computer Science, ITiCSE'11 ; Conference Date: 27 June 2011 Through 29 June 2011; Conference Code:85531},
author = {Meyer, Charlie and Heeren, Cinda and Shaffer, Eric and Tedesco, Jon},
booktitle = {Proceedings of the 16th annual joint conference on Innovation and technology in computer science education},
doi = {10.1145/1999747.1999789},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Meyer et al. - CoMoTo the collaboration modeling toolkit.pdf:pdf;:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Meyer et al. - CoMoTo the collaboration modeling toolkit(2).pdf:pdf},
isbn = {9781450306973},
keywords = {Code analysis,Computer science,Data visualization,Dynamic graph,Engineering,Evaluating software,Information management},
pages = {143},
publisher = {ACM Press},
title = {{CoMoTo: the collaboration modeling toolkit}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79960332710{\&}partnerID=40{\&}md5=e4b770f8da05d1d6794b31dd0f48d9fd http://portal.acm.org/citation.cfm?doid=1999747.1999789},
year = {2011}
}
@article{Verco1996749,
abstract = {Early automated systems for detecting plagiarism in student programs employed attribute counting techniques in their comparisons of program texts, while more recent systems use encoded structural information. Whales claims that the latter are more effective in their detection of plagiarisms than systems based on attribute counting. To explore the validity of these claims, a comparison is presented of five systems, two based on attribute counting and three using metrics based on structure. The major result of this study is that the systems based on structural information consistently equal or better the performance of systems based on attribute counting metrics. A second conclusion is that of the structure metric systems, one using approximate tokenization of input texts (YAP) is as effective as a system that undertakes a complete parse (Plague). Approximate tokenization offers a considerable reduction in the costs of porting to new languages. A distinction is also made between forms of plagiarism common among novice programmers and those employed by more experienced programmers.},
annote = {cited By 7},
author = {Verco, K L and Wise, M J},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1996 - Verco, Wise - Plagiarism {\`{a}} la mode A comparison of automated systems for detecting suspected plagiarism.pdf:pdf},
issn = {00104620},
journal = {Computer Journal},
number = {9},
pages = {749--750},
title = {{Plagiarism {\`{a}} la mode: A comparison of automated systems for detecting suspected plagiarism}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-26844517162{\&}partnerID=40{\&}md5=68b9466770e6588d659cca4f0d99b94f},
volume = {39},
year = {1996}
}
@article{Al-Khanjari201066,
abstract = {Practical computing courses that involve signifi cant amount of programming assessment tasks suffer from e-Plagiarism. A pragmatic solution for this problem could be by discouraging plagiarism particularly among the beginners in programming. One way to address this is to automate the detection of plagiarized work during the marking phase. Our research in this context involves at fi rst examining various metrics used in plagiarism detection in program codes and secondly selecting an appropriate statistical measure using attribute counting metrics (ATMs) for detecting plagiarism in Java programming assignments. The goal of this investigation is to study the effectiveness of ATMs for detecting plagiarism among assignment submissions of introductory programming courses. {\textcopyright} 2010 ACM.},
annote = {cited By 1},
author = {Al-Khanjari, Z. A. and Fiaidhi, J. A. and Al-Hinai, R. A. and Kutti, N. S.},
doi = {10.1145/1869746.1869766},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Al-Khanjari et al. - PlagDetect A Java Programming Plagiarsim Detection Tool.pdf:pdf},
issn = {21532184},
journal = {ACM Inroads},
keywords = {ATMs,Assessment tasks,Automatic teller machines,Computer programming,Correlation coeffi cient r,Java programming language},
month = {dec},
number = {4},
pages = {66},
title = {{PlagDetect: A Java Programming Plagiarsim Detection Tool}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79952957015{\&}partnerID=40{\&}md5=ed583edc0c2879a4065ae581060fd031 http://dl.acm.org/citation.cfm?doid=1869746.1869766},
volume = {1},
year = {2010}
}
@conference{Mann2006143,
abstract = {This paper examines the relationship between plagiarism and normal variation in student programming assignments. Reasons why code might be similar, both innocuous and suspicious are described. Free text searching and structural metrics are used to examine a set of programming assignments. These metrics are used as the basis for analysis of the variability in the student assignments and the processes used by the students. The boundary between normal practice and plagiarism is examined by "forced plagiarism". Finally we briefly examine student understanding of cheating and normal work processes. The investigation of similarity has provided some clarity to the ambiguous fine line of un/acceptable practice. {\textcopyright} 2006, Australian Computer Society, Inc.},
address = {Hobart, TAS, Australia},
annote = {cited By 1; Conference of 8th Australasian Computing Education Conference, ACE 2006 ; Conference Date: 16 January 2006 Through 19 January 2006; Conference Code:93116},
author = {Mann, S and Frew, Z},
booktitle = {Conferences in Research and Practice in Information Technology Series},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Mann, Frew - Similarity and originality in code Plagiarism and normal variation in student assignments.pdf:pdf},
isbn = {1920682341; 9781920682347},
issn = {14451336},
keywords = {Assessment,Free texts,Intellectual property,Mathematical programming,Plagiarism,Programming as,Students},
pages = {143--150},
title = {{Similarity and originality in code: Plagiarism and normal variation in student assignments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84869053726{\&}partnerID=40{\&}md5=08d844b66139823539fe6f076b2be50d},
volume = {52},
year = {2006}
}
@article{Aasheim2012297,
abstract = {This paper examines student attitudes towards a number of behaviors which range from acceptable means of seeking help on assignments to unacceptable behaviors such as copying from another student or paying someone to complete an assignment. Attitudes regarding such behaviors are compared based on the type of assignment (programming assignment, written essay, math problems). Findings indicate that students do perceive that there are differences in the acceptability of behaviors depending on assignment type. Further, the study examines the effect of an education campaign designed to increase student awareness as to which behaviors are permitted. Results suggest that faculty efforts to clarify expectations do result in a change in student attitudes regarding the acceptability of certain behaviors.},
annote = {cited By 0},
author = {Aasheim, C.L.a and Rutner, P.S.b and Li, L.c and Williams, S.R.b},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Aasheim et al. - Plagiarism and programming A survey of student attitudes.pdf:pdf},
issn = {10553096},
journal = {Journal of Information Systems Education},
keywords = {Intellectual property,Mathematical programming,Plagiarism,Programming assignments,Student attit,Students},
number = {3},
pages = {297--314},
title = {{Plagiarism and programming: A survey of student attitudes}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84874717191{\&}partnerID=40{\&}md5=058f5a5962c6819bdd200fe1a868a1d1},
volume = {23},
year = {2012}
}
@conference{Wise1996130,
abstract = {In spite of years of effort, plagiarism in student assignment submissions still causes considerable difficulties for course designers; if students' work is not their own, how can anyone be certain they have learnt anything? YAP is a system for detecting suspected plagiarism in computer programs and other texts submitted by students. The paper reviews YAP3, the third version of YAP, focusing on its novel underlying algorithm - Running-Karp-Rabin Greedy-String-Tiling (or RKS-GST), whose development arose from the observation with YAP and other systems that students shuffle independent code segments. YAP3 is able to detect transposed subsequences, and is less perturbed by spurious additional statements. The paper concludes with a discussion of recent extension of YAP to English texts, further illustrating the flexibility of the YAP approach.},
address = {New York, New York, USA},
annote = {cited By 79},
author = {Wise, Michael J},
booktitle = {Proceedings of the twenty-seventh SIGCSE technical symposium on Computer science education},
doi = {10.1145/236452.236525},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1996 - Wise - YAP3 improved detection of similarities in computer program and other texts.pdf:pdf},
isbn = {089791757X},
issn = {00978418},
keywords = {Algorithms,Codes (symbols),Computer programming,Education,Plagiarism,Running-Karp-Rabin Greedy-String-Tilin},
number = {1},
pages = {130--134},
publisher = {ACM Press},
title = {{YAP3: improved detection of similarities in computer program and other texts}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-0029701640{\&}partnerID=40{\&}md5=b5d764d657bd9cbb48cf15275eeae449 http://portal.acm.org/citation.cfm?doid=236452.236525},
volume = {28},
year = {1996}
}
@conference{Ghosh2002489,
abstract = {In this paper, we propose and discuss a fully automated system for marking and plagiarism detection for programming assessment. The plagiarism approach involves finding similarities between programs submitted by students, and rank them depending on their similarity metrics based on certain fuzzy rules. The system is a syntax dependant approach for C language and is based on a tree data structure with leafs and attributes that denote the semantic translation of the given program. The system has been tested successfully on real world programming assignments from software development course at Griffith University.},
address = {Bathurst, Australia},
annote = {cited By 0; Conference of Proceedings of the First International Conference on Information Technology and Applications (ICITA 2002) ; Conference Date: 25 November 2002 Through 28 November 2002; Conference Code:62642},
author = {Ghosh, M and Verma, B and Nguyen, A},
booktitle = {Proceedings of the First International Conference on Information Technology and Applications},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2002 - Ghosh, Verma, Nguyen - An Automatic Assessment Marking And Plagiarism Detection.pdf:pdf},
isbn = {1864671149},
keywords = {Automated marking,Automation,C (programming language),Codes (symbo,Fuzzy sets,Plagiarism,Tree structure},
pages = {489--494},
title = {{An Automatic Assessment Marking And Plagiarism Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-1842580485{\&}partnerID=40{\&}md5=8f16cddf26ea2b1a2b78a6918f2c2c18},
year = {2002}
}
@article{Whale1990131,
abstract = {The reliability of plagiarism detection systems, which try to identify similar programs in large populations, is critically dependent on the choice of program representation. Software metrics conventionally used as representations are described, and the limitations of metrics adapted from software complexity measures are outlined. An application-specific metric is proposed, one that represents the structure of a program as a variable-length profile. Its constituent terms, each recording the control structures in a program fragment, are ordered for efficient comparision. The superior performance of the plagiarism detection system based on this profile is reported, and deriving complexity measures from the profile is discussed.},
annote = {Special Issue on Using Software Metrics},
author = {Whale, Geoff},
doi = {10.1016/0164-1212(90)90118-6},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1990 - Whale - Software metrics and plagiarism detection.pdf:pdf},
issn = {01641212},
journal = {Journal of Systems and Software},
month = {oct},
number = {2},
pages = {131--138},
title = {{Software metrics and plagiarism detection}},
url = {http://www.sciencedirect.com/science/article/pii/0164121290901186 http://linkinghub.elsevier.com/retrieve/pii/0164121290901186},
volume = {13},
year = {1990}
}
@article{Chuda20103140,
abstract = {The paper attempts to analyze current situation in plagiarism detection and to analyze existing methods and tools for checking the plagiarized programming code and natural language (particularly Slovak) text. Then, we describe our approach to plagiarism detection for two particular but important cases: texts in formal programming language and texts in natural language (Slovak). We describe method and tools that evaluate plagiarized programming code and plagiarized Slovak text. Our method and tool proposal has an ambition to improve some of the known weaknesses. We aim at implementing an effective, widely usable tool with more precise results. We are in the process of setting it in our Faculty environment.},
annote = {Innovation and Creativity in Education},
author = {Chuda, Daniela and Navrat, Pavol},
doi = {10.1016/j.sbspro.2010.03.478},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Chuda, Navrat - Support for checking plagiarism in e-learning.pdf:pdf},
issn = {18770428},
journal = {Procedia - Social and Behavioral Sciences},
keywords = {Plagiarism,evaluating of assignment,plagiarized programming code,plagiarized text},
number = {2},
pages = {3140--3144},
title = {{Support for checking plagiarism in e-learning}},
url = {http://www.sciencedirect.com/science/article/pii/S1877042810005185 http://linkinghub.elsevier.com/retrieve/pii/S1877042810005185},
volume = {2},
year = {2010}
}
@inproceedings{6113388,
abstract = {The technologies for identifying program code similarity are significant in college practice courses and software design. This paper introduces the definition of code similarity, summarizes eight means of plagiarism of program code, and presents the Pyramid of Code Plagiarism. It also compares some identification technologies and systems suggested by previous scholars, and analyses identification technologies in the past five years which are based on Abstract Syntax Tree, Program Dependence Graph, BP Neural Network and XML. The paper further points out the lacks of identification accuracy, test sets and an official definition of similarity in this field. It also looks into the trend of this technology, such as a combination of different techniques and application of new algorithms.},
address = {Nanjing, Jiangsu, China},
author = {Chen, Gang and Zhang, Yuqing and Wang, Xin},
booktitle = {International Conference of Information Technology, Computer Engineering and Management Sciences},
doi = {10.1109/ICM.2011.240},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Chen, Zhang, Wang - Analysis on Identification Technologies of Program Code Similarity.pdf:pdf},
isbn = {978-1-4577-1419-1},
keywords = {XML,backpropagation,computer science education,edu},
month = {sep},
pages = {188--191},
publisher = {IEEE},
title = {{Analysis on Identification Technologies of Program Code Similarity}},
url = {http://ieeexplore.ieee.org/document/6113388/},
volume = {1},
year = {2011}
}
@inproceedings{5608336,
abstract = {This paper mainly studies an XML plagiarism detection algorithm for Procedural Programming Languages. Picking out the key structure which can represent the procedural structure from C language; designing the algorithm of generating an XML text from program code; according to the different key structure and corresponding means of plagiarism, designing the different similarity comparison algorithm of XML text line; according to the similarity of XML text line, designing the procedural similarity comparison algorithm. Finally the usefulness of the plagiarism detection algorithm is discussed.},
address = {Chongqing, China},
author = {Mei, Zhong and Dongsheng, Liu},
booktitle = {International Conference on Educational and Information Technology},
doi = {10.1109/ICEIT.2010.5608336},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Mei, Dongsheng - An XML plagiarism detection algorithm for Procedural Programming Languages.pdf:pdf},
isbn = {978-1-4244-8033-3},
keywords = {C language,XML,XML plagi,computer crime},
month = {sep},
pages = {V3--427--V3--431},
publisher = {IEEE},
title = {{An XML plagiarism detection algorithm for Procedural Programming Languages}},
url = {http://ieeexplore.ieee.org/document/5608336/},
volume = {3},
year = {2010}
}
@inproceedings{1652567,
abstract = {A big part of life long learning is the move from residential lectures to distance education. Distance education falls under the multi-modal policy of the teaching institution and thereby a change in student contact. The lecturer facilitating the distance education course is also faced with a problem where the quality and originality of submitted assignments need to be checked. This has always been a difficult task, as going through practical assignments and looking for similarities is a tedious job. Software checkers are available, but as yet, have not been integrated into popular online e-learning systems. If closer contact and warning to students are given at an early stage the problem is minimized as they know they are being closely monitored. As shown in this article, plagiarism is a current problem with online practical submissions. We also show how this problem can be minimized through the integration of plagiarism checking tools and other checking methods into e-learning systems},
address = {Kerkrade, Netherlands},
author = {Marais, E and Minnaar, U and Argles, D},
booktitle = {Sixth IEEE International Conference on Advanced Learning Technologies},
doi = {10.1109/ICALT.2006.1652567},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Marais, Minnaar, Argles - Plagiarism in e-Learning Systems Identifying and Solving the Problem for Practical Assignments.pdf:pdf},
isbn = {0-7695-2632-2},
keywords = {computer aided instruction,continuing professional},
pages = {822--824},
publisher = {IEEE},
title = {{Plagiarism in e-Learning Systems: Identifying and Solving the Problem for Practical Assignments}},
url = {http://ieeexplore.ieee.org/document/1652567/},
year = {2006}
}
@article{5720272,
abstract = {The issue of plagiarism is discussed in the context of university education in disciplines related to computing. The focus is therefore mainly on software plagiarism. First, however, a case is made for the claim that the most important reason that plagiarism cannot be tolerated lies in the essence of the concept of a university as it is rooted in the Western cultural tradition. The main contribution of this paper is in providing firsthand insight into students' views on some of the delicate questions related to student plagiarism. However, this paper presents views from both sides of the question, including the views of staff members. This paper is quite unique in that it is coauthored by students who provide independent comments and recommendations.},
author = {Chuda, Daniela and Navrat, Pavol and Kovacova, Bianka and Humay, Pavel},
doi = {10.1109/TE.2011.2112768},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Chuda et al. - The Issue of (Software) Plagiarism A Student View.pdf:pdf},
issn = {0018-9359},
journal = {IEEE Transactions on Education},
keywords = {computer science education,educational institution},
month = {feb},
number = {1},
pages = {22--28},
title = {{The Issue of (Software) Plagiarism: A Student View}},
url = {http://ieeexplore.ieee.org/document/5720272/},
volume = {55},
year = {2012}
}
@inproceedings{6306707,
abstract = {This paper presents the design and implementation of a system of automatic evaluation of programming assignments at an undergraduate level. Evaluation is done primarily from two standpoints - plagiarism detection and program testing. Proposed algorithm for plagiarism detection detects all the most common forms of plagiarism done by students. Program testing is performed by subjecting the submitted program through a sequence of test cases which may be generated manually or automatically. System is made accessible through a web based interface for all users (teachers and students) with a database backend. Our experiences suggests that such a system improves the overall progress of students in terms of regularity, integrity, efficiency and accuracy, a claim which we shall prove towards the end of our paper.},
address = {Kottayam, India},
author = {Kaushal, Rishabh and Singh, Ankita},
booktitle = {IEEE International Conference on Engineering Education: Innovative Practices and Future Trends},
doi = {10.1109/AICERA.2012.6306707},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Kaushal, Singh - Automated evaluation of programming assignments.pdf:pdf},
isbn = {978-1-4673-2269-0},
keywords = {copyright,educational courses,engineering educatio},
month = {jul},
pages = {1--5},
publisher = {IEEE},
title = {{Automated evaluation of programming assignments}},
url = {http://ieeexplore.ieee.org/document/6306707/},
year = {2012}
}
@inproceedings{6457142,
abstract = {The purpose of this thesis is to propose the plagiarism detection approach aiming at C++ programs for student's assignments. the proposed approach combines three detection methods including structural analysis, variable analysis, and text analysis to construct a CPD (C++ Plagiarism Detection) system. for proving the effectiveness of the proposed approach, the CPD system was compared with other existing systems including one proprietary software and some academic researches. the experimental result showed the CPD system can detect more kinds of plagiarism patterns than other existing systems. Moreover, the combining approach was also compared with every single method. Also, the result proved the proposed approach was strongly avoiding many weaknesses which are inherently possessed in every single method. Finally, object-oriented analysis is presented by a case study.},
address = {Kitakushu, Japan},
author = {Kuo, Jong Yih and Huang, Fu Chu and Hung, Chien and Yang, Liu Hong Zhan},
booktitle = {Sixth International Conference on Genetic and Evolutionary Computing},
doi = {10.1109/ICGEC.2012.145},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Kuo et al. - The Study of Plagiarism Detection for Object-Oriented Programming.pdf:pdf},
isbn = {978-1-4673-2138-9},
keywords = {C++ language,C++ plagi,object-oriented programming},
month = {aug},
pages = {188--191},
publisher = {IEEE},
title = {{The Study of Plagiarism Detection for Object-Oriented Programming}},
url = {http://ieeexplore.ieee.org/document/6457142/},
year = {2012}
}
@inproceedings{4141631,
abstract = {A system for the automatic generation of plagiarism detectors that find similar programs in a set of student programs is presented. Existing plagiarism detectors are either applied to a programming language or a pre-defined set of programming languages. The general purpose one usually employs string matching to perform similarity measures that are based on plagiarism detection among documents in general, and not in programs in particular, thus, losing much of the structure and logic of programs in the process. On the other hand, plagiarism detectors for specific languages only cater to that particular set of languages. This study provides a means for the user to specify the programming language of the student programs to be analyzed. Moreover, an automatic plagiarism detector system must be immune to the transformations that students perform on copied programs. These transformations are usually dependent on several factors namely: the type of programming problems and correspondingly, the complexity of the project to be implemented by the students, and also the programming language paradigm of the programs. Thus, the similarity measures employed by the system should be determined by these factors and can be specified by the professor. He/she has the option to specify how the similarities among the student programs will be captured. The system provides an interface for the specification of the particular programming language in which the student programs are implemented, and a knowledgebase of similarity measures that the user would like to include in the analysis of the student programs. Hence, the system provides flexibility in the programming language of the student programs to be analyzed and the similarity measures that the professor wishes to employ. Initial qualitative and quantitative evaluations illustrate a flexible, convenient and cost-effective tool for building plagiarism detectors for effective detection of programs in various imperative and procedural p- - rogramming languages. The approach also addresses some of the changes that students perform on copied programs which JPlag fails to handle, thus, allowing for improved accuracy in terms of the reduction of false-positives, increasing the chance of catching plagiarized programs. These changes include modification of control structures, use of temporary variables and subexpressions, in-lining and re-factoring of methods, and redundancy (variables or methods that were not used). Comprehensive tests on other programming languages under various programming language paradigms such as object-oriented, logic and functional languages, considering the different changes that the students employ to copied programs (such as the tests done in JPlag) are also recommended for empirical evaluation},
address = {Ultimo, NSW, Australia},
author = {Roxas, Rachel Edita and Lim, Nathalie Rose and Bautista, Natasja},
booktitle = {7th International Conference on Information Technology Based Higher Education and Training},
doi = {10.1109/ITHET.2006.339768},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Roxas, Lim, Bautista - Automatic Generation of Plagiarism Detection Among Student Programs.pdf:pdf},
isbn = {1-4244-0405-3},
keywords = {computer aided instruction,computer science educat},
month = {jul},
pages = {226--235},
publisher = {IEEE},
title = {{Automatic Generation of Plagiarism Detection Among Student Programs}},
url = {http://ieeexplore.ieee.org/document/4141631/},
year = {2006}
}
@inproceedings{840376,
abstract = {Program assignments are traditionally an area of serious concern in maintaining the integrity of the educational process. Systematic inspection of all solutions for possible plagiarism has generally required unrealistic amounts of time and effort. The "Measure Of Software Similarity" tool developed by Alex Aiken at UC Berkeley makes it possible to objectively and automatically check all solutions for evidence of plagiarism. The authors have used MOSS in several large sections of a C programming course (MOSS can also handle a variety of other languages). They feel that MOSS is a major innovation for faculty who teach programming and recommend that it be used routinely to screen for plagiarism.},
address = {San Juan, Puerto Rico, USA},
author = {Bowyer, K.W. and Hall, L.O.},
booktitle = {29th Annual Frontiers in Education Conference. Designing the Future of Science and Engineering Education.},
doi = {10.1109/FIE.1999.840376},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1999 - Bowyer, Hall - Experience using MOSS to detect cheating on programming assignments.pdf:pdf},
isbn = {0-7803-5643-8},
issn = {0190-5848},
keywords = {computer science education,educational administrat},
pages = {13B3/18--13B3/22},
publisher = {Stripes Publishing L.L.C},
title = {{Experience using "MOSS" to detect cheating on programming assignments}},
url = {http://ieeexplore.ieee.org/document/840376/},
volume = {3},
year = {1999}
}
@article{4455467,
abstract = {Laboratory work assignments are very important for computer science learning. Over the last 12 years many students have been involved in solving such assignments in the authors' department, having reached a figure of more than 400 students doing the same assignment in the same year. This number of students has required teachers to pay special attention to conceivable plagiarism cases. A plagiarism detection tool has been developed as part of a full toolset for helping in the management of the laboratory work assignments. This tool defines and uses four similarity criteria to measure how similar two assignment implementations are. The paper describes the plagiarism detection tool and the experience of using it over the last 12 years in four different programming assignments, from microprogramming a CPU to system programming in C.},
author = {Rosales, Francisco and Garcia, Antonio and Rodriguez, Santiago and Pedraza, Jos{\'{E}} L and Mendez, Rafael and Nieto, Manuel M},
doi = {10.1109/TE.2007.906778},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Rosales et al. - Detection of Plagiarism in Programming Assignments.pdf:pdf},
issn = {0018-9359},
journal = {IEEE Transactions on Education},
keywords = {C language,c,computer science education},
month = {may},
number = {2},
pages = {174--183},
title = {{Detection of Plagiarism in Programming Assignments}},
url = {http://ieeexplore.ieee.org/document/4455467/},
volume = {51},
year = {2008}
}
@article{6493327,
abstract = {Code plagiarism is an increasing problem in computer science courses. To deal with this problem, the Vipassana software tool gives instructors improved visibility into their students' programming process.},
author = {Koss, Ian and Ford, Richard},
doi = {10.1109/MSP.2013.26},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Koss, Ford - Authorship Is Continuous Managing Code Plagiarism.pdf:pdf},
issn = {1540-7993},
journal = {IEEE Security {\&} Privacy},
keywords = {computer science education,educational courses,pro},
month = {mar},
number = {2},
pages = {72--74},
title = {{Authorship Is Continuous: Managing Code Plagiarism}},
url = {http://ieeexplore.ieee.org/document/6493327/},
volume = {11},
year = {2013}
}
@inproceedings{6234186,
abstract = {This paper proposes a method to automatically detect plagiarisms, i.e. illegal copies, among a set of programs submitted by students in elementary programming courses. In such courses, programming assignments are so simple that submitted programs are very short and similar to each other. Existing plagiarism detection methods, therefore, may yield many false positive results. The proposed method solves the problem by using three types of similarity: code, comment, and inconsistence. The inconsistence similarity, a unique feature of the method, improves the precision and recall ratios, and helps to find evidences of plagiarisms. Evaluation results using real student program assignments show the effectiveness of the proposed method.},
address = {Sichuan, China},
author = {Inoue, Ushio and Wada, Shuhei},
booktitle = {9th International Conference on Fuzzy Systems and Knowledge Discovery},
doi = {10.1109/FSKD.2012.6234186},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Inoue, Wada - Detecting plagiarisms in elementary programming courses.pdf:pdf},
isbn = {978-1-4673-0024-7},
keywords = {computer science education,copy protection,educati},
month = {may},
pages = {2308--2312},
publisher = {IEEE},
title = {{Detecting plagiarisms in elementary programming courses}},
url = {http://ieeexplore.ieee.org/document/6234186/},
year = {2012}
}
@inproceedings{5614410,
abstract = {Nowadays, the research of software homology detection is more and more important in the flourishing software market. Most of the existing detection tools are based on text structure but ignore the syntax framework structure of program codes. A few tools based on syntax structure do not consider detection on semantics level, which can be avoided by some plagiarism. The comparison system put forward in this paper combines comparison methods based on abstract syntax tree and simple semantics, such that being able to detect the homology software more accurately and comprehensively. It not only analyses the syntax structure of program codes, but also researches some simple semantics changes to achieve detection on both syntax and semantics level. Based on these, a homology detection system Code Compare is developed. Compared with other detection tools, Code Compare is capable of recognizing more code plagiarism types, thus can detect homology software more effectively.},
address = {Toronto, ON, Canada},
author = {Wu, Shizhong and Hao, Yongle and Gao, Xinyu and Cui, Baojiang and Bian, Ce},
booktitle = {Proceedings of the 2010 IEEE/WIC/ACM International Conference on Web Intelligence and Intelligent Agent Technology},
doi = {10.1109/WI-IAT.2010.100},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Wu et al. - Homology Detection Based on Abstract Syntax Tree Combined Simple Semantics Analysis.pdf:pdf},
isbn = {978-1-4244-8482-9},
keywords = {computer crime,program diagnostics,programming lan},
month = {aug},
pages = {410--414},
publisher = {IEEE},
title = {{Homology Detection Based on Abstract Syntax Tree Combined Simple Semantics Analysis}},
url = {http://ieeexplore.ieee.org/document/5614410/},
volume = {3},
year = {2010}
}
@inproceedings{4438470,
abstract = {Plagiarism in students programming assignment submissions causes considerable difficulties for course designers. Efficient detection of plagiarism in programming assignments of students is important to the educational procedure. This paper proposes a metric, based on information distance, to measure similarity between two programs. Furthermore, clustering analysis, based on shared near neighbors, is applied in order to provide more beneficial and detailed information about the program plagiarism. Experimental results demonstrate that our software has clear advantages over other plagiarism detection systems and it is quite beneficial to teachers to get rid of time-consuming and toilsome tasks. Key words: Program plagiarism, Detection, Information distance, Clustering},
address = {Jeju City, South Korea},
author = {Zhang, Liang and Zhuang, Yue-ting and Yuan, Zhen-ming},
booktitle = {The 2007 International Conference on Intelligent Pervasive Computing},
doi = {10.1109/IPC.2007.10},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2007 - Zhang, Zhuang, Yuan - A Program Plagiarism Detection Model Based on Information Distance and Clustering.pdf:pdf},
isbn = {978-0-7695-3006-2},
keywords = {Collaborative work,Computer science,Counting circu},
month = {oct},
pages = {431--436},
publisher = {IEEE},
title = {{A Program Plagiarism Detection Model Based on Information Distance and Clustering}},
url = {http://ieeexplore.ieee.org/document/4438470/},
year = {2007}
}
@inproceedings{5196118,
abstract = {Rapid development of industry and economy requires quick and efficient education of large amount of theoretical knowledge and practical skills. In computer science, especially in programming, this trend is very noticeable and real experts are needed and hard to create. But new problem has emerged in higher education and its name is plagiarism. In order to prevent this one would have to check all students program codes to find similarities. To do this efficiently a procedure has been designed upon which a certain prototype was developed and tested. We discuss efficiency of this solution and we also mention some other methods and algorithms. We also discuss some other possible usages of this solution and we mention further actions and steps in our research.},
address = {Dubrovnik, Croatia},
author = {Konecki, Mario and Orehovacki, Tihomir and Lovrencic, Alen},
booktitle = {31st International Conference on Information Technology Interfaces},
doi = {10.1109/ITI.2009.5196118},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Konecki, Orehovacki, Lovrencic - Detecting computer code plagiarism in higher education.pdf:pdf},
isbn = {978-953-7138-15-8},
issn = {1330-1012},
keywords = {computer science education,copyright,further educa},
month = {jun},
pages = {409--414},
publisher = {IEEE},
title = {{Detecting computer code plagiarism in higher education}},
url = {http://ieeexplore.ieee.org/document/5196118/},
year = {2009}
}
@article{2309,
abstract = {An undergraduate computer engineering laboratory that supports a one-quarter computer arithmetic course is described. This course is required for the computer engineering degree and is taken as a technical option by many students in electrical engineering and computer science. The features of this state-of-the-art laboratory include a local area network of computers, remote access via the campus network, electronic mail, online documentation, and automatic program submittal, grading, and plagiarism detection},
author = {Hamblen, J and Parker, A and Wachtel, S},
doi = {10.1109/13.2309},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1988 - Hamblen, Parker, Wachtel - A new undergraduate computer arithmetic software laboratory.pdf:pdf},
issn = {00189359},
journal = {IEEE Transactions on Education},
keywords = {computer aided instruction,computer science educat},
number = {3},
pages = {177--180},
title = {{A new undergraduate computer arithmetic software laboratory}},
url = {http://ieeexplore.ieee.org/document/2309/},
volume = {31},
year = {1988}
}
@inproceedings{Hage:2013:RPP:2541917.2541919,
abstract = {Holmes is a plagiarism detection tool for Haskell programs. In this paper, we describe Holmes and show that it can detect plagiarism in a substantial corpus (2,122 Haskell submissions spread over 18 different assignments) of Haskell programs submitted by undergraduate students in a undergraduate level functional programming course over a period of ten years, and consider its sensitivity to superficial changes in the source code.},
address = {Heerlen, The Netherlands},
annote = {THIS IS NOT THE FILE!!!},
author = {Hage, Jurriaan and Vermeer, Brian and Verburg, Gerben},
booktitle = {Proceedings of the 3rd Computer Science Education Research Conference on Computer Science Education Research},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Hage, Vermeer, Verburg - Research Paper Plagiarism Detection for Haskell with Holmes.pdf:pdf;:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Hage, Vermeer, Verburg - Research Paper Plagiarism Detection for Haskell with Holmes(2).pdf:pdf},
keywords = {Haskell,empirical validation,plagiarism detection tools,software analysis},
pages = {19--30},
publisher = {Open Universiteit, Heerlen},
series = {CSERC '13},
title = {{Research Paper: Plagiarism Detection for Haskell with Holmes}},
url = {http://dl.acm.org/citation.cfm?id=2541917.2541919},
year = {2013}
}
@article{Robinson:1980:IAS:953032.804623,
abstract = {Analyzing and grading programs in an introductory computer science course can require a great deal of time and effort from the course instructor. This paper investigates the development of a system called Instructional Tool for Program ADvising (ITPAD) that assumes some of the instructor's duties by keeping student profiles and assignment profiles, by detecting possible plagiarism, and by providing suggestions directly to the students for improving their programs. The design of the ITPAD system is based mainly on the direct application of code optimization techniques to FORTRAN source programs. Several software science measures also provide some of the profile characteristics. The results of test runs show that this system helps the instructor monitor the progress of the students through the term and also helps the instructor determine the individual algorithmic approaches for a particular programming assignment. The system can further benefit the students directly by providing suggestions that emphasize the use of good programming style.},
address = {New York, NY, USA},
author = {Robinson, Sally S and Soffa, M L},
doi = {10.1145/953032.804623},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1980 - Robinson, Soffa - An instructional aid for student programs.pdf:pdf},
isbn = {0-89791-013-3},
issn = {00978418},
journal = {ACM SIGCSE Bulletin},
month = {feb},
number = {1},
pages = {118--129},
publisher = {ACM},
title = {{An instructional aid for student programs}},
url = {http://doi.acm.org/10.1145/953032.804623 http://portal.acm.org/citation.cfm?doid=953032.804623},
volume = {12},
year = {1980}
}
@inproceedings{Ciesielski2008,
abstract = {Detecting whether computer program code is a student's original work or has been copied from another student or some other source is a major problem for many universities. Detection methods based on the information retrieval concepts of indexing and similarity matching scale well to large collections of files, but require appropriate similarity functions for good performance. We have used particle swarm optimization and genetic programming to evolve similarity functions that are suited to computer program code. Using a training set of plagiarised and non-plagiarised programs we have evolved better parameter values for the previously published Okapi BM25 similarity function. We have then used genetic programming to evolve completely new similarity functions that do not conform to any predetermined structure. We found that the evolved similarity functions outperformed the human developed Okapi BM25 function. We also found that a detection system using the evolved functions was more accurate than the the best code plagiarism detection system in use today, and scales much better to large collections of files. The evolutionary computing techniques have been extremely useful in finding similarity functions that advance the state of the art in code plagiarism detection. Copyright 2008 ACM.},
address = {Melbourne, Australia},
annote = {Conference code: 74463

Cited By :3

Export Date: 23 February 2015

Correspondence Address: Ciesielski, V.; School of CS and IT, RMIT University, PO Box 2476V, Melbourne, VIC 3078, Australia; email: vic.ciesielski@rmit.edu.au

References: Bowyer, K., Hall, L., Experience Using 'MOSS' to Detect Cheating On Programming Assignments (1999) Proceedings of the Frontiers in Education Conference, 3, pp. 18-22; 
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient Plagiarism Detection for Large Code Repositories (2007) Software - Practice {\&} Experience, 37 (2), pp. 151-175;
Clerc, M., Kennedy, J., The Particle Swarm: Explosion, Stability, and Convergence in a Multi-Dimensional Complex Space (2002) IEEE Transactions on Evolutionary Computation, 6 (1), pp. 58-73;
Fan, W., Gordon, M., Pathak, P., A Generic Ranking Function Discovery Framework by Genetic Programming for Information Retrieval (2004) Information Processing and Management, 40 (4), pp. 587-602;
Gitchell, D., Tran, N., SIM: A Utility For Detecting Similarity in Computer Programs (1999) Proceedings of the 30th Technical Symposium on Computer Science Education, pp. 266-270. , New York, NY, ACM Press;
Koza, J.R., (2003) Genetic Programming IV: Routine Human-Competitive Machine Intelligence, , Kluwer Academic Publishers;
Jones, K.S., Walker, S., Robertson, S.E., A probabilistic model of information retrieval: Development and comparative experiments - part 2 (2000) Information Processing and Management, 36 (6), pp. 809-840;
Joy, M., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 (2), pp. 129-133;
Kennedy, J., Eberhart, R., Particle Swarm Optimization (1995) Proceedings of the IEEE International Conference on Neural Networks, 4, pp. 1942-1948;
C. Liu, C. Chen, J. Han, and P. Yu. GPLAG: Detection of Software Plagiarism by Program Dependence Graph Analysis. In Proceedings of the 12th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining, pages 872-881, New York, NY, 2006McConaghy, T., Gielen, G., Canonical Form Functions as a Simple Means for Genetic Programming to Evolve Human-Interpretable Functions (2006) Proceedings of the 8th Annual Conference on Genetic and Evolutionary Computation, pp. 855-862. , New York, NY, ACM Press;
Prechelt, L., Malpohl, G., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Robertson, S., Walker, S., Okapi/Keenbow at TREC-8 (1999) Overview of the Eighth Text REtrieval Conference (TREC-8), pp. 151-162;
Robertson, S., Walker, S., Hancock-Beaulieu, M., Experimentation as a way of life: Okapi at TREC (2000) Information Processing and Management, 36 (1), pp. 95-108;
Sheard, J., Dick, M., Markham, S., Macdonald, I., Walsh, M., Cheating and Plagiarism: Perceptions and Practices of First Year IT Students (2002) Proceedings of the 7th Annual Conference on Innovation and Technology in Computer Science Education, pp. 183-187. , New York, NY, ACM Press;
Whale, G., Identification of Program Similarity in Large Populations (1990) The Computer Journal, 33 (2), pp. 140-146;
Wu, N., (2007) Evolving Similarity Functions for Code Plagiarism Detection, , Honours Thesis, RMIT, School of Computer Science and Information Technology;
Zobel, J., Uni Cheats Racket (2004) Proceedings of the Sixth Australasian Computing Education Conference, 30, pp. 357-365. , A Case Study in Plagiarism Investigation, Darlinghurst, Australia, Australian Computer Society;
Zobel, J., Moffat, A., Exploring the similarity space (1998) ACM SIGIR Forum, 32 (1), pp. 18-34. , Spring},
author = {Ciesielski, V and Wu, N and Tahaghoghi, S},
booktitle = {10th Annual Genetic and Evolutionary Computation Conference},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Ciesielski, Wu, Tahaghoghi - Evolving similarity functions for code plagiarism detection.pdf:pdf},
isbn = {9781605581309 (ISBN)},
keywords = {Arts computing,Codes (symbols),Computer programming,Computer programs,Detection methods,Detection systems,Evolutionary algorithms,Evolutionary computing,Genetic algorithms,Genetic programming,Information services,Large collections,Optimization,Parameter values,Particle swarm optimization,Particle swarm optimization (PSO),Particle swarms,Plagiarism detections,Probability density function,Signal detection,Similarity functions,Similarity matching,State of the arts,Training sets},
language = {English},
pages = {1453--1460},
title = {{Evolving similarity functions for code plagiarism detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-57349170740{\&}partnerID=40{\&}md5=955cb5a39ae710bff9eac79ad838b759},
year = {2008}
}
@article{Novak1998,
abstract = {Numerical and statistical methods are used to analyze and classify computer programs. Both computer source code and object files are examined. The results of the application of the Pearson and Spearman correlation methods to the source code are coupled with the random walk model applied to the binary code. One of the practical consequences of the analysis is the ability to quantify the degree of similarity between different computer programs and, hence, identify cases of plagiarism.},
address = {School of Physics, Kingston University, Surrey KT1 2EE, United Kingdom},
annote = {Cited By :1

Export Date: 23 February 2015

Correspondence Address: Novak, M.M.; School of Physics, Kingston University, Surrey KT1 2EE, United Kingdom

References: Zhang, J., Schenkel, A., Zhang, Y.-C., Long Range Correlation in Human Writings (1993) Fractals, 1, pp. 47-57; 
Amit, M., Shmerler, Y., Eisenberg, E., Abraham, M., Shnerb, N., Language and Codification Dependence of Long-Range Correlations in Texts (1994) Fractals, 2, pp. 7-13;
Mantegna, R.N., Cohen, A., Havlin, S., Numerical Analysis of Word Frequencies in Artificial and Natural Language Texts (1997) Fractals, 5, pp. 95-104;
Press, W.H., Flannery, B.P., Teukolsky, S.A., Vetterling, W.T., Numerical Recipes, 1986. , Cambridge University Press;
Buldyrev, S.V., Fractals in Biology and Medicine (1994) Fractals in Science, , eds. A. Bunde and S. Havlin Springer Verlag;
Havlin, S., Buldyrev, S.V., Goldberger, A.L., Mantegna, R.N., Peng, C.-K., Simmons, M., Stanley, H.E., Statistical Properties of DNA Sequences (1995) Fractal Reviews in the Natural and Applied Sciences, pp. 1-11. , ed. M. M. Novak, Chapman and Hall;
Mandelbrot, B.B., (1983) The Fractal Geometry of Nature, , W. H. Freeman, New York},
author = {Novak, Miroslav M},
doi = {10.1142/S0218348X9800016X},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/1998 - Novak - Correlations in Computer Programs.pdf:pdf},
issn = {0218-348X},
journal = {Fractals},
language = {English},
month = {jun},
number = {02},
pages = {131--138},
title = {{Correlations in Computer Programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-2742599175{\&}partnerID=40{\&}md5=ce8331925cbbad4a0cb76d931aef2beb http://www.worldscientific.com/doi/abs/10.1142/S0218348X9800016X},
volume = {06},
year = {1998}
}
@inproceedings{Yang2010,
abstract = {Aiming at the structure feature of plagiarized source code, this paper proposes a kind of visual positioning recognition method based on the function domain mode of source code. According to the basic structure feature of source code, function domain is taken as the key point of visual recognition. In this method, the index of each function domain is recorded at first. Then it applies string matching algorithm at the layer of identifiers to corresponding functions in order to locate the similar areas and build the index map in source codes. At last the plagiarism areas are outstanding displayed by heterochromatic mark so as to achieve a visual effect of positioning domain. At the same time of visual recognition, the system also provides comparison and estimation of different ways. Practice proved that for the detection of common source code plagiarism in teaching, the method can do the visual recognition accurately, and the accuracy can reach 90{\%}. {\textcopyright} 2010 IEEE.},
address = {Dalian, China},
annote = {Conference code: 80396

Cited By :2

Export Date: 23 February 2015

Correspondence Address: Yang, S.; Electronic and Information Engineering School, Dalian University of Technology, Dalian, China; email: rr319@dlut.edu.cn

References: Whale, G., Plague: Plagiarism detection using program structure (1988) Dept. of Computer Science Technical Report 8805, , University of NSW, Kensington, Australia; 
Aiken, A., (2009) MOSS: A System for Detecting Software Plagiarism, p. 9. , http://theory.stanford.edu/{\~{}}aiken/moss/;
Schleimer, S., Wilkerson, D.S., Aiken, A., (2003) Winnowing: Local Algorithms for Document Fingerprinting, pp. 204-212. , ACM SIGMOD San Diego: ACM Press,2003;
Wise, M.J., YAP3: Improved detection of similarities of similarities in computer program and other texts Proceedings of the Twenty-seventh SIGCSE Technical Symposium, Philadelphia, Pennsylvania, United States, Feb. 1996, pp. 130-134;
Wise, M.J., Detection of similarities in student programs SIGSCI Technical Symposium, Kansas City, USA, 1992, pp. 268-271;
Prechelt, L., Malpohl, G., Phippsen, M., Finding Plagiarisms among a Set of Programs with Jplag (2002) Journal of Universal Computer Science, 11, pp. 1016-1038. , Aug;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs The Proceedings of the Thirtieth SIGCES Technical Symposium, New Orleans, Louisiana, United States, March 1999, pp. 266-270;
Freire, M., Visualizing Program Similarity in the AC Plagiarism Detection System Proceedings of the Working Conference on Advanced Visual Interfaces, Napoli, Italy, May 2008, pp. 404-407;
Hirschberg, D.S., Algorithms for the Longest Common Subsequence Problem (1977) Journal of the ACM, 4, pp. 664-675. , Dec;
Halstead, M.H., (1977) Elements of Software Science, , New York, North Holland;
Hikawa, H., Kugimiya, K., A New Hardware Friendly Vector Distance Evaluation Function for Vector Classifiers (2008) Lecture Notes in Computer Science, 4985, pp. 137-146
A4 - Jinggangshan University; Peoples' Friendship University of Russia; Feng Chia University; Nanchang HangKong University; East China Jiaotong University},
author = {Yang, Suying and Wang, Xin},
booktitle = {Third International Symposium on Intelligent Information Technology and Security Informatics},
doi = {10.1109/IITSI.2010.114},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Yang, Wang - A Visual Domain Recognition Method Based on Function Mode for Source Code Plagiarism.pdf:pdf},
isbn = {978-1-4244-6730-3},
keywords = {Algorithms,Basic structure,Common source,Function domain,Information science,Information technology,Keypoints,Maps,Recognition methods,Source code plagiarism,Source codes,String matching algorithm,Structural feature,Structural features,Structure features,Visual communication,Visual domain recognition,Visual effects,Visual positioning,Visual recognition},
language = {English},
month = {apr},
pages = {580--584},
publisher = {IEEE},
title = {{A Visual Domain Recognition Method Based on Function Mode for Source Code Plagiarism}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77952713446{\&}partnerID=40{\&}md5=78e3d675970b4264ac3fd94277af2c00 http://ieeexplore.ieee.org/document/5453693/},
year = {2010}
}
@article{Oetsch2010,
abstract = {Plagiarism detection is a growing need among educational institutions and solutions for different purposes exist. An important field in this direction is detecting cases of source-code plagiarism . In this paper, we present the tool Kato for supporting the detection of this kind of plagiarism in the area of answer-set programming (ASP). Currently, the tool is implemented for DLV programs but it is designed to handle other logic-programming dialects as well. We review the basic features of Kato , introduce its theoretical underpinnings, and discuss an application of Kato for plagiarism detection in the context of courses on logic programming at the Vienna University of Technology.},
address = {Vienna, Austria},
annote = {Cited By :2

Export Date: 23 February 2015

Correspondence Address: Oetsch, J.; Technische Universit{\"{a}}t Wien, Institut f{\"{u}}r Informationssysteme 184/3, Favoritenstrae 9-11, A-1040 Vienna, Austria; email: oetsch@kr.tuwien.ac.at

References: Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proceedings of the Twenty-Ninth Australasian Computer Science Conference (ACSC 2006), 48, pp. 277-286. , CRPIT, Australian Computer Society, Inc., Darlinghurst, Australia; 
Jill Austin, M., Brown, L.D., Internet plagiarism: Developing strategies to curb student academic dishonesty (1999) Internet and Higher Education, 2 (1), pp. 21-33;
Bergroth, L., Hakonen, H., Raita, T., A survey of longest common subsequence algorithms (2000) Proceedings of the Seventh International Symposium on String Processing Information Retrieval (SPIRE 2000), pp. 39-48. , IEEE Computer Society, Los Alamitos, California;
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , Technical Report CS-00-05, Department of Computer Science, University of Sheffield, UK;
Denecker, M., Vennekens, J., Bond, S., Gebser, M., Truszczynski, M., The second answer set programming competition (2009) Proceedings of the Tenth International Conference on Logic Programming and Nonmonotonic Reasoning (LPNMR 2009), 5753, pp. 637-654. , Lecture Notes in Computer Science, Springer, Berlin;
Eiter, T., Faber, W., Leone, N., Pfeifer, G., Polleres, A., A logic-programming approach to knowledge-state planning II: The dlv K system (2003) Artificial Intelligence, 144 (2), pp. 157-211;
Farringdon, J.M., (1996) Analyzing for Authorship: A Guide to the Cusum Technique, , University of Wales Press, Cardiff;
Gelfond, M., Lifschitz, V., Classical negation in logic programs and disjunctive databases (1991) New Generation Computing, 9 (3-4), pp. 365-385;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE Bulletin (Association for Computing Machinery, Special Interest Group on Computer Science Education), 31 (1), pp. 266-270;
Halstead, M.H., (1977) Elements of Software Science, , Elsevier Science Inc., New York;
Jones, E.L., Metrics based plagiarism monitoring (2001) Journal of Computing Sciences in Colleges, 16 (4), pp. 253-261;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) ITALICS, 4, p. 2. , http://www.ics.heacademy.ac.uk/italics/vol4iss2.htm, url;
Loose, F., Becker, S., Potthast, M., Stein, B., (2008) Retrieval-Technologien F{\"{u}}r Die Plagiaterkennung in Programmen, , Tech. rep., University of W{\"{u}}rzburg, Germany;
Csy, L.G., Szeredi, P., A generic framework for plagiarism detection in programs (2005) Proceedings of the 4th Japanese-Hungarian Symposium on Discrete Mathematics and its Applications, pp. 189-198;
Csy, L.G., Szeredi, P., Plagiarism detection in source programs using structural similarities (2009) Acta Cybernetica, 19 (1), pp. 191-216;
Maurer, H., Kappe, F., Zaka, B., Plagiarism: A survey (2006) Journal of Universal Computer Science, 12 (8), pp. 1050-1084;
Mozgovoy, M., (2008) Enhancing Computer-Aided Plagiarism Detection, , VDM Verlag, Saarbr{\"{u}}cken, Germany;
Ottenstein, K.J., An algorithmic approach to the detection and prevention of plagiarism (1976) SIGCSE Bulletin, 8 (4), pp. 30-41;
Prechelt, L., Malpohl, G., Philippsen, M., (2000) JPlag: Finding Plagiarisms Among a Set of Programs, , Technical Report 2000-1, Fakult{\"{a}}t f{\"{u}}r Informatik Universit{\"{a}}t Karlsruhe, Germany;
Serebrenik, A., Vanhoof, W., (2007) Fingerprinting Logic Programs, , CoRR abs/cs/0701081;
Verco, K.L., Wise, M.J., Plagiarism a la mode: A comparison of automated systems for detecting suspected plagiarism (1996) The Computer Journal, 39 (9), pp. 741-750;
Verco, K.L., Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) Proceedings of the Twenty-Seventh SIGCSE Technical Symposium on Computer Science Education (SIGCSE 1996), pp. 130-134. , ACM Press, New York, NY, USA;
Whale, G., Identification of program similarity in large populations (1990) Computer Journal, 33 (2), pp. 140-146;
Wise, M.J., (1993) Running Karp-Rabin Matching and Greedy String Tiling, , Technical report, Basser Department of Computer Science, University of Sydney, Australia},
author = {Oetsch, Johannes and P{\"{u}}hrer, J{\"{o}}rg and Schwengerer, Martin and Tompits, Hans},
doi = {10.1017/S1471068410000402},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Oetsch et al. - The system Kato Detecting cases of plagiarism for answer-set programs.pdf:pdf},
issn = {1471-0684},
journal = {Theory and Practice of Logic Programming},
keywords = {Answer-set programming,Educational institutions,Logic programming,Plagiarism detection,Program analysis,University of Technology,answer-set programming,plagiarism detection,program analysis},
language = {English},
month = {jul},
number = {4-6},
pages = {759--775},
title = {{The system Kato: Detecting cases of plagiarism for answer-set programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77957231094{\&}partnerID=40{\&}md5=b2b01fec116cb79d561ea246d5936634 http://www.journals.cambridge.org/abstract{\_}S1471068410000402},
volume = {10},
year = {2010}
}
@article{Doyle2009,
abstract = {The usage of online submission provides an efficient means of facilitating course components; especially those with large enrolment. However, this convenience is not without caveat as student solutions are then as easily distributed as they submitted for credit. While services exist to combat academic dishonesty, such as online comparison databases, privacy concerns have been raised about their usage. We have developed and implemented an entropy based method for the verification of academic integrity. This tool was implemented primarily for a freshman undergraduate programming course with a yearly enrolment of more than 1000 students. Even with significant resources and effort dedicated to ensuring academic integrity, the result was difficult to quantify. Further compounding the challenge was the fact that computer program source code has rigidly defined constructs and syntax, thus a simple text comparison could indicate a high level of similarity that might implying a lower level of integrity. Conversely, two logically identical programs could be written with different variable names where a simple text comparison could indicate a higher level of integrity. Rather than performing a straight comparison, our entropy based method generates a symbolic library of the file and then analyses the library structure against all other file libraries as a measure of academic integrity; this method defeats the short comings of the aforementioned methods. This paper will present our entropy based method and its high level of success verifying the academic integrity of large sets of assignment submissions.},
address = {McMaster University, Canada},
annote = {Cited By :1

Export Date: 23 February 2015

CODEN: CEJOE

Correspondence Address: Doyle, T. E.; McMaster UniversityCanada; email: doylet@mcmaster.ca

References: Foster, A., Plagiarism-Detection Tool Creates Legal Quandary (2002) The Chronicle of Higher Education, , http://chronicle.com/free/v48/i36/36a03701.htm, May 17, „Äà; 
McGill student wins fight over anti-cheating website (2004) CBC News, , http://www.cbc.ca/canada/story/2004/01/16/mcgill-turnitin030116.html, Canadian Broadcast Corporation, January 16, „Äà;
Mozgovoy, M., Desktop Tools for Offline Plagiarism Detection in Computer Programs (2006) Informatics in Education, v5-1, pp. 97-111;
Vamplew, P., Dermoudy, J., An Anti-Plagiarism Editor for Software Development Courses (2005) Proceedings of the 7th Australasian conference on Computing Education, 42, pp. 83-90. , Newcastle, New South Wales, Australia, pp;
Brin, S., Davis, J., Garc{\'{i}}a-Molina, H., Copy Detection Mechanisms for Digital Documents (1995) Proceedings of the 1995 ACM SIGMOD International Conference on Management of Data, pp. 398-409. , San Jose, California, USA;
Joy, M., Luck, M., Plagiarism in Programming Assignments (1999) IEEE Transactions on Education, 42 -2, pp. 129-133;
Parker, A., Computer Algorithms for Plagiarism Detection (1989) IEEE Transactions on Education, 32 -2, pp. 94-99;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) IEEE Transactions on Information Theory, 50 -7, pp. 1545-1550;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local Algorithms for Document Fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data, pp. 76-85. , San Diego, California, USA, pp;
Shannon, C., Weaver, W., (1949) The Mathematical Theory of Communication, , University of Illinois Press;
Ieta, A., Doyle, T. E., Kucerovsky, Z., and Greason, W. D. Challenges and Options Related to Scaling Raw Scores in Engineering Education, The International Network for Engineering Education and Research. Innovations 2008: World Innovations in Engineering Education and Research, iNEER, Arlington, VA, U.S.A., (13p.)Ieta, A., Doyle, T.E., Kucerovsky, Z., Greason, W.D., Enhanced Student Evaluation Software in Engineering and Science Courses (2007) Frontiers in Education Conference, , Milwaukee, Wisconsin, USA, October;
Ieta, A., Ieta, R., Doyle, T.E., (2007) Aggregation of Grades and Effective Grading, INNOVATIONS. , International Network for Engineering Education and Research iNEER, Special quot;, World Innovations in Engineering Education and Research},
author = {Doyle, T E and Sheng, Q and Ieta, A},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Doyle, Sheng, Ieta - Entropy based verification of academic integrity.pdf:pdf},
issn = {10693769 (ISSN)},
journal = {Computers in Education Journal},
keywords = {Academic dishonesties,Academic integrities,Computer programs,Entropy,Entropy-based methods,Online submissions,Privacy concerns,Programming course,Quality assurance,Short-comings,Teaching},
language = {English},
number = {1},
pages = {70--76},
title = {{Entropy based verification of academic integrity}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-63149151201{\&}partnerID=40{\&}md5=4e7d94adca7607200e5c3d46698ca21e},
volume = {19},
year = {2009}
}
@inproceedings{Sraka2009,
abstract = {Learning programming languages and developing software is important part of curricula at many educational institutions. Directly connected to that is a peer-to-peer sharing of program's source codes which is not always allowed. The article discusses the problem of plagiarism, especially the source code plagiarism and presents an excerpt of the results of the survey among students at Faculty of Education and Faculty of Computer and Information Science at University of Ljubljana and among students at Faculty of Natural Sciences and Mathematics at University of Maribor. Results are revealing alarming situation. In addition, advices for the teachers to avoid the plagiarism as much as possible are presented.},
address = {Ljbuljana, Slovenia},
annote = {Conference code: 78351

Cited By :3

Export Date: 23 February 2015

Correspondence Address: Sraka, D.; Faculty of Education, Kardeljeva pl. 16, 1000 Ljbuljana; email: dejan.sraka@guest.arnes.si

References: Bennett, R., Factors associated with student plagiarism in a post-1992 university (2005) Assessment {\&} Evaluation in Higher Education, 30 (2), pp. 137-162; 
Boden, D., Holloway, S., Learning about plagiarism through information literacy: A fusion of subject and information management teaching at Imperial College London (2004) Plagiarism: Prevention, Practice and Policies 2004 Conference; 2004 Jun 28-30; St. James Park, Newcastle Upon Tyne. Newcastle: Northumbria, pp. 31-39. , University Press;;
Bowyer, W.K., Hall, O.L., Experience Using "MOSS" to Detect Cheating On Programming Assignments Frontiers in Education Conference, FIE '99, 29th Annual; 1999 Nov 10-13; San Juan, Puerto Rico. p. 13B3/18-13B3/22;
Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting similarity and plagiarism within a university programming environment (1987) Computers and Education, 11 (1), pp. 11-19;
(2009) Google Code Search. Google Inc.; 2009, , http://www.google.com/codesearch, 19.01;
Hammond, M., Cyber plagiarism: Are FE students getting away with words. Plagiarism: Prevention (2004) Practice and Policies 2004 Conference; 2004 Jun 28-30; St. James Park, Newcastle Upon Tyne. Newcastle: Northumbria, pp. 257-264. , University Press;;
(2009) Krugle Select. Krugle Inc.; 2009, , http://krugle.org, 19.01;
Nan{\v{c}}ovska {\v{S}}erbec, I., Kau{\v{c}}«ê, B., Rugelj, J., Pair programming as a modern method of teaching computer science (2008) International journal: Emerging technologies in learning, 3 (2), pp. 45-49;
(2009) Open Source Code Search Engine - Koders. Black Duck Software; 2009, , http://www.koders.com, 19.01;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Transactions on Education, 32 (2), pp. 94-99;
plagiarism - Britannica Online Encyclopedia, http://www.britannica.com/ EBchecked/topic/462640/plagiarism [02/16/2009]Prechlet, L., Malpohl, G., Philippsen, M., JPlag: Finding plagiarisms among a set of programs (2000), Technical Report 2000-1. Karlsruhe: Fakult{\"{a}}t f{\"{u}}r Informatik, Universit{\"{a}}t Karlsruhe;(2009) Rent A Coder: How Software Gets Done. Exhedra Solutions Inc.; 2009, , http://www.rentacoder.com/RentACoder/DotNet/default.aspx, 19.01;
Schiller R M. E-Cheating: Electronic Plagiarism. Journal of the American Dietetic Association 2005; 105 (7): 1058-1062Webster's, , http:www.websters-online-dictionary.org/definition/plagiarism, Online Dictionary, 02/16/2009
A4 - Ministry of Science, Education and Sports},
author = {Sraka, Dejan and Kaucic, Branko},
booktitle = {31st International Conference on Information Technology Interfaces},
doi = {10.1109/ITI.2009.5196127},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Sraka, Kaucic - Source code plagiarism.pdf:pdf},
isbn = {978-953-7138-15-8},
keywords = {Computer programming,Curricula,Cut and paste culture,Cut-and-paste,Educational institutions,Electronic plagiarism detection service,Information technology,Learning programming,Natural sciences computing,Peer to peer,Plagiarism,Plagiarism detection,Programming,Source code,Source codes,Teaching},
language = {English},
month = {jun},
pages = {461--466},
publisher = {IEEE},
title = {{Source code plagiarism}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-70450184620{\&}partnerID=40{\&}md5=0943de131a0f4b61c7e9766bb2ac9d5e http://ieeexplore.ieee.org/document/5196127/},
year = {2009}
}
@inproceedings{Vogts2009,
abstract = {Learning to program is a complex task and is the reason that many novice programmers plagiarise source code when learning to program. There are many automated plagiarism detection tools which have been used to detect the plagiarism of source code, typically leading to disciplinary action being taken against students. This study investigates whether there is a difference in the plagiarism behaviour of students committing plagiarism for " acceptable" reasons as compared to "unacceptable" reasons so that an automated support tool for novice programmers might be viable. It was found that the reasons for committing plagiarism are most likely due to a lack of knowledge and that students commit plagiarism as a last resort in many cases. It was also found that there were differences between the behaviour of students plagiarising for "acceptable" and "unacceptable" reasons. Below average students plagiarising multiple lines of source code up to a complete method most likely do so for "acceptable" reasons. It was not possible to distinguish between "acceptable" and " unacceptable" plagiarising behaviour for above average subjects, but the plagiarising of multiple classes or files was almost always for "unacceptable" reasons. Copyright 2009 ACM.},
address = {New York, New York, USA},
annote = {Conference code: 78969

Export Date: 23 February 2015

Correspondence Address: Vogts, D.; Nelson Mandela Metropolitan University, P.O. Box 77000, Port Elizabeth, 6031, South Africa; email: dieter.vogts@nmmu.ac.za

References: Lancaster, T. and Culwin, F. 2005. Classifications of Plagiarism Detection Engines. ITALICS, 4(2)Vamplew, P. and Dermoudy, J. 2005. An Anti-Plagiarism Editor for Software Development Courses. In Proceedings of Australasian Computing Education Conference 2005, 42, pp83-90Sheard, J., Dick, M., Markhum, S., Macdonald, I., Walsh, M., Cheating and Plagiarism: Perceptions and Practices of First Year IT Students (2002) Proceedings of 7th Annual Joint Conference on Innovation and Technology in Computer Science Education, pp. 183-187; 
Joy, M., And Luck, M., Plagiarising in Programming Assignments (1999) IEEE Transactions on Education, 40 (2), pp. 129-133;
Lukashenko, R., Graudina, V., Grundspenkis, J., Computer-Based Plagiarism Detection Methods and Tools: An Overview (2007) Proceedings of the International Conference on Computer Systems and Technologies;
Aiken, A., (2005) Moss: A system for detecting software plagiarism, , http://www.cs.berkeley.edu/{\~{}}aiken/moss.html, University of California, Berkeley;
Prechett, L., Malpohl, G., Philipssen, M., (2000) Jplag: Finding Plagiarisms among a set of Programs, , University Karlsruhe;
Freire, M., Cebrian, M., de Rosal, E., (2007) AC: An Integrated Code Plagiarism Detection Environment, , arXiv:cs.IT/0703136;
Ciesielski, V., Wu, N., Tahaghoghi, S., Evolving Similarity Functions for Code Plagiarism Detection (2008) Proceedings of GECCO'08, pp. 1453-1460;
Daly, C., Horgan, J., Patterns of Plagiarism (2005) Proceedings of SIGCSE'05, pp. Pp383-Pp387;
Vogts, D., Calitz, A.P., Greyling, J.H., Comparison of the effects of professional and pedagogical program development environments on novice programmers (2008) Proceedings of SAICSIT, pp. 286-295;
Kelleher, C., Pausch, R., Lowering the Barriers to Programming: A Taxonomy of Programming Environments and Languages for Novice Programmers (2005) ACM Computing Surveys, 37 (2), pp. 83-137;
van Tonder, M., Naude, K., Cilliers, C.B., Jenuity: A lightweight development environment for intermediate level programming courses (2008) Proceedings of 13th Annual Conference on Innovation and Technology in Computer Science Education
A4 - University of the Witwatersrand; National Research Foundation; Microsoft; IBM; Telkom},
author = {Vogts, Dieter},
booktitle = {Proceedings of the 2009 Annual Research Conference of the South African Institute of Computer Scientists and Information Technologists},
doi = {10.1145/1632149.1632168},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Vogts - Plagiarising of source code by novice programmers a cry for help.pdf:pdf},
isbn = {9781605586434},
keywords = {Automated support,Complex task,Computer Science Education,Computer programming,Computer science education,Disciplinary actions,Education computing,Engineering education,Engineers,Multiple class,Novice programmer,Plagiarism,Plagiarism detection,Program development,Program development environment,Programming,Source codes,Students},
language = {English},
pages = {141--149},
publisher = {ACM Press},
title = {{Plagiarising of source code by novice programmers a "cry for help"?}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-74049128837{\&}partnerID=40{\&}md5=75062547b1e7940badbdba0d32c32e72 http://portal.acm.org/citation.cfm?doid=1632149.1632168},
year = {2009}
}
@inproceedings{Johnson2004,
abstract = {Plagiarism of digital system designs has become increasingly convenient with the emergence of language-based design techniques. Detection and proof of plagiarism are similarly facilitated. This has long been an issue in computer programming courses and non-technical courses that rely heavily on text based assignments. However, until recently, digital design instruction was based on graphical design methods that did not adapt well to electronic cut-and-paste or web searches. Tools are needed to encourage and verify the originality of digital designs. Such tools exist for many programming languages and for essay text, but not for hardware description language (HDL) based digital design. In this paper, we present an implementation of HDL plagiarism checking that is similar to what is used to evaluate the similarity and ancestry of gene sequences. This form of plagiarism screening has been used for one semester in a digital integrated circuit design course. Other less effective and efficient methods were in use for two years. Results show a strong sensitivity to commonality between closely related source code files, even in the presence of a variety of obfuscation techniques.},
address = {Purdue University, United States},
annote = {Conference code: 63591

Export Date: 23 February 2015

CODEN: ACOPD

Correspondence Address: Johnson, M.C.; Digital and Systems Laboratories, Sch. of Elec. and Comp. Engineering, Purdue University, West Lafayette, IN, United States

References: Schleimer, S., Wilkerson, D.S., Aiken, Winnowing: Local algorithms for document fingerprinting (2003) Proc. SIGMOD 2003, , June San Diego, CA; 
Prechelt, L., Malpohl, G., Phillippsen, M., Jplag: Finding plagiarisms among a set of programs Technical Report, 2000 (1). , Universitat Karlsruhe, Germany;
Bennett, C.H., Li, M., Ma, B., (2003) Chain Letters and Evolutionary Histories, , Scientific American, June;
Culwin, F., MacLeod, A., Lancaster, T., Source code plagiarism in UK HE computing schools, issues, attitudes and tools (2001) Technical Report, SBU-CISM-01-01. , South Bank University, London, Sept;
Nelson, M., Gailly, J.-L., (1995) The Data Compression Book, , M{\&}T Books, New York, NY, ISBN 1-55851-434-1
A4 - American Society for Engineering Education; Microsoft; National Instruments; National Council of Examiner for Engineering and Surveying; Hewlett-Packard Invent},
author = {Johnson, M C and Watson, C and Davidson, S and Eschbach, D},
booktitle = {Annual Conference and Exposition, "Engineering Researchs New Heights"},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2004 - Johnson et al. - Gene sequence inspired design plagiarism screening.pdf:pdf},
isbn = {01901052 (ISSN)},
keywords = {Computer programming,Digital design,Gene sequence,Graph theory,Hardware description language (HDL),Integrated circuits,Non-technical courses,Sensitivity analysis,Students,Systems analysis,World Wide Web},
language = {English},
pages = {6087--6105},
title = {{Gene sequence inspired design plagiarism screening}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-5444256336{\&}partnerID=40{\&}md5=0a462e42b099c2b2e213525ab25e57ff},
year = {2004}
}
@inproceedings{Ahtiainen2006,
abstract = {A source code plagiarism detection engine Plaggie is presented. It is a stand-alone Java application that can be used to check Java programming exercises. Plaggie's functionality is similar with previously published JPlag web service but unlike JPlag, Plaggie must be installed locally and its source code is open. Apparently, Plaggie is the only open-source plagiarism detection engine for Java exercises.},
address = {New York, New York, USA},
annote = {Conference code: 80585

Export Date: 23 February 2015

Correspondence Address: Surakka, S.; Helsinki University of Technology, P.O.Box 5400, FI-02015 HUT, Finland; email: sami.surakka@hut.fi

References: Bowyer, K.W., Hall, L.O., Experience using 'MOSS' to detect cheating on programming assignments (1999) 29th ASEE/IEEE Frontiers of Education Conference, San Juan, Puerto Rico, pp. 18-22; 
Grune, D., The Software and Text Similarity Tester SIM, , http://www.cs.vu.nl/{\~{}}dick/sim.html, Retrieved on October 9, 2006, from the web site;
(2006) Plaggie: Download, , http://www.cs.hut.fi/Software/Plaggie/, Available at the Helsinki University of Technology web site;
Lancaster, T., Culwin, F., A Comparison of Source Code Plagiarism Detection Engines (2004) Computer Science Education, 14 (2), pp. 101-117;
McCauley, R., Manaris, B., (2002) Comprehensive Report on the 2001 Survey of Departments Offering CAC -Accredited Degree Programs, , http://stono.cs.cofc.edu/{\~{}}mccauley/survey/report2001/CompRep2001.pdf, Technical report CoC/CS TR{\#} 2002-9-1 Department of Computer Science, College of Charleston, Retrieved on February 11, 2004, from the College of Charleston web site;
Prechelt, L., Malpohl, M., Phlippsen, M., JPlag: Finding plagiarism among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Plagiarism Prevention Tools for Teachers, , http://sourceforge.net/projects/turnitin, Retrieved on October 14, 2006 , from the SourgeForge.net web site;
Sunlight: Source Code Similarity Measure, , http://sourceforge.net/projects/sunlight, Retrieved on October 14, 2006, from the SourgeForge.net web site;
The BOSS Online Submission System, , http://sourceforge.net/projects/cobalt, Retrieved on October 14, 2006, from the SourgeForge.net web site;
DetectaCopias 1.0, , http://www.dcc.uchile.cl/{\~{}}rmeza/proyectos/detectaCopias/index.html, Retrieved on August 25, 2006 , from the University of Chile web site In Spanish;
The Sherlock Plagiarism Detector, , http://www.cs.usyd.edu.au/{\~{}}scilect/sherlock/, Retrieved on October 14, 2006, from the University of Sydney web site;
History of BOSS, , http://www.dcs.warwick.ac.uk/boss/history.html, Retrieved on October 14, 2006, from the University of Warwick web site;
Wagner, N.R., (2000) Plagiarism by Student Programmers, , http://www.cs.utsa.edu/{\~{}}wagner/pubs/plagiarism0.html, Retrieved on August 25, 2006, from the web site},
author = {Ahtiainen, Aleksi and Surakka, Sami and Rahikainen, Mikko},
booktitle = {Proceedings of the 6th Baltic Sea conference on Computing education research Koli Calling},
doi = {10.1145/1315803.1315831},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2006 - Ahtiainen, Surakka, Rahikainen - Plaggie GNU-licensed source code plagiarism detection engine for Java exercises.pdf:pdf},
issn = {14043203},
keywords = {Computer Assisted Instruction,Computer aided instruction,Computer programming,Engines,Java,Java programming language,Open sources,Plagiarism detection,Source codes,Web services,cheating,computer-assisted instruction,open source,plagiarism,source code plagiarism detection engine},
language = {English},
pages = {141},
publisher = {ACM Press},
title = {{Plaggie: GNU-licensed source code plagiarism detection engine for Java exercises.}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77953494553{\&}partnerID=40{\&}md5=6317b0ff1bb3c7e353c5a4fb05dab43c http://portal.acm.org/citation.cfm?doid=1315803.1315831},
volume = {276},
year = {2006}
}
@article{Chilowicz2013,
abstract = {The detection of similarities in source code has applications not only in software re-engineering (to eliminate redundancies) but also in software plagiarism detection. This later can be a challenging problem since more or less extensive edits may have been performed on the original copy: insertion or removal of useless chunks of code, rewriting of expressions, transposition of code, inlining and outlining of functions, etc. In this paper, we propose a new similarity detection technique not only based on token sequence matching but also on the factorization of the function call graphs. The factorization process merges shared chunks (factors) of codes to cope, in particular, with inlining and outlining. The resulting call graph offers a view of the similarities with their nesting relations. It is useful to infer metrics quantifying similarity at a function level. {\textcopyright} 2012 Elsevier B.V. All rights reserved.},
address = {Universit{\'{e}} Paris-Est, Laboratoire d'Informatique Gaspard-Monge, UMR CNRS 8049, 5 Bd Descartes, 77454 Marne-la-Vall{\'{e}}e cedex 2, France},
annote = {Cited By :1

Export Date: 23 February 2015

CODEN: SCPGD

Correspondence Address: Chilowicz, M.; Universit{\'{e}} Paris-Est, Laboratoire d'Informatique Gaspard-Monge, UMR CNRS 8049, 5 Bd Descartes, 77454 Marne-la-Vall{\'{e}}e cedex 2, France; email: michel.chilowicz@univ-paris-est.fr

References: http://theory.stanford.edu/aiken/moss, MossPrechelt, L.P., Karlsruhe, U., Malpohl, G., Finding plagiarisms among a set of programs with JPlag (2000) Journal of Universal Computer Science, 8, pp. 1016-1038. , http://page.mi.fu-berlin.de/prechelt/Biblio/jplagTR.pdf, URL; 
Wise, M.J., Neweyes: A system for comparing biological sequences using the Running Karp-Rabin Greedy String-Tiling algorithm (1995) Proceedings of the 3rd International Conference on Intelligent Systems for Molecular Biology, pp. 393-401. , http://www.it.usyd.edu.au/research/tr/tr463.pdf, AAAI Press URL;
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the 2003 ACM SIGMOD International Conference on Management of Data 2003, pp. 76-85. , http://theory.stanford.edu/aiken/publications/papers/sigmod03.pdf, ACM Press URL;
Tarjan, R., Depth-first search and linear graph algorithms (1971) Proceedings of the 12th Annual Symposium on Switching and Automata Theory, pp. 114-121. , IEEE Computer Society Washington, USA 10.1109/SWAT.1971.10;
Weiner, P., Linear pattern matching algorithm (1973) 14th Annual IEEE Symposium on Switching and Automata Theory, pp. 1-11. , Washington, DC;
Manber, U., Myers, G., (1990) Suffix Arrays: A New Method for On-line String Searches, , Society for Industrial and Applied Mathematics Philadelphia, PA, USA;
Crochemore, M., Rytter, W., (2002) Jewels of Stringology, , World Scientific Press;
Gusfield, D., (1997) Algorithms on Strings, Trees, and Sequences: Computer Science and Computational Biology, , Cambridge University Press;
Kasai, T., Lee, G., Arimura, H., Arikawa, S., Park, K., Linear-time longest common-prefix computation in suffix arrays and its applications (2001) 12th Annual Symposium on Combinatorial Pattern Matching, pp. 181-192. , Springer-Verlag;
McCreight, E.M., (1976) A Space-economical Suffix Tree Construction Algorithm, 23 (2), pp. 262-272;
Ukkonen, E., (1992) Constructing Suffix Trees On-line in Linear Time, pp. 484-492. , http://cs.helsinki.fi/u/ukkonen/SuffixT1.ps, J. van Leeuwen (Ed.), 12th, Madrid, Spain;
Kurtz, S., Reducing the space requirement of suffix trees (1998) Software - Practice and Experience, 29, pp. 1149-1171;
Abouelhoda, M.I., Kurtz, S., Ohlebusch, E., Replacing suffix trees with enhanced suffix arrays Journal of Discrete Algorithms, , http://www.fli-leibniz.de/www{\_}bioc/journal{\_}club/AboKurOhl2004.pdf;
Berkman, O., Vishkin, U., Recursive star-tree parallel data structure (1993) SIAM Journal on Computing, 22 (2), pp. 221-242. , 10.1137/0222017;
Cormen, T.H., Leiserson, C.E., Rivest, R.L., Stein, C., (2001) Introduction to Algorithms, , Second edition MIT Press and McGraw-Hill;
Ottenstein, K.J., An algorithmic approach to the detection and prevention of plagiarism (1976) SIGCSE Bulletin, 8 (4), pp. 30-41. , 10.1145/382222.382462;
Baker, B.S., A theory of parameterized pattern matching: Algorithms and applications (1993) Proceedings of the 25th Annual ACM Symposium on Theory of Computing, pp. 71-80. , ACM New York, USA 10.1145/167088.167115;
Kamiya, T., Kusumoto, S., Inoue, K., CCfinder: A multilinguistic token-based code clone detection system for large scale source code (2002) IEEE Transactions on Software Engineering, 28 (7), pp. 654-670. , 10.1109/TSE.2002.1019480;
Tairas, R., Gray, J., Phoenix-based clone detection using suffix trees (2006) Proceedings of the 44th Annual Southeast Regional Conference, pp. 679-684. , http://www.cis.uab.edu/gray/Pubs/acmse-2006-robert.pdf, ACM New York, USA URL;
Chilowicz, M., Duris, {\'{E}}., Roussel, G., Syntax tree fingerprinting for source code similarity detection (2009) 17th IEEE International Conference on Program Comprehension, pp. 243-247. , IEEE Computer Society Vancouver, BC, Canada 10.1109/ICPC.2009.5090050;
Wise, M., String similarity via Greedy String Tiling and Running Karp-Rabin matching (1993) Tech. Rep., Dept. of CS, University of Sydney, , http://www.pam1.bcs.uwa.edu.au/michaelw/ftp/doc/RKR{\_}GST.ps;
Chilowicz, M., (2010) Recherche de Similarit{\'{e}} dans du Code Source, , http://igm.univ-mlv.fr/chilowi/research/phd/, Ph.D. Thesis;
Chilowicz, M., Duris, E., Roussel, G., Finding similarities in source code through factorization (2008) 8th Workshop on Language Descriptions, Tools and Applications, 238, pp. 47-62. , http://dx.doi.org/10.1016/j.entcs.2009.09.040, A. Johnstone, J. Vinju, Electronic Notes in Theoretical Computer Science Elsevier Budapest, Hungary (15 pp);
Zhang, K., Shasha, D., Simple fast algorithms for the editing distance between trees and related problems (1989) SIAM Journal of Computing, 18 (6), pp. 1245-1262. , 10.1137/0218082;
Krinke, J., Identifying similar code with program dependence graphs (2001) Proceedings of the 8th Working Conference on Reverse Engineering, , http://www.bauhaus-stuttgart.de/clones/ast01.pdf;
Cook, S.A., The complexity of theorem-proving procedures (1971) Proceedings of the Third Annual ACM Symposium on Theory of Computing, pp. 151-158. , ACM New York, USA 10.1145/800157.805047;
Bellon, S., Koschke, R., Antoniol, G., Krinke, J., Merlo, E., Comparison and evaluation of clone detection tools (2007) IEEE Transactions on Software Engineering, 33 (9), pp. 577-591;
Roy, C.K., Cordy, J.R., Scenario-based comparison of clone detection techniques (2008) Proceedings of the 16th International Conference on Program Comprehension, pp. 153-162. , IEEE;
Baxter, I.D., Yahin, A., Moura, L., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) Proceedings of the International Conference on Software Maintenance, p. 368. , IEEE Computer Society Washington, USA 10.1109/ICSM.1998.738528;
Godfrey, M., Zou, L., Using origin analysis to detect merging and splitting of source code entities (2005) IEEE Transactions on Software Engineering, pp. 166-181;
Chilowicz, M., Syntax tree fingerprinting: A foundation for source code similarity detection (2009) Tech. Rep., LIGM, Universit{\'{e}} Paris-Est, , http://igm.univ-mlv.fr/LIGM/internal{\_}report/pdf/2009{\_}03.pdf},
author = {Chilowicz, Michel and Duris, {\'{E}}tienne and Roussel, Gilles},
doi = {10.1016/j.scico.2012.11.008},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Chilowicz, Duris, Roussel - Viewing functions as token sequences to highlight similarities in source code.pdf:pdf},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Application programs,Call graph,Call graphs,Clones,Cloning,Computer programming languages,Duplication,Factorization,Inlining,Outlining,Similarity,Source code,Source codes,Suffix indexation,XML},
language = {English},
month = {oct},
number = {10},
pages = {1871--1891},
title = {{Viewing functions as token sequences to highlight similarities in source code}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84880270564{\&}partnerID=40{\&}md5=558d2549d4b04e9f4e0b5293739a6247 http://linkinghub.elsevier.com/retrieve/pii/S0167642312002195},
volume = {78},
year = {2013}
}
@inproceedings{Xiong2009,
abstract = {Plagiarism in programming assignments is a widespread problem in educational community, which has motivated the need of a more efficient, robust and faster detection approach than the manual checking. The BUAA-AntiPlagiarism system, introduced in this paper, detects source-code plagiarism through the analysis of program's syntax structure. The output of the system is a group of clusters of all suspicious plagiarized programs after calculating the pair wise similarities. This system consists of four parts: abstract syntax tree generation, fingerprints representation, similarity measurement and clustering method. By testing a set of submissions, the comparative evaluation shows that BUAA-AntiPlagiarism system has better performance than Jplag, a famous plagiarism detection system. {\textcopyright}2009 IEEE.},
address = {Beijing, China},
annote = {Conference code: 79559

Export Date: 23 February 2015

Correspondence Address: Xiong, H.; School of Computer Science and Engineering, Beihang University, Beijing, China; email: xionhao2005@cse.buaa.edu.cn

References: Bowyer, K., Hall, L., Experience Using 'MOSS' to Detect Cheating On Programming Assignments (1999) Proceeding of the Frontiers in Education Conference, 3, pp. 18-22; 
McCabe, D., (2005) Levels of Cheating and Plagiarism Remain High, , http://academicintegrity.org, Center for Academic Integrity, Duke University, Website;
Schleimer, S., Wilkerson, D.S., Markham, S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the ACM SIGMOD international conference on Management of data;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with Jplag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Paul Clough, Plagiarism in natural and programming languages: an overview of current tools and technologies. Department of Computer Science in Sheffield University, 2002Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting program similarity and plagiarism within a university programming environment (1987) Comput. Educ, 11, pp. 11-19;
Jones, E.L., Metrics based plagiarism monitoring (2001) Proceeding of the 6th Annual CSSC Northeastern Conference, pp. 229-236;
Whale, G., Detection of plagiarism in student programs (1986) Proceedings of the Ninth Australian Computer Science Conference, pp. 231-241. , Canberra, pp;
Christian Arwin, S.M.M.T., Plagiarism Detection across Programming Language (2006) Proceedings of the Twenty-Ninth Australian Computer Science Conference (ACSC, , Australia, January;
Ji, J.-H., Woo, G., Cho, H.-G., A Source Code Linearization Technique for Detecting Plagiarized Programs (2007) Proceedings of ITiCSE'07, , United Kingdom, June 23-27;
Halstead, M., (1977) Elements of Software Science, , Elsevier, New York;
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Comparing structure and attribute-counting systems (1996) Proceedings of the 1st Australian Conference on Computer Science Education, pp. 3-5;
Moussiades, L., Vakali, A., PDetect: A Clustering Approach for Detecting Plagiarism in Source Code Datasets (2005) The Computer Journal, 48 (6), pp. 651-661;
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared Information and Program Plagiarism Detection (2004) Proceedings of IEEE Transcations on Information Theory, 50 (7). , July;
Jadalla, A., Elnagar, A., PDE4Java: Plagiarism Detection Engine for Java source code: a clustering approach (2008) International Journal of Business Intellignence and Data Mining, 3 (2), pp. 121-135;
Chakrabarti, S., (2003) Mining the Web, , Morgan Kaufmann Publishers, Oxford;
Lee, L., Measure of distributional similarity (1999) Proc. 37th Annual Meeting of the Association for Computational Linguistics, pp. 25-32. , College Park, Md, June 22-27, pp, ACL, East Stroudsburg, PA;
Witten, I.H., Moffat, A., Bell, T.C., Managing Gigabytes: Compressing and Indexing Documents and Images, , Morgan Kaufmann Publishers, second edition
A4 - IEEE Wuhan Section; Wuhan University; James Madison University; University of Wisconsin at La Crosse; Microsoft Research Asia},
author = {Xiong, Hao and Yan, Haihua and Li, Zhoujun and Li, Hu},
booktitle = {International Conference on Computational Intelligence and Software Engineering},
doi = {10.1109/CISE.2009.5366790},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Xiong et al. - BUAA{\_}AntiPlagiarism A System To Detect Plagiarism for C Source Code.pdf:pdf},
isbn = {978-1-4244-4507-3},
keywords = {Abstract Syntax Trees,Abstract syntax tree,Abstracting,Artificial intelligence,Cluster,Clustering methods,Comparative evaluations,Computer software,Detection approach,Educational community,Fingerprints,Manual checking,Plagiarism,Plagiarism detection,Program similarity,Programming assignments,Similarity measurements,Source codes,Syntactics,Syntax structure},
language = {English},
month = {dec},
pages = {1--5},
publisher = {IEEE},
title = {{BUAA{\_}AntiPlagiarism: A System To Detect Plagiarism for C Source Code}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77949695501{\&}partnerID=40{\&}md5=c964a4919985272ef013233a54ee414c http://ieeexplore.ieee.org/document/5366790/},
year = {2009}
}
@inproceedings{Khaustov2012,
abstract = {The NCP algorithm is developed to detect the cases of plagiarism of source codes. Algorithm uses tokenize representation of the source code, trie-tree to store sequences of tokens and Levenshtein distance computation to assess the similarity of two sequences. Some optimizations are proposed to improve the performance of this algorithm. {\textcopyright} 2012 IEEE.},
address = {Tomsk, Russian Federation},
annote = {Conference code: 94712

Export Date: 23 February 2015

Correspondence Address: Khaustov, P.A.; Department of Computer Engineering, National Research Tomsk Polytechnic University, Tomsk, Russian Federation; email: exceibot@sibmail.com

References: Cormen, T.H., Leiserson, C.E., Rivest, R.L., Stein, C., (2001) Introduction to Algorithms, Second Edition, pp. 273-301. , MIT Press and McGraw-Hill; 
Khaustov, P.A., Katsman, J.J., (2012) System "NoCrib" for Stolen Source Code Usage Detecting (In Russian), , http://sjs.tpu.ru/journal/article/view/72/119, [Internet resource]/ P.A.Khaustov - Link: 17.02;
Levenshtein, V.I., Binary codes capable of correcting deletions, insertions, and reversals (2009) Soviet Physics Papers, , V.I.Levenshtein - Prospect publishing
A4 - IFOST HQ; Russian Foundation for Basic Research},
author = {Khaustov, Pavel A},
booktitle = {7th International Forum on Strategic Technology},
doi = {10.1109/IFOST.2012.6357644},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Khaustov - The NCP algorithm of fuzzy source code comparison.pdf:pdf},
isbn = {978-1-4673-1773-3},
keywords = {Algorithms,Coding,Computation,Computer programming languages,Forestry,Intellectual property,Levenshtein distanc,NCP-algorithm,NoCrib,Plagiarism,Problem Solving,Programing Languages,Source codes,Tokens,Trie-tree},
language = {English},
month = {sep},
pages = {1--3},
publisher = {IEEE},
title = {{The NCP algorithm of fuzzy source code comparison}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84871827191{\&}partnerID=40{\&}md5=ba36a99c53be65a922b0b7201869acb2 http://ieeexplore.ieee.org/document/6357644/},
year = {2012}
}
@inproceedings{Lancaster2005,
abstract = {Much research in the plagiarism detection literature relates to attempting to discover which students have copied student source code submissions from one another - a process commonly known as collusion. The majority of the collusion literature suggests that structure metrics (metrics that look beyond semantics to attempt to find disguise) are the most appropriate comparators for finding such collusion. This paper contrasts two paired structure metrics with a paired superficial metric, the metrics having been identified from the plagiarism detection literature. The metrics are compared on a corpus of Visual Basic source code, a programming language that has not been considered previously in the detection literature. The results find that the superficial metric considered, Lancaster word pairs, which calculates the proportion of consecutive words in common between two documents more accurately differentiates between collusion and coincidence and can be argued to be the most effective of the metrics. This suggests that the premise that structure metrics are the most appropriate methods for automated detection might need to be reconsidered. {\textcopyright} 2005 Thomas Lancaster and Mark Tetlow.},
address = {Birmingham, United Kingdom},
annote = {Conference code: 94313

Export Date: 23 February 2015

Correspondence Address: Lancaster, T.; Department of Computing, University of Central England, Birmingham, B42 2SU, United Kingdom

References: Boywer, K.W., Hall, L.O., (1999) Experience Using "MOSS" to Detect Cheating On Programming Assignment, pp. 18-22. , Paper presented at the 29th ASEE/IEEE Frontiers in Education Conference, San Juan, Puerto Rico; 
Culwin, F., Campbell, (2000) Using Compression to Identify Plagiarised Programs, p. 2003. , Paper presented at the 4th Annual Conference of the LTSN Centre for Information and Computer Sciences, Galway, August;
Culwin, F., Lancaster, T., (2001) Visualising Intra-corpal Plagiarism. Paper Presented At the International Conference On Information Visualisation, , London, UK;
Culwin, F., Macleod, A., Lancaster, T., (2001) Source Code Plagiarism In UK HE Computing Schools, Issues, Attitudes {\&} Tools, , South Bank University Technical Report, SBU-CISM-01-02;
Halstead, M.H., (1977) Elements of Software Science, , (n.p.): Elseveir;
Hamblen, J.O., Parker, A., Computer algorithms for plagiarism detection (1989) IEEE Transactions On Education, 32 (2), pp. 94-99;
Irving, R., Macdonald, G., McGookin, D., Prentice, J., (2002) Big Brother (Glasgow University Computer Science Department's Collusion Detector System, Version 2.0) User Manual, , Available from Glasgow University;
Jones, E.L., (2001) Metrics Based Plagiarism Monitoring. Paper Presented At the 6th Annual CSSC Northeastern Conference, , Middlebury, VT;
Joy, M., Luck, M., Plagiarism in programming assignments (1999) IEEE Transactions On Education, 42 (2), pp. 129-133;
Lancaster, T., Culwin, F., (2004) A Visual Argument For Plagiarism Detection Using Word Pairs, , Paper presented at Plagiarism: Prevention, Practice and Policy Conference 2004, Organised by JISC Plagiarism Advisory Service, Newcastle, UK;
Lancaster, T., Culwin, F., Preserving academic integrity - Fighting against non-originality agencies (2005) To Appear In British Journal of Educational Technology In;
Lancaster, T., Culwin, F., A comparison of source code plagiarism detection engines (2004) Journal of Computer Science Education, 4 (2), pp. 101-118;
Lancaster, T., Culwin, F., Classifications of plagiarism detection engines (2005) Italics, 4 (2). , http://www.ics.ltsn.ac.uk/pub/italics, Retrieved June 24, 2005;
Prechelt, L., Guido, M., Phlippsen, M., JPlag: Finding plagiarisms among a set of programs with Jplag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Saxon, S., (2000) Comparison of Plagiarism Detection Techniques Applied to Student Code: Computer Science Project (Pt. II), , Cambridge: Trinity College;
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Comparing structure and attribute-counting systems (1996) Proceedings of First Australian Conference On Computer Science Education, , Sydney, Australia;
Verco, K.L., Wise, M.J., Plagiarism a la mode: A comparison of automated systems for detecting suspected plagiarism (1996) The Computer Journal, 39 (9), pp. 741-750
A4 - NetSpot Pty Ltd},
author = {Lancaster, T and Tetlow, M},
booktitle = {22nd Annual conference of the Australian Society for Computers in Tertiary Education},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2005 - Lancaster, Tetlow - Does automated anti-plagiarism have to be complex Evaluating more appropriate software metrics for finding co.pdf:pdf},
keywords = {Automated detection,Intellectual property,Plagiarism detection,Semantics,Software metrics,Source codes,Student cheating,Students},
language = {English},
pages = {361--370},
title = {{Does automated anti-plagiarism have to be complex? Evaluating more appropriate software metrics for finding collusion}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84870778983{\&}partnerID=40{\&}md5=8689f2bf0720661e666698192de9e6ac},
year = {2005}
}
@article{Ohno2011a,
abstract = {Source code plagiarism is becoming one of the most serious problems in academia. There have been many proposed methods that attempt to detect source code plagiarism in programming classes. Most of them extract algorithmic features from the source code and measure the similarity between them. These methods show high levels of accuracy in evaluation experiments, and however, it is concerning that the similarity detected by the methods might not be caused by plagiarism. As a result, we propose a method called the CM Algorithm, which utilizes a student's coding style, the way the student writes source code, to check whether the source code submitted by the student was produced by him/her. In this paper, we propose a combined method that measures the similarity between source codes by using SIM [7], one of the well-known in-class source code plagiarism detection systems, and then checks the outputs of SIM against our improved CM Algorithm. The new method is expected to reduce false positives in plagiarism detection systems. This paper also gives a detailed explanation of the improved CM Algorithm, which assumes fluctuations in the source code produced by a student's coding style. {\textcopyright} 2011 ICIC International.},
address = {Department of Life Design, Shijonawate Gakuen Junior College, 4-10-25, Hojo, Daito, Osaka 574-0011, Japan},
annote = {Cited By :1

Export Date: 23 February 2015

Correspondence Address: Ohno, A.; Department of Life Design, Shijonawate Gakuen Junior College, 4-10-25, Hojo, Daito, Osaka 574-0011, Japan; email: asako.ohno@mulabo.org

References: Clough, P., Old and new challenges in automatic plagiarism detection (2003) National Plagiarism Advisory Service, pp. 391-407. , http://ir.shef.ac.uk/cloughie/index.html; 
Cosma, G., Joy, M., Source-code plagiarism: A UK academic perspective (2006) Proc. of the 7th Annual Conference of the HEA Network For Information and Computer Sciences, pp. 116-120;
Lukashenko, R., Graudina, V., Grundspenkis, J., Computer-based plagiarism detection methods and tools: An overview (2007) Proc. of the 2007 International Conference On Computer Systems and Technologies;
Chen, X., Li, M., McKinnon, B., Seker, A., A theory of uncheatable program plagiarism detection and its practical implementation (2002) IEEE Trans. Information Theory;
Belkhouche, B., Nix, A., Hassell, J., Plagiarism detection in software designs (2004) Proc. of the 42nd Annual Southeast Regional Conference, pp. 207-211;
Liu, C., Chen, C., Han, J., Yu, P.S., GPLAG: Detection of software plagiarism by program dependence graph analysis (2006) Proc. of the 12th ACM SIGKDD International Conference On Knowledge Discovery and Data Mining, pp. 872-881;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. of the 30th SIGCSE Technical Symposium On Computer Science Education, pp. 266-270;
Prechelt, L., Malpohl, G., Finding plagiarisms among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038;
Ahtiainen, A., Surakka, S., Rahikainen, M., Plaggie: GNU-licensed source code plagiarism detection engine for Java exercises (2006) Proc. of the 6th Baltic Sea Conference On Computing Education Research, pp. 141-142;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proc. of the 29th Australasian Computer Science Conference, pp. 277-286;
Ohno, A., Murao, H., Measuring source code similarity using reference vectors (2007) International Journal of Innovative Computing, Information and Control, 3 (3), pp. 525-537;
Merlo, E., Detection of plagiarism in university projects using metrics-based spectral similarity (2007) Duplication, Redundancy, and Similarity In Software, , R. Koschke et al. (eds.);
Engels, S., Lakshmanan, V., Craig, M., Plagiarism detection using feature-based neural networks (2007) Proc. of the 38th SIGSCE Technical Symposium On Computer Education, pp. 34-38;
D'Souza, D., Hamilton, M., Harris, M.C., Software development marketplaces -Implications for plagiarism (2007) Proc. of the 9th Australasian Conference On Computing Education, 66, pp. 27-33;
Ji, J.H., Park, S.H., Generating pylogenetic tree of homogeneous source code in a plagiarism detection system (2008) International Journal of Control, Automation and Systems, 6 (6), pp. 809-817;
Ohno, A., Murao, H., A new similarity measure for in-class source code plagiarism detection (2009) International Journal of Innovative Computing, Information and Control, 5 (11 SUPPL. B), pp. 4237-4247;
Mozgovoy, M., Karakovskiy, S., Klyuev, V., Fast and reliable plagiarism detection system (2007) Proc. of the 37th Frontiers In Education Conference, pp. 11-14;
Dugad, R., Desai, U.B., (1996) A Tutorial On Hidden Markov Models, pp. 1-16. , http://vision.ai.uiuc.edu/dugad/;
Krogh, A., An introduction to hidden Markov models for biological sequences (1998) Computational Methods In Molecular Biology, , S. L. Salzberg et al. (eds.);
Zhang, Q., Zhou, C., Zhao, J., Face recognition based on FLDA, CPCA and improved HMM (2010) International Journal of Innovative Computing, Information and Control, 6 (2), pp. 801-807;
Pao, T.L., Liao, W.Y., Chen, Y.T., Wu, T.N., Mandarin audio-visual speech recognition with effects to the noise and emotion (2010) International Journal of Innovative Computing, Information and Control, 6 (2), pp. 711-724;
Nelwamondo, F.V., Marwala, T., Mahola, U., Early classifications of bearing faults using hidden Markov models, gaussian mixture models, mel-frequency cepstral coefficients and fractals (2006) International Journal of Control, Automation and Systems, 2 (6), pp. 1281-1299},
author = {Ohno, A and Murao, H},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2011 - Ohno, Murao - A two-step in-class source code plagiarism detection method utilizing improved CM algorithm and SIM.pdf:pdf},
issn = {13494198 (ISSN)},
journal = {International Journal of Innovative Computing, Information and Control},
keywords = {Algorithms,Coding model,Coding style,Combined method,Evaluation experiments,False positive,Hidden Markov models,Hidden markov model,In-class source code plagiarism,Plagiarism detection,Programming class,Source code plagiarisms,Source codes,Students},
language = {English},
number = {8},
pages = {4729--4739},
title = {{A two-step in-class source code plagiarism detection method utilizing improved CM algorithm and SIM}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-80052497491{\&}partnerID=40{\&}md5=c9c96d21673a359c81942c0121d22e0b},
volume = {7},
year = {2011}
}
@inproceedings{Lesner2010,
abstract = {Our work focuses on detecting plagiarism within a source code corpus. The case study is to help a human corrector to find out plagiarism within source code written by Computer Science students. Like other approaches, we use the notion of similarity distance. However, in this work we introduce segmentation to split documents into smaller parts and propose a document-wise distance based on the cost of permuting segments to transform one document to another. Our framework is laid out as a pipeline, where each stage can be parameterized to build up a plagirism detector fitting user needs. The approach makes no assumption about the programming language being analyzed. Furthermore, it provides a synthetical report of the results to ease the decision making process, as we consider that only a human user has final word on wether it is plagiarism or not. We tested our framework on hundreds of real source files, involving many programming languages, allowing us to discover previously undetected frauds. {\textcopyright} 2010 ACM.},
address = {New York, New York, USA},
annote = {Conference code: 81090

Cited By :1

Export Date: 23 February 2015

Correspondence Address: Lesner, B.; GREYC (CNRS UMR 6072), 6, Avenue Mar{\'{e}}chal Juin, F14032 Caen Cedex, France; email: blesner@info.unicaen.fr

References: Cilibrasi, R., Vitanyi, P., Clustering by compression (2005) IEEE Transactions on Information Theory, 51 (4), pp. 1523-1545; 
Kuhn, H., The hungarian method for the assignment problem (1955) Naval Res. Logist. Quart., 2, pp. 83-97;
Levenshtein, Binary codes capable of correcting deletions, insertions, and reversals (1966) Soviet Physics Doklady, 10, pp. 707-710
A4 - ACM Special Interest Group on Applied Computing (SIGAPP); Hes.so; icare; CUSST},
author = {Lesner, Boris and Brixtel, Romain and Bazin, Cyril and Bagan, Guillaume},
booktitle = {Proceedings of the 2010 ACM Symposium on Applied Computing},
doi = {10.1145/1774088.1774101},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Lesner et al. - A novel framework to detect source code plagiarism.pdf:pdf},
isbn = {9781605586397},
keywords = {Computer science students,Decision making,Decision making process,Detecting plagiarism,Distance-based,Human users,Linguistics,Parameterized,Programming language,Query languages,Similarity distance,Similarity measure,Source codes,Source files,User need,Wavelet transforms,Work Focus,segmentation,similarity measure,source code plagiarism},
language = {English},
pages = {57},
publisher = {ACM Press},
title = {{A novel framework to detect source code plagiarism}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77954715992{\&}partnerID=40{\&}md5=59e2b6903462e080a9652d3ccdc0b8ea http://portal.acm.org/citation.cfm?doid=1774088.1774101},
year = {2010}
}
@article{Ji2008b,
abstract = {Program plagiarism is widespread due to intelligent software and the global Internet environment. Consequently the detection of plagiarized source code and software is becoming important especially in academic field. Though numerous studies have been reported for detecting plagiarized pairs of codes, we cannot find any profound work on understanding the underlying mechanisms of plagiarism. In this paper, we study the evolutionary process of source codes regarding that the plagiarism procedure can be considered as evolutionary steps of source codes. The final goal of our paper is to reconstruct a tree depicting the evolution process in the source code. To this end, we extend the well-known bioinformatics approach, a local alignment approach, to detect a region of similar code with an adaptive scoring matrix. The asymmetric code similarity based on the local alignment can be considered as one of the main contribution of this paper. The phylogenetic tree or evolution tree of source codes can be reconstructed using this asymmetric measure. To show the effectiveness and efficiency of the phylogeny construction algorithm, we conducted experiments with more than 100 real source codes which were obtained from East-Asia ICPC (International Collegiate Programming Contest). Our experiments showed that the proposed algorithm is quite successful in reconstructing the evolutionary direction, which enables us to identify plagiarized codes more accurately and reliably. Also, the phylogeny construction algorithm is successfully implemented on top of the plagiarism detection system of an automatic program evaluation system.},
address = {Graduate School of Computer Engineering, Pusan National University, Jangjeon-gu, Geumjeong-dong, Pusan 609-735, South Korea},
annote = {Cited By :3

Export Date: 23 February 2015

Correspondence Address: Woo, G.; Graduate School of Computer Engineering, Pusan National University, Jangjeon-gu, Geumjeong-dong, Pusan 609-735, South Korea; email: woogyun@pusan.ac.kr

References: Forbes, N., (2004) Imitation of Life: How Biology is Inspiring Computing, , MIT Press; 
Goldberg, L.A., Goldberg, P.W., Phillips, C.A., Sorkin, G.B., Constructing computer virus phylogenies (1998) J. of Algorithms, 26 (1), pp. 188-208. , January;
Ji, J.-H., Woo, G., Cho, H.-G., A source code linearization technique for detecting plagiarized programs (2007) ACMSIGCSE Bulletin, 39 (3), pp. 73-77. , June;
Ji, J.-H., Woo, G., Park, S.-H., Cho, H.-G., An intelligent system for detecting source code plagiarism using a probabilistic graph model (2007), pp. 55-69. , MLDM Posters, JulyJi, J.-H., Park, S.-H., Woo, G., Cho, H.-G., Evolution analysis of homogenous source code and its application to plagiarism detection (2007) Proc. of the FBIT2007, pp. 813-818. , October;
Ji, J.-H., Woo, G., Park, S.-H., Cho, H.-G., Understanding evolution process of program source for investigating software authorship and plagiarism (2007) Proc. of the 2nd International Conference on Digital Information Management, pp. 98-103. , October;
Karim, M.E., Walenstein, A., Lakhotia, A., Parida, L., Malware phylogeny generation using permutations of code (2005) J. in Computer Virology, 1 (1), pp. 13-23;
Kemerer, C.F., Slaughter, S., An empirical approach to studying software evolution (1999) IEEE Trans. on Software Engineering, 25 (4), pp. 493-509;
Meyer zu Eissen, S., Stein, B., Intrinsic plagiarism detection (2006) Proc. of ECIR 2006, Lecture Notes in Computer Science, 3936, pp. 565-569;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) J. of Universal Computer Science, 8 (11), pp. 1016-1038;
Johnson, J.H., Identifying redundancy in source code using fingerprints (1993) Proc. of the Conference of the Centre for Advanced Studies on Collaborative Research, pp. 171-183. , IBM Press;
Brin, S., Davis, J., Garc{\'{i}}a-Molina, H., Copy detection mechanisms for digital documents (1995) Proc. of the ACM SIGMOD Annual Conference, pp. 398-409;
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Comparing structure and attribute-counting systems (1996) Proc. of the 1st Australian Conference on Computer Science Education, pp. 130-134. , Sydney, Australia, pp, July;
Stephens, S.D., Using metrics to detect plagiarism (student paper) (2001) Proc. of the 7th Annual Consortium for Computing in Small Colleges, pp. 191-196. , Consortium for Computing Sciences in Colleges, USA;
Baxter, I.D., Yahin, A., Moura, L.M.D., Sant'Anna, M., Bier, L., Clone detection using (1998) Proc. of the International Conference on Software Maintenance, pp. 368-377. , abstract syntax trees;
Son, J.-W., Park, S.-B., Park, S.-Y., Program plagiarism detection using parse tree kernels (2006) Proc. of the 9th Pacific Rim International Conference on Artificial Intelligence, Lecture Notes in Computer Science, 4099, pp. 1000-1004. , Springer, Aug;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) Proc. of SIGCSE, pp. 130-134. , 96, pp;
Aiken, A., Moss (Measure of Software Mimilarity) Plagiarism Detection System, , http://theory.stanford.edu/{\~{}}aiken/moss, Available:, 1998;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. Of the Thirtieth SIGCSE Technical Symposium on Computer Science Education, pp. 266-270. , ACM Press;
Altschul, S.F., Gish, W., Miller, W., Myers, E.W., Lipman, D.J., Basic local alignment search tool (1990) J. Molecular Biology, 215, pp. 403-410},
author = {Ji, J.-H. and Park, S.-H. and Woo, G and Cho, H.-G.},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2008 - Ji et al. - Generating pylogenetic tree of homogeneous source code in a plagiarism detection system.pdf:pdf},
issn = {15986446 (ISSN)},
journal = {International Journal of Control, Automation and Systems},
keywords = {Algorithms,Alignment,Asymmetric local alignment,Bioinformatics,Biology,Codes (symbols),Coding,Computer Programs,Evolution process,Evolutionary algorithms,Internet,Mathematics,Matrices,Paper,Phylogeny of source codes,Plagiarism detection,Signal detection,Source code similarity,Trees,Trees (mathematics)},
language = {English},
number = {6},
pages = {809--817},
title = {{Generating pylogenetic tree of homogeneous source code in a plagiarism detection system}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-57549101017{\&}partnerID=40{\&}md5=f081d2756489f2ebf56fab534ad157e9},
volume = {6},
year = {2008}
}
@inproceedings{Narayanan2012,
abstract = {In today's world, technological trends facilitate faster and easier communication between people any where in the world. Data search and exchange is one mouse click away from every people and this causes an exponential increase in the magnitude of plagiarism. Researches show that this is a serious problem in many academic institutions and research institutes. In this paper, we have developed an algorithm based on fingerprinting approach to identify the reuse of source codes in direct and indirect way. The results show that the proposed method is efficient in computation and resources and, provides effective measures to detect plagiarized programs. Effectiveness of the features used in the proposed methods is tested using a large database, including programs of different programming languages. {\textcopyright} 2012 IEEE.},
address = {Cochin, India},
annote = {Conference code: 93337

Export Date: 23 February 2015

Correspondence Address: Narayanan, S.; Department of CSE, FISAT, Cochin, India; email: nairsands@gmail.com

References: Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient and effective plagiarism detection for large code repositories (2004) Proceedings of the Second Australian Undergraduate Students' Computing Conference (AUSCC04)', pp. 8-15. , G. Abraham and B.I.P. Rubinstein Editors, June; 
Maletic, J.I., Marcus, A., Using latent semantic analysis to identify similarities in source code to support program understanding Proceedings of the 12th International Conference on 2000;
Marcus, Maletic, J.I., Identification of high-level concept clones in source code (2001) Proceedings of the 16th International Conference on Automated Software Engineering (ASE 2001), pp. 107-114. , May;
Karp, R.M., Rabin, M.O., Pattern-matching algorithms IBM Journal of Research and Development;
Mishne, G., De Rijke, M., Source Code Retrievalusing Conceptual Similarity;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism Detection across Programming Languages Twenty-Ninth Australasian Computer ScienceConference (ACSC2006), Hobart, Tasmania, Australia, January 2006;
Kolkur, S., Naik, M.M., A Tool to Detect Program Plagiarism using Expression List method (2011) International Transactions on Applied Sciences and Technology (ITAST), 1 (1). , Samant May;
Halstead, M., Natural laws controlling algorithm structure (1972) ACM SIGPLAN Notices, 7 (2), pp. 19-26;
Halstead, M., Elements of Software Science (1977) Operating and Programming Systems Series, , Elsevier Science, New York, USA;
Prechelt, L., Malpohl, G., Philippsen, M., Plag, J., (2000) Finding Plagiarisms among A Set of Programs, , Technical report 2000-1, Fakultat fur Informatik, University Karlsruhe, Germany
A4 - University of Melbourne},
author = {Narayanan, Sandhya and Simi, S},
booktitle = {7th International Conference on Computer Science {\&} Education},
doi = {10.1109/ICCSE.2012.6295247},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Narayanan, Simi - Source code plagiarism detection and performance analysis using fingerprint based distance measure method.pdf:pdf},
isbn = {978-1-4673-0242-5},
keywords = {Academic institutions,Computer science,Data searches,Distance measure,Education computing,Effective measures,Engineering education,Exponential increase,Finger printing,Intellectual property,Large database,Mouse clicks,Performance analysis,Research institutes,Source code plagiarisms,Source codes,Technological trends,finger printing,plagiarism},
language = {English},
month = {jul},
pages = {1065--1068},
publisher = {IEEE},
title = {{Source code plagiarism detection and performance analysis using fingerprint based distance measure method}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84868133039{\&}partnerID=40{\&}md5=7a04ee7e073bad6bfa9f48708a72c975 http://ieeexplore.ieee.org/document/6295247/},
year = {2012}
}
@article{Cosma2008,
abstract = {A survey using a scenario-based questionnaire format has provided insight into the perceptions of U.K academics who teach programming on computing courses. This survey across various higher education (HE) institutions investigates what academics feel constitutes source-code plagiarism in an undergraduate context. Academics' responses on issues surrounding source-code reuse and acknowledgement are discussed. A general consensus exists among academics that a "zero tolerance"plagiarism policy is appropriate; however, some issues concerning source-code reuse and acknowledgement raised controversial responses. This paper discusses the most important findings from the survey and proposes a definition of what can constitute source-code plagiarism from the perspective of U.K. academics who teach programming on computing courses. {\textcopyright} 2008 IEEE.},
address = {Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom},
annote = {Cited By :14

Export Date: 23 February 2015

CODEN: IEEDA

Correspondence Address: Cosma, G.; Department of Computer Science, University of Warwick, Coventry CV4 7AL, United Kingdom; email: g.cosma@warwick.ac.uk

References: Jenkins, T., Helmore, S., Coursework for cash: The threat from on-line plagiarism (2006) Proc. 7th Annu. Conf. Higher Education Academy Network for Information and Computer Sciences, pp. 121-126. , Dublin, Ireland, Aug. 29-31; 
Kasprzak, J., Nixon, M., Cheating in cyberspace: Maintaining quality in online education (2004) Assoc. Adv. Comput. Educ, 12 (1), pp. 85-99;
Scanlon, P.M., Neumann, D.R., Internet plagiarism among college students (2002) J. Coll. Student Devel, 43 (3), pp. 374-385;
Dick, M., Sheard, J., Bareiss, C., Carter, J., Joyce, D., Harding, T., Laxer, C., Addressing student cheating: Definitions and solutions (2003) SIGCSE Bull, 35 (2), pp. 172-184;
Sheard, J., Carbone, A., Dick, M., Determination of factors which impact on IT students' propensity to cheat (2003) Proc. 5th Australasian Computing Education Conf, pp. 119-126. , Adelaide, Australia;
Culwin, F., MacLeod, A., Lancaster, T., (2001) Source code plagiarism in UK HE computing schools, issues, attitudes and tools, , South Bank Univ, London, U.K, Sep, Tech. Rep;
Decoo, W., (2002) Crisis on Campus: Confronting Academic Misconduct, , Cambridge, MA: MIT Press;
Sutherland-Smith, W., Pandora's box: Academic perceptions of student plagiarism in writing (2005) J. Eng. Acad. Purp, 4 (1), pp. 83-95;
G. Cosma and M. Joy, Source-code plagiarism: A UK academic perspective, Dept. Computer Science, University of Warwick, Conventry, U.K., Res. Rep. No. 422, 2006Computer Software, JSPMaker v1.0.1, e. World Technology Ltd, Hong Kong, ChinaBergsten, H., (2003) JavaServer, , 3rd ed. Sebastopol, CA: O'Reilly;
Carroll, J., Appleton, J., (2001) Plagiarism: A Good Practice Guide, , Oxford, U.K, Oxford Brookes Univ;
Cosma, G., Joy, M., Source-code plagiarism: A UK academic perspective (2006) Proc. 7th Annu. Conf. Higher Education Academy Network for Information and Computer Sciences, pp. 116-120. , Dublin, Ireland, Aug. 29-31},
author = {Cosma, Georgina and Joy, Mike},
doi = {10.1109/TE.2007.906776},
file = {:C$\backslash$:/Users/matnovak/AppData/Local/Mendeley Ltd/Mendeley Desktop/Downloaded/2008 - Cosma, Joy - Towards a Definition of Source-Code Plagiarism.pdf:pdf},
issn = {0018-9359},
journal = {IEEE Transactions on Education},
keywords = {Codes (symbols),Computer programming,Computing courses,Education computing,Engineering education,Reuse,Self-plagiarism,Software engineering,Source-code plagiarism,Source-code plagiarism definition,Survey},
language = {English},
month = {may},
number = {2},
pages = {195--200},
title = {{Towards a Definition of Source-Code Plagiarism}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-44449164534{\&}partnerID=40{\&}md5=18d2409161e7e10c9d0fc67f0a5e9f40 http://ieeexplore.ieee.org/document/4455461/},
volume = {51},
year = {2008}
}
@article{Moussiades2005,
abstract = {Efficient detection of plagiarism in programming assignments of students is of a great importance to the educational procedure. This paper presents a clustering oriented approach for facing the problem of source code plagiarism. The implemented software, called PDetect, accepts as input a set of program sources and extracts subsets (the clusters of plagiarism) such that each program within a particular subset has been derived from the same original. PDetect proposes the use of an appropriate measure for evaluating plagiarism detection performance and supports the idea of combining different plagiarism detection schemes. Furthermore, a cluster analysis is performed in order to provide information beneficial to the plagiarism detection process. PDetect is designed such that it may be easily adapted over any keyword-based programming language and it is quite beneficial when compared with earlier (state-of-the-art) plagiarism detection approaches. {\textcopyright} The Author 2005. Published by Oxford University Press on behalf of The British Computer Society. All rights reserved.},
address = {Division of Computing Systems, Department of Industrial Informatics, Technological Educational Institute of Kavala, GR-65404 Kavala, Greece},
annote = {Cited By :15

Export Date: 23 February 2015

CODEN: CMPJA

Correspondence Address: Moussiades, L.; Division of Computing Systems, Department of Industrial Informatics, Technological Educational Institute of Kavala, GR-65404 Kavala, Greece; email: lmous@teikav.edu.gr

References: (2003) An XML Plagiarism Detection Model for Procedural Programming Languages, , TR 14-03 Iowa State University, IA; 
Halstead, M., (1977) Elements of Software Science, , Elsevier, New York;
Ottenstein, K., An algorithmic approach to the detection and prevention of plagiarism (1976) ACM SIGCSE Bull., 8, pp. 30-41;
Grier, S., A tool that detects plagiarism in Pascal programs (1981) ACM SIGCSE Bull., 13, pp. 21-25;
Donaldson, J., Lancaster, A., Sposato, P., A plagiarism detection system (1981) ACM SIGCSE Bull., 13, pp. 15-20;
Faidhi, J., Robinson, S., An empirical approach for detecting program similarity and plagiarism within a university programming environment (1987) Comput. Educ., 11, pp. 11-19;
Allen, F., Cocke, J., A program data flow analysis procedure (1976) Commun. ACM, 19, pp. 137-147;
Verco, K., Wise, M., Software for detecting suspected plagiarism: Comparing structure and attribute counting systems (1996) Proc. First Australian Conf. on Computer Science Education, pp. 86-95. , Sydney Australia, July 3-5, ACM Press, New York, USA;
Aiken, A., MOSS: A system for detecting software plagiarism (1998), http://www.cs.berkeley.edu/{\~{}}aiken/moss.html, University of Berkeley, CA. Available atWise, M., YAP3: Improved detection of similarities in computer program and other text (1996) Proc. 27th SIGCSE Technical Symp. on Computer Science Education, pp. 130-134. , Philadelphia USA, February 15-18, ACM Press, New York, USA;
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with Jplag (2002) J. Univ. Comput. Sci., 8, pp. 1016-1038;
Schleimer, S., Wikerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc 2003 ACM SIGMOD Int. Conf. on Management of Data, pp. 76-85. , San Diego, CA, June 9-12, ACM Press, New York, USA;
Wise, M., String similarity via greedy string tiling and running Karp-Rabin matching (1993), Department of Computer Science, University of Sydney. Available at ftp://ftp.cs.su.oz.au/michaelw/doc/RKR{\_}GST.psRibler, R., Abrams, M., Using visualization to detect plagiarism in computer science classes (2000) Proc. IEEE Symp. on Information Visualization, pp. 173-178. , Salt Lake City, UT, October 9-10, IEEE Computer Society, Los Alamitos, CA;
Hodges, C., Designing to motivate: Motivational techniques to incorporate in e-learning experiences (2004) The Journal of Interactive Online Learning, 2 (3), pp. 1-7;
McConnell, D., (2000) Implementing Computer Supported Cooperative Learning, , Kogan Page, London, UK;
Parker, A., Hamblen, J., Computer algorithms for plagiarism detection (1989) IEEE Trans. on Educ., 32, pp. 94-99;
Chakrabarti, S., (2003) Mining the Web., , Morgan Kaufmann Publishers, Oxford;
Lee, L., Measures of distributional similarity (1999) Proc. 37th Annual Meeting of the Association for Computational Linguistics, pp. 25-32. , College Park, Md, June 22-27, ACL, East Stroudsburg, PA;
Stein, B., Niggemann, O., On the nature of structure and its identification (1999) Proc. Graph-Theoretic Concepts in Computer Science: 25th Int. Workshop, WG'99, pp. 122-134. , Ascona, Switzerland, June 17-19, Springer-Verlag, Heidelberg;
Chartrand, G., Oellermann, O., (1993) Applied and Algorithmic Graph Theory, , McGraw-Hill, Inc., New York;
Hand, D., Mannila, H., Smyth, P., (2001) Principles of Data Mining, , Bradford Books, MIT Press, MA},
author = {Moussiades, L},
doi = {10.1093/comjnl/bxh119},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2005 - Moussiades - PDetect A Clustering Approach for Detecting Plagiarism in Source Code Datasets.pdf:pdf},
issn = {0010-4620},
journal = {The Computer Journal},
keywords = {Algorithms,Computer programming,Computer programming languages,Computer software,Data structures,Education,Keyword based programming language,Optimization,Plagiarism,Probability,Software package PDetect},
language = {English},
month = {jun},
number = {6},
pages = {651--661},
title = {{PDetect: A Clustering Approach for Detecting Plagiarism in Source Code Datasets}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-27844467771{\&}partnerID=40{\&}md5=6a8bed40dfb4a984a01cf74fe445f04f https://academic.oup.com/comjnl/article-lookup/doi/10.1093/comjnl/bxh119},
volume = {48},
year = {2005}
}
@inproceedings{Jonyer2005,
abstract = {In this work we introduce a novel method for source code fingerprinting based on frequent pattern discovery using a graph grammar induction system, and use it for detecting cases of plagiarism. This approach is radically different from others in that we are not looking for similarities between documents, but similarities between fingerprints, which are made up of recurring patterns within the same source code. The advantage to our approach is that fingerprints consist of any part of the text, and has no connection to functionality of the code. Rather, it concentrates on the habits of the coder, which, in most cases, will be very hard to identify by a plagiarizer, and almost impossible to remove. Copyright {\textcopyright} 2005, American Association for Artificial Intelligence (www.aaai.org). All rights reserved.},
address = {Tulsa, United States},
annote = {Conference code: 66624

Export Date: 23 February 2015

Correspondence Address: Jonyer, I.; Oklahoma State University, Department of Computer Science, 700 N Greenwood Ave, Tulsa, OK 74106, United States

References: Brin, S., Davis, J., Garcia-Molina, H., Copy detection mechanisms for digital documents (1995) Proceedings of the ACM SIGMOD Annual Conference, , San Francisco, CA; 
Cook, D.J., Holder, L.B., Substructure discovery using minimum description length and background knowledge (1994) Journal of Artificial Intelligence Research, 1, pp. 231-255;
Jonyer, I., Holder, L.B., Cook, D.J., MDL-based context-free graph grammar induction and applications (2004) International Journal of Artificial Intelligence Tools;
Jonyer, I., Holder, L.B., Cook, D.J., Concept formation using graph grammars (2002) Proceedings of the KDD Workshop on Multi-Relational Data Mining;
Montes-Y-G{\'{o}}mez, M., L{\'{o}}pez-L{\'{o}}pez, A., Gelbukh, A., Information retrieval with conceptual graph matching (2000) Lecture Notes in Computer Science N, 1873. , Springer-Verlag;
Rissanen, J., (1989) Stochastic Complexity in Statistical Inquiry, , World Scientific Company;
Shivakumar, N., Garcia-Molina, H., SCAM: A copy detection mechanism for digital documents (1995) Proceedings of the Second Annual Conference on the Theory and Practice of Digital Libraries;
Schleimer, S., Wilkerson, D., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proceedings of the ACM SIGMOD International Conference on Management of Data, pp. 76-85},
author = {Jonyer, I and Apiratikul, P and Thomas, J},
booktitle = {Recent Advances in Artifical Intelligence - Eighteenth International Florida Artificial Intelligence Research Society Conference},
editor = {I., Russell and Z., Markov},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2005 - Jonyer, Apiratikul, Thomas - Source code fingerprinting using graph grammar induction.pdf:pdf},
isbn = {1577352343 (ISBN); 9781577352341 (ISBN)},
keywords = {Artificial intelligence,Fingerprints,Graph theory,Pattern recognition,Plagiarism,Source code fingerprinting},
language = {English},
pages = {468--473},
title = {{Source code fingerprinting using graph grammar induction}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-32844459355{\&}partnerID=40{\&}md5=1eaa2ee884d8ca568790c9a027b384e7},
year = {2005}
}
@inproceedings{Yang2010a,
abstract = {The paper puts forward a new method to identify similar C codes based on weighted attributes eigenvector. According to the characteristics of physical and structure attributes of C codes, the weighing theory of attributes eigenvector is adopted to strengthen the infection of attribute elements with covert codes, which are based on the theory and method about existing kinds of attribute eigenvector in C codes. This can also improve the quality and veracity of the similarity recognition. Experiments show that the method can identify the integrated similarity with the three aspects of space characters, parameter variables and sentence sequences. Further more, comparing with ideal calculating results, the measure precision of integrated evaluation can reach to at least 94{\%} in the cases of middle and high similarity. {\textcopyright} 2010 IEEE.},
address = {Dalian, China},
annote = {Conference code: 82402

Export Date: 23 February 2015

Correspondence Address: Yang, S.; Faculty of Information and Electrical Engineering, Dalian University of Technology, Dalian, 116024, China; email: rr319@dlut.edu.cn

References: Ottenstein, K.J., An algorithmic approach to the detection and prevention of plagiarism (1976) ACM SIGCSE Bulletin, 8, pp. 30-41. , April; 
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism (1996) 1st Australian Conference on Computer Science Education, 102 (2), pp. 3-5. , Feb;
Wise, M.J., YAP3: Improved detection of similarities in computer program and other texts (1996) 27 SIGCSE Technical Symposium, pp. 130-134. , Philadelphia, PA Oct;
Clough, P., Plagiarism in natural and programming languages: An overview of current tools and technologies (2000) Research Memoranda: CS-00-05, pp. 168-172. , Dept. Computer Science, Univ. of Sheffield;
Jones, E.L., Metrics based plagiarism monitoring (2001) Consortium for Computing in Small Colleges, 16, pp. 253-261. , New York, North Holland Apr;
Tao, Y., Vector-based computing scheme of similarity (2001) Journal of Yunnan Normal University, 21, pp. 17-19. , May;
Yu, H., (2006) Research of Identifying Program Code Similarity, , Master Thesis, Dept. Computer amd Information Eng, Iner Mongolia Normal University, Dec;
Halstead, M.H., (1977) Elements of Software Science, pp. 27-69. , New York, US: North Holland;
Li, X., Wang, L., The regression of the real estate' price by hierarchical analysis (2007) Journal of East China Jiaotong University, 24, pp. 151-153. , Feb;
Saaty, T.L., (1980) The Analytic Hierarchy Process, , New York, US: Mc Graw-Hill
A4 - Dalian University of Technology},
author = {Yang, Suying and Wang, Xin and Shao, Cheng and Zhang, Peng},
booktitle = {International Conference on Intelligent Control and Information Processing},
doi = {10.1109/ICICIP.2010.5565209},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Yang et al. - Recognition on source codes similarity with weighted attributes eigenvector.pdf:pdf},
isbn = {978-1-4244-7047-1},
keywords = {C codes,Data processing,Eigenvalues and eigenfunctions,Eigenvectors,Integrated evaluation,Intelligent control,Measure precision,Parameter variable,Source codes,Theory and methods,Weighted attributes},
language = {English},
month = {aug},
number = {PART 2},
pages = {539--543},
publisher = {IEEE},
title = {{Recognition on source codes similarity with weighted attributes eigenvector}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78649278175{\&}partnerID=40{\&}md5=ffe658a69ba014eb9910d78a3421a0a0 http://ieeexplore.ieee.org/document/5565209/},
year = {2010}
}
@inproceedings{Huang2010,
abstract = {Source code documents are vulnerable to being plagiarized. As the central component of Code Plagiarism Detection (CPD), Code Similarity Detection (CSD) attracts more and more attention. In this paper, we proposed a new method for CSD by combining structure metric with semantic computing techniques. It is capable of identifying not only the primary cheating means in code copy, but also the senior ones, such as replacing control structures with equivalent structures. We describe the design and implementation of the method, and make some comparative experiments against MOSS and the structure only method. Experiments show that the method proposed in this paper can obtain more effective similar values of code-pairs. {\textcopyright}2010 IEEE.},
address = {Nanjing, China},
annote = {Conference code: 83760

Export Date: 23 February 2015

Correspondence Address: Huang, L.; College of Computer Science and Technology, Nanjing University of Science and Technology, Nanjing, China; email: huangliuliu15@163.com

References: Parker, A., H, J.O., Computer Algorithms for Plagiarism Detection (1989) IEEE Transaction on Education, 32 (2), pp. 94-99. , [J]; 
L.Jones, E., Metrics Based Plagiarism Monitoring 6th Annual CCSC Northeastern Conference. 2001: Middlebury,Vermont, pp. 253-261. , [C];
Halstead, (1977) Elements of Software Science [M], , New York North Holland;
Grier, S., A Tool That Detects Plagiarism 12th SICCSE Technical Symp. 1981, St Louis, pp. 15-22. , [C];
Faidhi, J.A.W., Robinson, S.K., An Empirical Approach for Detecting Program Similarity and Plagiarism within a University Programming Environment (1987) Computers {\&} Education, 11 (1), pp. 11-19. , [J];
J.Wise, M., YAP3: Improved Detection of Similarities in Computer Program and other Texts (1996) SIGCSE'96, pp. 130-134. , [C] Philadelphia, U. S. A;
Lutz Prechelt, G.M., Philippsen, M., Finding Plagiarisms among a Set of Programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038. , [J];
Saul Schleimer, D.S.W., Aiken, A., Winnowing: Local Algorithms for Document Fingerprinting (2003) SIGMOD, pp. 76-85. , [J], ACM: San Diego, CA
A4 - IEEE Beijing Section; Shanghai Jiao Tong University; University of Texas at Dallas (UTD); Osaka University},
author = {Huang, Liuliu and Shi, Shumin and Huang, Heyan},
booktitle = {IEEE International Conference on Progress in Informatics and Computing},
doi = {10.1109/PIC.2010.5687856},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Huang, Shi, Huang - A new method for Code Similarity Detection.pdf:pdf},
isbn = {978-1-4244-6788-4},
keywords = {Cheating means,Code plagiarism,Code similarity detection,Information science,Semantic computing,Semantics,Similarity detection,Structure metric},
language = {English},
month = {dec},
pages = {1015--1018},
publisher = {IEEE},
title = {{A new method for Code Similarity Detection}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-79951495620{\&}partnerID=40{\&}md5=1a44d970825c1e237d03fe34097397cb http://ieeexplore.ieee.org/document/5687856/},
volume = {2},
year = {2010}
}
@inproceedings{Campos2012,
abstract = {Source-code plagiarism detection is an unfortunate but necessary activity when reviewing assignments of programming courses. While being reasonably easy to fool, string-based comparisons offer a high degree of accuracy with almost no false positives and usually a good string similarity metric is the length of their longest common subsequence. In the case of two strings, the dynamic programming algorithm for this calculation unfortunately takes quadratic time even if the strings are equal. In this paper we present an algorithm that, given a batch of source-code files, efficiently finds all pairs of similar files by preprocessing the files and then using a fast branch-and-bound algorithm to find only those pairs whose longest common subsequence is indicative of plagiarism. {\textcopyright} 2012 IEEE.},
address = {Mexico City, Mexico},
annote = {Conference code: 95761

Export Date: 23 February 2015

Correspondence Address: Campos, R.A.C.; Departamento de Sistemas, UAM Azcapotzalco, Mexico City, Mexico; email: racc@correo.azc.uam.mx

References: Roy, C.K., Cordy, J.R., Koschke, R., Comparison and evaluation of code clone detection techniques and tools: A qualitative approach (2009) Sci. Comput. Program., 74 (7), pp. 470-495. , May; 
Ahmadzadeh, M., Mahmoudabadi, E., Pattern of plagiarism in novice students' generated programs: An experimental approach (2011) Journal of Information Technology Education, 10, pp. IIP195-IIP205;
Wagner, R.A., Fischer, M.J., The String-to-String Correction Problem (1974) J. ACM, 21 (1), pp. 168-173. , Jan;
Navarro, G., A guided tour to approximate string matching (2001) ACM Comput. Surv., 33 (1), pp. 31-88. , Mar;
Rick, C., (1994) New Algorithms for the Longest Common Subsequence Problem, , University of Bonn;
Bergroth, L., Hakonen, H., Raita, T., A Survey of Longest Common Subsequence Algorithms (2000) Proceedings of the Seventh International Symposium on String Processing Information Retrieval (SPIRE'00), pp. 39-48. , Washington, DC, USA;
Apostolico, A., Guerra, C., The longest common subsequence problem revisited (1987) Algorithmica, 2 (1), pp. 315-336;
Kernighan, B.W., (1988) The C Programming Language, 2nd Ed, , Prentice Hall Professional Technical Reference;
Greenberg, R.I., (2002) Fast and Simple Computation of All Longest Common Subsequences, , CoRR, vol. cs.DS/0211001
A4 - Cinvestav; CGSTIC - Cinvestav; REGION 9; Electron Devices Society},
author = {Campos, R A Castro and Martinez, F J Zaragoza},
booktitle = {9th International Conference on Electrical Engineering, Computing Science and Automatic Control},
doi = {10.1109/ICEEE.2012.6421180},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Campos, Martinez - Batch source-code plagiarism detection using an algorithm for the bounded longest common subsequence problem.pdf:pdf},
isbn = {978-1-4673-2169-3},
keywords = {Algorithms,Automation,Branch and bounds,Branch-and-bound algorithms,Control,Dynamic programming algorithm,Electrical engineering,False positive,High degree of accuracy,Intellectual property,Linear programming,Longest common subsequence problem,Longest common subsequences,Plagiarism detection,Process control,Programming course,Quadratic time,String similarity,branch and bound,longest common subsequence,source-code},
language = {English},
month = {sep},
pages = {1--4},
publisher = {IEEE},
title = {{Batch source-code plagiarism detection using an algorithm for the bounded longest common subsequence problem}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84874404072{\&}partnerID=40{\&}md5=438f2c62a6b8d413ff720710a687f8f7 http://ieeexplore.ieee.org/document/6421180/},
year = {2012}
}
@article{Lukacsy2009,
abstract = {The paper presents a plagiarism detection framework the goal of which is to determine whether two programs are similar to each other, and if so, to what extent. The issue of plagiarism detection has been considered earlier for written material, such as student essays. For these, text-based algorithms have been published. We argue that in case of program code comparison, structure based techniques may be much more suitable. The main idea is to transform the source code into mathematical objects, use appropriate reduction and comparison methods on these, and interpret the results appropriately. We have designed a generic program structure comparison framework and implemented it for the Prolog and SML programming languages. We have been using the implementation at BUTE to successfully detect plagiarism in homework assignments for years.},
address = {Budapest University of Technology and Economics (BUTE), Department of Computer Science and Information Theory, Magyar tud{\'{o}}sok k{\"{o}}r{\'{u}}tja 2., 1117 Budapest, Hungary},
annote = {Cited By :1

Export Date: 23 February 2015

CODEN: ACCYD

Correspondence Address: Luk{\'{a}}csy, G.; Budapest University of Technology and Economics (BUTE), Department of Computer Science and Information Theory, Magyar tud{\'{o}}sok k{\"{o}}r{\'{u}}tja 2., 1117 Budapest, Hungary; email: lukacsy@cs.bme.hu},
author = {Luk{\'{a}}csy, G and Szeredi, P},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2009 - Luk{\'{a}}csy, Szeredi - Plagiarism detection in source programs using structural similarities.pdf:pdf},
issn = {0324721X (ISSN)},
journal = {Acta Cybernetica},
keywords = {Graph similarity,Plagiarism,Program source},
language = {English},
number = {1},
pages = {191--216},
title = {{Plagiarism detection in source programs using structural similarities}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-69849103589{\&}partnerID=40{\&}md5=13ac2bd7bd7a376a0a5a333417d8c3bd},
volume = {19},
year = {2009}
}
@inproceedings{Chuda2010,
abstract = {In e-learning is very important the checking plagiarism of students homework submissions. This paper proposes methods and tools for the plagiarism detection. The paper focuses only on the source code plagiarism. The analysis phase was the basis for our method proposal which has ambitions to bring something new and to make the plagiarism detection more effective. The method was implemented in a tool and its results and advantages are also presented. Copyright {\textcopyright} 2010 ACM.},
address = {New York, New York, USA},
annote = {Conference code: 81605

Export Date: 23 February 2015

Correspondence Address: Chud{\'{a}}, D.; Institute of Informatics and Software Engineering, Faculty of Informatics and Information Technology, Slovak University of Technology, Bratislava, Slovakia; email: chuda@fiit.stuba.sk

References: Bowyer, K., Hall, L., Experience using MOSS to detect cheating on programming assignments (1999) Proceedings of the 29th ASEE/IEEE Frontiers in Education Conference, pp. 18-22. , San Juan, Puerto Rico, November, IEEE Computer Society: Los Alamitos, CA, 1999; 
Clough, P., (2000) Plagiarism in Natural and Programming Languages: An Overview of Current Tools and Technologies, , University of Sheffield Dept. Computer Science June;
Chud{\'{a}}, D., N{\'{a}}vrat, P., Support for checking plagiarism in e-learning (2010) Procedia - Social and Behavioral Sciences, 2 (2), pp. 3140-3144. , Innovation and Creativity in Education, ISSN 1877-0428;
Copeland, T., (2003) Detecting Duplicate Code with PMD's CPD, , http://www.onjava.com/pub/a/onjava/2003/03/12/pmd{\_}cpd.html, [Online; accessed February 22nd, 2009]. Available at;
Grune, D., The Software and Text Similarity Tester SIM, , http://www.cs.vu.nl/{\~{}}dick/sim.html, [Online; accessed February 22nd 2009]. Available at;
Joy, M., Luck, M., Plagiarism in programming assignments (1998) IEEE Transactions on Education, 42 (2). , University of Warwick;
Joy, M., Griffiths, N., Boyatt, R., The boss online submission and assessment system (2005) J. Educ. Resour. Comput., 5 (3), p. 2. , September. 2005;
Kov{\'{a}}{\v{c}}ov{\'{a}}, B., (2008) Similarity and Recognition of A Plagiarized Program, , Diploma thesis. Faculty of Informatics and Information Technologies. STU in Bratislava;
Miller, G.A., (2006) WordNet - A Lexical Database for the English Language, , http://wordnet.princeton.edu/, Princeton University, [Online; accessed February 22nd, 2009], Available at;
Prechelt, L., Malpohl, G., Philippsen, M., JPlag: Finding Plagiarisms among A Set of Programs, , Technical Report 2000-1. Universit{\"{a}}t Karlsruhe, Fakult{\"{a}}t f{\"{u}}r Informatik. Nemecko, Marec 2000;
Wise, M.J., Detection of similarities in student programs: YAP'ing may be preferable to Plague'ing (1992) SIGCSE '92: Proceedings of the Twenty-third SIGCSE Technical Symposium on Computer Science Education, pp. 268-271. , Kansas City, Missouri, USA: ACM Press, ISBN: 0-89791-468-476},
author = {Chud{\'{a}}, Daniela and Kov{\'{a}}{\v{c}}ov{\'{a}}, Bianka},
booktitle = {Proceedings of the 11th International Conference on Computer Systems and Technologies and Workshop for PhD Students in Computing on International Conference on Computer Systems and Technologies},
doi = {10.1145/1839379.1839453},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Chud{\'{a}}, Kov{\'{a}}{\v{c}}ov{\'{a}} - Checking plagiarism in e-learning.pdf:pdf},
isbn = {9781450302432},
keywords = {Detection method for plagiarised programming code,E-learning,Plagiarism detection,Plagiarism plagiarised programming code,Programming codes,Side-by-side visualisation of plagiarised programm,Source code plagiarisms,Visualisation,Visualization},
language = {English},
pages = {419},
publisher = {ACM Press},
title = {{Checking plagiarism in e-learning}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-77956288084{\&}partnerID=40{\&}md5=fff75afcb46bcf965c04618764d228f8 http://portal.acm.org/citation.cfm?doid=1839379.1839453},
volume = {471},
year = {2010}
}
@inproceedings{Ajmal2013,
abstract = {In academic environments where students are partly evaluated on the assignments, it is necessary to discourage the practice of copying assignments of other students. The detection of plagiarism in code from large source code repositories, manual detection is fairly complex, if not impossible. Therefore, for fair evaluation there must be a fast, efficient and automatedlsemi-automated way to detect the assignments copied. Source Code metrics can be used to detect the source code plagiarism in programming assignments submitted by university students. In this paper we have developed a source code plagiarism detection system and tried to improve the existing techniques by separating the suspected files and the non-plagiarized files, thus reducing the dataset for further comparison. A number of source code metrics have been calculated, combined using similarity detection formula to give an aggregate view of the source code metrics. After that the suspected files are separated and then performed string-matching to detect the level of similarity. {\textcopyright} 2013 IEEE.},
address = {Pakistan},
annote = {Conference code: 102466

Export Date: 23 February 2015

Correspondence Address: Dept. of Computer Science and IT, Islamia University of BahawalpurPakistan

References: Moussiades, L., Vakali, A., Pdetect: A clustering approach for detecting plagiarism in source code datasets (2005) The Computer Journal, 48 (6), pp. 651-661; 
Grier, S., A Tool that detects plagiarism in Pascal Programs Proceedings of the Twelfth SIGCSE Technical Symposium on Computer Science Education, pp. 15-20;
Donaldson, J.L., Lancaster, A.M., Sposato, P.H., A plagiarism detection system (1981) Proceedings of the Twelfth SIGCSE Technical Symposium on Computer Science Education, pp. 21-25. , NY;
Faidhi, J.A.W., Robinson, S.K., An empirical approach for detecting program similarity and plagiarism within a university programming environment (1987) Computers {\&}Education, 11, pp. 11-19;
Allen, F.E., Cocke, J., A program data flow analysis procedure (1976) Communications of the ACM, 19, p. 137;
Burrows, S., Tahaghoghi, S.M.M., Zobel, J., Efficient plagiarism detection for large code repositories (2006) Software Practice and Experience, 37, pp. 151-175;
Noh, S.-Y., Kim, S., Gaida, S.K., An XML plagiarism detection model for procedural programming languages (2004) Proceedings of the 2nd International Conference on Computer Science and Its Applications.;
Lukashenko, R., Graudina, V., Grundspenkis, J., Computer-based plagiarism detection methods and tools: An overview (2007) Proceedings of International Conference on Computer System and Technologies;
Culwin, F., Lancaster, T., A review of electronic services for plagiarism detection in student submissions (2000) Proceedings of 8th Annual Conference on Teaching of Computing, , Edinburgh;
Cosma, G., (2008) An Approach to Source-Code Plagiarism Detection and Investigation Using Latent Semantic Analysis, , PhD Thesis, University of Warwick;
McCabe, T.J., A complexity measure IEEE Transactions on Software Engineering, SE-2 (4), pp. 308-320;
http://docs.oracle.com/javase/tutorial/java/nutsandbolts/{\_}keywords.html, Java Language KeywordsDeza, E.D., Michel, M., (2009) Encyclopedia of Distances, p. 94. , Springer;
Granville, A., Detecting plagiarism in java code (2002) Bachelor of Engineering with Honours in Software Engineering, , Thesis, The University of Sheffield;
Wise, M.J., (1993) String Similarity Via Greedy String Tiling and Running Karp-Rabin Matching, , Online Preprint, Dec
A4 - The Islamia University of Bahawalpur; Digital Information Research Foundation (DIRF); Higher Education Commission (HEC); ICT R and D; IEEE RDPP},
author = {Ajmal, Omer and {Saad Missen}, M M and Hashmat, Tazeen and Moosa, M and Ali, Tenvir},
booktitle = {Eighth International Conference on Digital Information Management},
doi = {10.1109/ICDIM.2013.6693984},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2013 - Ajmal et al. - EPlag A two layer source code plagiarism detection system.pdf:pdf},
isbn = {978-1-4799-0615-4},
keywords = {Academic environment,Computer programming languages,Greedy String Tiling,Information management,Information retrieval,Intellectual property,Java,Programming assignments,Similarity detection,Source code plagiarisms,Source code repositories,Students,University students,information retrieval,plagirism detection},
language = {English},
month = {sep},
pages = {256--261},
publisher = {IEEE},
title = {{EPlag: A two layer source code plagiarism detection system}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84893572793{\&}partnerID=40{\&}md5=c7eb06b8b38f569237b1ca75cf731335 http://ieeexplore.ieee.org/document/6693984/},
year = {2013}
}
@article{Lee2012,
abstract = {We propose an adaptive method for detecting plagiarized pairs from a large set of source code. This method is adaptive in that it uses an adaptive algorithm and it provides an adaptive threshold for determining plagiarism. Conventional algorithms are based on greedy string tiling or on local alignments of two code strings. However, most of them are not adaptive; they do not consider the characteristics of the program set, thereby causing a problem for a program set in which all the programs are inherently similar. We propose adaptive local alignment-a variant of local alignment that uses an adaptive similarity matrix. Each entry of this matrix is the logarithm of the probabilities of the keywords based on their frequency in a given program set. We also propose an adaptive threshold based on the local outlier factor (LOF), which represents the likelihood of an entity being an outlier. Experimental results indicate that our method is more sensitive than JPlag, which uses greedy string tiling for detecting plagiarism-suspected code pairs. Further, the adaptive threshold based on the LOF is shown to be effective, and the detection performance shows high sensitivity with negligible loss of specificity, compared with that using a fixed threshold. {\textcopyright} 2012 KSII.},
address = {Center of U-Port IT Research and Education, Pusan National University, Busandaehak-ro 63beon-gil, Geumjeong-gu, Busan 609-735, South Korea},
annote = {Export Date: 23 February 2015

Correspondence Address: Woo, G.; Dept. of Computer Science and Engineering, Pusan National University, Busandaehak-ro 63beon-gil, Geumjeong-gu, Busan 609-735, South Korea; email: woogyun@pusan.ac.kr

References: Carter, J., Collaboration or plagiarism: What happens when students work together (1999) Proc. of ITICSE'99, pp. 52-55. , Jun, Article (CrossRef Link); 
Knight, A., Almeroth, K., Bimber, B., An automated system for plagiarism detection using the internet (2004) Proc. of ED-MEDIA 2004, , 3619-3625, Jun, Article (CrossRef Link);
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) Proc. of SIGCSE'99, pp. 266-270. , Mar, Article (CrossRef Link);
Prechelt, L., Malpohl, G., Philippsen, M., Finding plagiarisms among a set of programs with JPlag (2002) Journal of Universal Computer Science, 8 (11), pp. 1016-1038. , Nov, Article (CrossRef Link);
Whale, G., Identification of program similarity in large populations (1990) The Computer Journal-Special Issue On Procedural Programming, 33 (2), pp. 140-146. , Apr, Article (CrossRef Link);
Wise, M.J., Detection of similarities in student programs: Yap'ing may be preferable to plague'ing (1992) ACM SIGSCE Bulletin, 24 (1), pp. 268-271. , Mar, Article (CrossRef Link);
Schleimer, S., Wilkerson, D.S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) Proc. of the ACM SIGMOD 2003, pp. 76-85. , Jun, Article (CrossRef Link);
Lim, J.S., Ji, J.H., Cho, H.G., Woo, G., Plagiarism detection among source codes using adaptive local alignment of keywords (2011) Proc. of ICUIMC'11, 2, pp. 24-33. , Feb, Article (CrossRef Link);
Smith, T.F., Waterman, M.S., Identification of common molecular subsequences (1981) Journal of Molecular Biology, 147, pp. 195-197. , Article (CrossRef Link);
Ji, J.H., Park, S.H., Woo, G., Cho, H.G., Source code similarity detection using adaptive local alignment of keywords (2007) Proc. of PDCAT 2007, pp. 179-180. , Dec, Article (CrossRef Link);
Breunig, M.M., Kriegel, H.P., Ng, R.T., Sander, J., LOF: Identifying Density-Based Local Outliers (2000) Proc. of the ACM SIGMOD 2000, pp. 93-104. , May, Article (CrossRef Link);
Parker, A., Hamblen, J.O., Computer algorithms for plagiarism detection (1989) IEEE Trans. On Education, 32 (2), pp. 94-99. , Article (CrossRef Link), May;
Brin, S., Davis, J., Garcia-Molina, H., Copy detection mechanisms for digital documents (1995) Proc. of the ACM SIGMOD 1995, pp. 398-409. , May, Article (CrossRef Link);
Johnson, J.H., Identifying redundancy in source coding using fingerprints (1993) CASCON'93, pp. 171-183. , Article (CrossRef Link);
Stephens, S.D., Using metrics to detect plagiarism (student paper) (2001) The Journal of Computing Sciences In Colleges, 16 (3), pp. 191-196. , Article (CrossRef Link), Mar;
Halstead, M.H., (1977) Elements of Software Science (Operating and Programming Systems Series), , Elsevier Science Inc., New York, Article (CrossRef Link);
Schmidt, T., Stoye, J., Quadratic time algorithms for finding common intervals in two and more sequences (2004) Proc. of CPM 2004, pp. 347-385. , Jul, Article (CrossRef Link);
Son, J.W., Park, S.B., Park, S.Y., Program plagiarism detection using parse tree kernels (2006) Proc. of PRICAI 2006, pp. 1000-1004. , Aug, Article (CrossRef Link);
Baxter, I.D., Yahin, A., Moura, L.M., Sant'Anna, M., Bier, L., Clone detection using abstract syntax trees (1998) Proc. of ICSM'98, pp. 368-377. , Mar, Article (CrossRef Link);
Verco, K.L., Wise, M.J., Software for detecting suspected plagiarism: Comparing structure and attribute-counting systems (1996) Proc. of ACSE'96, pp. 81-88. , Jul, Article (CrossRef Link);
Wise, M.J., Neweyes: A system for comparing biological sequences using the running Karp-Rabin Greedy String-Tiling algorithm (1995) Proc. of ISMB 1995, pp. 393-401. , Aug, Article (CrossRef Link);
Chen, X., Francia, B., Li, M., McKinnon, B., Seker, A., Shared information and program plagiarism detection (2004) IEEE Trans. On Information Theory, 50 (7), pp. 1545-1551. , Article (CrossRef Link);
Zhang, J., Zulkernine, M., Anomaly based network intrusion detection with unsupervised outlier detection (2006) Proc. of ICC'06, 5, pp. 2388-2393. , Jun, Article (CrossRef Link);
Maimon, O., Rokach, L., (2005) Data Mining and Knowledge Discovery Handbook, , Springer-Verlag New York Inc, Article (CrossRef Link);
Laurikkala, J., Juhola, M., Kentala, E., Informal identification of outliers in medical data (2000) Proc. of IDAMAP 2000, , Aug, Article (CrossRef Link);
Knorr, E., Ng, R.T., Algorithms for mining distance-based outliers in large datasets (1998) Proc. of VLDB'98, pp. 392-403. , Aug, Article (CrossRef Link);
Zeng, Y., Chen, T.M., Classification of traffic flows into QoS class by unsupervised learning and KNN clustering (2009) KSII Trans. On Internet and Information Systems, 3 (2), pp. 134-146. , Article (CrossRef Link);
Song, S.H., Lee, C.H., Park, J.H., Koo, K.J., Kim, J.K., Park, J.S., Enhancing location estimation and reducing computation using adaptive zone based K-NNSS algorithm (2009) KSII Trans. On Internet and Information Systems, 3 (1), pp. 119-133. , Article (CrossRef Link);
Yu, J.H., Lee, H.S., Im, Y.H., Kim, M.S., Park, D.H., Real-time classification of internet application traffic using a hierarchical multi-class SVM (2010) KSII Trans. On Internet and Information Systems, 4 (5), pp. 859-876. , Article (CrossRef Link);
Alshawabkeh, M., Jang, B., Kaeli, D., Accelerating the local outlier factor algorithm on a GPU for intrusion detection systems (2010) Proc. of GPGPU-3, pp. 104-110. , Mar, Article(CrossRef Link);
(2012) OpenC++ Homepage, , http://opencxx.sourceforge.net/, lastly visited on Apr;
Ji, J.H., Woo, G., Park, S.H., Cho, H.G., An intelligent system for detecting source code plagiarism using a probabilistic graph model (2007) Proc. of MLDM 2007, pp. 55-69. , Jul, Article(CrossRef Link)},
author = {Lee, Yun-Jung and Lim, Jin-Su and Ji, Jeong-Hoon and Cho, Hwaun-Gue and Woo, Gyun},
doi = {10.3837/tiis.2012.06.008},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2012 - Lee et al. - Plagiarism Detection among Source Codes using Adaptive Methods.pdf:pdf},
issn = {19767277},
journal = {KSII Transactions on Internet and Information Systems},
keywords = {Adaptive algorithms,Adaptive local alignment,Alignment,Clustering algorithms,Intellectual property,Local Outlier Factor,Local alignment,Local outlier factors,Plagiarism,Program plagiarism,Program plagiarism detection,Similarity measurement,Similarity measurements,Software similarities,Software similarity,Statistics},
language = {English},
number = {6},
pages = {1627--1648},
title = {{Plagiarism Detection among Source Codes using Adaptive Methods}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84863791443{\&}partnerID=40{\&}md5=faa68d458c44cc6bf3a5cd0741a755dc http://www.itiis.org/digital-library/manuscript/364},
volume = {6},
year = {2012}
}
@inproceedings{Chen2010,
abstract = {With the signigicant increase of computer and Internet based crimes, it becomes increasingly important to have techniques that can be applied in a legal setting to assist the court in making judgements about malware, theft of code and computer fraud. To better deal with author identification of software, we propose a semantic approach to identifying authorship through the comparison of program data flows. To do so, we compute program dependences, compute program similarity if detecting theft of code is needed, and thus query about not only the syntactic structure of programs but also the data flow within in order to discriminate authors. The experimental result reveals that our technique is more robust even with some intentional code modifications. {\textcopyright} 2010 IEEE.},
address = {Dalian, China},
annote = {Conference code: 82827

Export Date: 23 February 2015

CODEN: PSICD

Correspondence Address: Chen, R.; School of Information Science and Technology, Dalian Maritime University, Dalian 116026, China; email: rchen@dl.cn

References: Gray, A., Sallis, P., MacDonell, S., Software forensics: Extending authorship analysis techniques to computer programs (1997) The Third Biannual Conference of the International Association of Forensic Linguists, pp. 1-8; 
Frantzeskou, G., Gritzalis, S., Macdonell, S.G., Source code authorship analysis for supporting the cybercrime investigation process (2004) Proc. 1 St International Conference on E-Business and Telecommunications Networks (ICETE04), pp. 85-92;
Graudina, V., Lukashenko, R., Grundspenkis, J., Computer-based plagiarism detection methods and tools: An overview (2007) CompSysTech '07: Proceedings of the 2007 International Conference on Computer Systems and Technologies, pp. 1-6. , New York, NY, USA ACM;
Donaldson, J.L., Lancaster, A.M., A plagiarism detection system (1981) Proc. of 12th SIGSCE Techical Symp., 13, pp. 21-25;
Wilkerson, D.S., Schleimer, S., Aiken, A., Winnowing: Local algorithms for document fingerprinting (2003) SIGMOD, pp. 76-85. , ACM Press;
Tahaghoghi, S.M.M., Burrows, S., Zobel, J., Efficient plagiarism detection for large code repositories (2007) Softw. Pract. Exper., 37 (2), pp. 151-175;
Wise, M.J., Yap3: Improved detection of similarities in computer program and other texts (1996) SIGCSE Bull., 28 (1), pp. 130-134;
Prechelt, L., Malpohl, G., Malpohl, G., Finding plagiarisms among a set of programs with jplag (2002) Journal of Universal Computer Science, 8, pp. 1016-1038;
Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE Bull., 31 (1), pp. 266-270;
Lakshmanan, V., Engels, S., Craig, M., Plagiarism detection using feature-based neural networks (2007) SIGCSE '07: Proceedings of the 38th SIGCSE Technical Symposium on Computer Science Education, pp. 34-38. , New York, NY, USA ACM;
Moussiades, L., Vakali, A., Pdetect: A clustering approach for detecting plagiarism in source code datasets (2005) Comput. J., 48 (6), pp. 651-661;
Jadalla, A., Elnagar, A., Pde4java: Plagiarism detection engine for java source code: A clustering approach (2008) Int. J. Bus. Intell. Data Min., 3 (2), pp. 121-135;
McKinnon, B., Chen, X., Li, M., Seker, A., A theory of uncheatable program plagiarism detection and its practical implementation (2002) Technical Report, University of California, , Santa Barbara;
Halstead, M.H., (1997) Element S of Software Science [M], , New York: Elsevier Science Inc;
Sallis, P., MacDonell, S., MacLennan, G., Gray, A., Kilgour, R., Identified: Software authorship analysis with case-based reasoning (1997) Proceedings of the Addendum Session of the 1997 Inerenational Conference on Neural Information Processing and Intelligent Information Systems
A4 - IEEE; IEEE Computer Society},
author = {Chen, Rong and Hong, Lina and Lu, Chunyan and Deng, Wu},
booktitle = {34th Annual Computer Software and Applications Conference Workshops},
doi = {10.1109/COMPSACW.2010.56},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2010 - Chen et al. - Author Identification of Software Source Code with Program Dependence Graphs.pdf:pdf},
isbn = {978-1-4244-8089-0},
keywords = {Author identification,Computer crime,Computer software,Crime,Data flow,Data flow analysis,Metics,Program similarity,Security of data,Semantics,Software forensics},
language = {English},
month = {jul},
pages = {281--286},
publisher = {IEEE},
title = {{Author Identification of Software Source Code with Program Dependence Graphs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-78649810164{\&}partnerID=40{\&}md5=63949f15594e9b574935f90747fd2600 http://ieeexplore.ieee.org/document/5615808/},
year = {2010}
}
@inproceedings{Baby2014,
abstract = {There has been proliferation in the use of plagiarized articles or source code amongst student and research community. This paper focus on an efficient method that can differentiate between plagiarized and non-plagiarized programs. Similarity/Distance measurement techniques are used to classify the test file. Thirty six distance metrics are used to determine intra class and inter class proximity. Unseen file not used for frequency extraction are predicted with higher accuracy. This depict that our proposed model using intra/inter family threshold can be implemented to identify plagiarized programs with better detection rate.},
address = {Kerala, India},
annote = {Conference code: 109877

Export Date: 23 February 2015

Correspondence Address: Baby, J.; Department of Computer Science and Engineering, SCMS School of Engineering and TechnologyIndia

References: Cha, S.-H., Comprehensive survey on distance/similarity measures between probability density functions (2007) Proc. of International Journal of Mathematical Models and Methods in Applied Sciences, 1, pp. 300-307; 
Bin-Habtoor, A.S., Zaher, M.A., A survey on plagiarism detection systems (2012) International Journal of Computer Theory and Engineering, 4;
Cosma, G., Joy, M., Towards a definition of sourcecode plagiarism (2008) IEEE Trans. Education, 51, pp. 195-200;
Maurer, H., Kappe, F., Zaka, B., Plagiarism-a survey (2006) Journal of Universal Computer Science, 12, pp. 1050-1084;
Arwin, C., Tahaghoghi, S.M.M., Plagiarism detection across programming languages (2006) Proc. of the 29th Australasian Computer Science Conference, 48, pp. 277-286. , ACSC '06;
Doreswamy, Manohar, M.G., Hemanth, K.S., A study on similarity measure functions on engineering materials selection (2011) Proc. of the i St International Conference on Artificial Intelligence, Soft Computing and Applications, 1, pp. 157-168. , AIAA-201 1;
Kustanto, C., Liem, I., Automatic source code plagiarism detection (2009) Proc. of IEEE Computer Society, pp. 481-486. , SNPD '09;
Granzer, W., Praus, F., Balog, P., Source code plagiarism in computer engineering courses (2013) Journal on Systemics, Cybernetics and Informatics, 11;
Xiong, H., Yan, H., Li, Z., Li, H., BUAA-AntiPlagiarism: A system to detect plagiarism for c source code (2009) International Conference on Computational Intelligence and Software Engineering, pp. 1-5;
Cosma, G., Joy, M., An approach to source-code plagiarism detection and investigation using latent semantic analysis (2012) IEEE Transactions on Computers, 61 (3). , March;
Li, X., Zhong, X.J., The source code plagiarism detection using ast (2010) Proc. of the 2010 International Symposium on Intelligence Information Processing and Trusted Computing, pp. 406-408;
http://www.historians.org/about-aha-andmembership/governance/policies-and-documents/statement-onplagiarismBrixtel, R., Fontaine, M., Lesner, B., Bazin, C., Robbes, R., Language-independent clone detection applied to plagiarism detection (2010) SCAM '1, IEEE Computer Society, pp. 77-86;
Muddu, B., Asadullah, A.M., Bhat, V.D., Cpdp: A robust technique for plagiarism detection in source code (2013) IEEE, IWSC '13, pp. 39-45;
Krinke, J., Identifying similar code with program dependence graphs (2001) Proceedings of the Eighth Working Conference on Reverse Engineering (wcre'Oi), p. 301
A4 -},
author = {Baby, Julie and {Kannan T} and {Vinod P} and Gopal, Viji},
booktitle = {International Conference on Computation of Power, Energy, Information and Communication},
doi = {10.1109/ICCPEIC.2014.6915408},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Baby et al. - Distance indices for the detection of similarity in C programs.pdf:pdf},
isbn = {978-1-4799-3827-8},
keywords = {C (programming language),Distance,Distance metrics,Energy management,Energy resources,Family,Frequency extraction,Measurement techniques,Plagiarism,Research communities,Similarity and Attributes},
language = {English},
month = {apr},
pages = {462--467},
publisher = {IEEE},
title = {{Distance indices for the detection of similarity in C programs}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84921452094{\&}partnerID=40{\&}md5=01d96b52b82042647f7fca59e2e9adbe http://ieeexplore.ieee.org/document/6915408/},
year = {2014}
}
@article{Alsmadi2014,
abstract = {Detecting similarity or plagiarism in the academic research publications, source code, etc. has been a long time complex and time consuming task. Several algorithms, tools and websites exist that try to find plagiarism or possible plagiarism in those human creative products. In this paper we used source code plagiarism detection tools to assess the level of plagiarism in source codes. We also investigated issues related to accuracy and challenges in detecting possible plagiarism in students' assignments. In a second study, we evaluated some tools against detecting possible plagiarism in research papers. Results showed that such process or decision is not binary to make and that subjectivity is high. In addition, there is a need to tune plagiarism detection tools to give criticality or weights by users of those tools to categorize and classify different levels of seriousness for committing plagiarism. {\textcopyright} 2014 SERSC.},
address = {Saudi Arabia},
annote = {Export Date: 23 February 2015

References: Prechelt, L., Guido, M., Phlippsen, M., JPlag: Finding plagiarisms among a set of programs (2000) Journal of Universal Computer Science, 8 (11); 
Faidhi, J., Robinson, S.K., An empirical approach for detecting program similarity within a university programming environment (1987) Computers {\&} Education, 11 (1), pp. 11-19;
Wise, M., Detection of similarities in student programs: YAP'ing may be preferable to Plague'ing (1992) ACM SIGSCE Bulletin (Proc. of 23rd SIGCSE Technical Symp.)., 24, pp. 268-271;
Gitchell, D., Tran, N., Sim: a utility for detecting similarity in computer programs (1999) The proceedings of the thirtieth SIGCSE technical symposium on Computer science education, pp. 266-270. , New Orleans, Louisiana, United States, March 24-28;
Grier, S., A tool that detects plagiarism in Pascal programs (1981) ACM SIGCSE Bulletin, 13 (1), pp. 15-20;
Manber, U., Finding similar files in a large file system[C/OL] (2006) Proceedings of the Winter USENIX Conference, (1994), pp. 1-10;
Mozgovoy, M., Fredriksson, K., White, D., Joy, M., Sutinen, E., Fast plagiarism detection system (2005) Lecture Notes in Computer Science, 3772, pp. 267-270;
Baker, B., A theory of parameterized patern matching: Algorithms and applications (1993), pp. 71-80. , 25th Annual ACM Symposium on Theory of Computing, San Diego, CABroder, A., Glassman, Z., Steven, C., Manasse, M., Zweig, G., Syntactic clustering of the web (1997), Proceedings of the Sixth WWW Conference. Santa Clara, CAJun-Peng, B., Jun-Yi, S., Xiao-Dong, L., Qin-Bao, S., A Survey on Natural Language Text Copy Detection (2003) Journal of Software, 14, pp. 1753-1760;
Maurer, H., Kappe, F., Zaka, B., Plagiarism, a survey (2006) Journal of universal computer science, 12;
Kustanto, C., Liem, I., Automatic Source Code Plagiarism Detection (2009) SNPD, pp. 481-486;
Hage, J., Rademaker, P., Vugt, N., A comparison of plagiarism detection tools, Technical Report (2010), UU-CS-2010-015, Department of Information and Computing Sciences Utrecht University, Utrecht, The NetherlandsEl Tahir, A., Abdulla, H., Snasel, V., Survey of Plagiarism Detection Methods (2011), Fifth Asia Modelling Symposium, Manila, Philippines, May 24-May 26Alhami, I., Alsmadi, I., Automatic code homework grading based on concept extraction (2011) International Journal of Software Engineering and Its Applications IJSEIA, 5 (4). , http://www.sersc.org/journals/IJSEIA/},
author = {Alsmadi, I and AlHami, I and Kazakzeh, S},
doi = {10.14257/ijseia.2014.8.4.03},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Alsmadi, AlHami, Kazakzeh - Issues related to the detection of source code plagiarism in students assignments.pdf:pdf},
issn = {17389984 (ISSN)},
journal = {International Journal of Software Engineering and its Applications},
keywords = {Code similarity,Documents similarity,Information retrieval,Plagiarism,Search engines,String search},
language = {English},
number = {4},
pages = {23--34},
publisher = {Science and Engineering Research Support Society},
title = {{Issues related to the detection of source code plagiarism in students assignments}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84899685675{\&}partnerID=40{\&}md5=759c68881ecf16d425c6d0b367bb9cbc},
volume = {8},
year = {2014}
}
@inproceedings{Kikuchi2014,
abstract = {Learning to program is an important subject in computer science courses. During programming exercises, plagiarism by copying and pasting can lead to problems for fair evaluation. Some methods of plagiarism detection are currently available, such as sim. However, because sim is easily influenced by changing the identifier or program statement order, it fails to do enough to support plagiarism detection. In this paper, we propose a plagiarism detection method which is not influenced by changing the identifier or program statement order. We also explain our method's capabilities by comparing it to the sim plagiarism detector. Furthermore, we reveal how our method successfully detects the presence of plagiarism.},
address = {Tokyo, Japan},
annote = {Conference code: 107137

Export Date: 23 February 2015

Correspondence Address: Kikuchi, H.; Graduate School of Informatics and Engineering, University of Electro-Communications, 1-5-1 Chofugaoka, Japan

References: Gitchell, D., Tran, N., Sim: A utility for detecting similarity in computer programs (1999) SIGCSE Bull, 31 (1), pp. 266-270. , http://doi.acm.org/10.1145/384266.299783, Mar; 
Needleman, S.B., Wunsch, C.D., A general method applicable to the search for similarities in the amino acid sequence of two proteins (1970) Journal of Molecular Biology, 48 (3), pp. 443-453. , http://www.sciencedirect.com/science/article/pii/0022283670900574;
Akutsu, T., Mathematical models and algorithms in bioinformatics (2007) Kyoritsu Shuppan, 2, pp. 17-28. , in Japanese);
Clang: A C Language Family Frontend for LLVM, , http://clang.llvm.org/, C. Project
A4 - IEEE Computer Society; International Association for Computer and Information Science (ACIS)},
author = {Kikuchi, Hiroshi and Goto, Takaaki and Wakatsuki, Mitsuo and Nishino, Tetsuro},
booktitle = {15th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing},
doi = {10.1109/SNPD.2014.6888733},
editor = {S., Takahashi and J.Y., Jo},
file = {:E$\backslash$:/FOI/Doktorski rad/Plagijati pretra{\v{z}}ivanja exports/clanci/2014 - Kikuchi et al. - A source code plagiarism detecting method using alignment with abstract syntax tree elements.pdf:pdf},
isbn = {978-1-4799-5604-3},
keywords = {Abstract Syntax Trees,Artificial intelligence,Computer Science course,Detecting methods,Intellectual property,Plagiarism detection,Program statements,Programming exercise,Software engineering,Source code plagiarisms,Trees (mathematics)},
language = {English},
month = {jun},
pages = {1--6},
publisher = {IEEE},
title = {{A source code plagiarism detecting method using alignment with abstract syntax tree elements}},
url = {http://www.scopus.com/inward/record.url?eid=2-s2.0-84908688907{\&}partnerID=40{\&}md5=6991effcfbcdcc461db9be462256fa92 http://ieeexplore.ieee.org/document/6888733/},
year = {2014}
}
